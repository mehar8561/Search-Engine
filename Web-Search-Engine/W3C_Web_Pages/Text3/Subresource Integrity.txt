Subresource Integrity Subresource Integrity W3C First Public Working Draft March version: Latest published version: Latest editor's draft: Editors: Frederik Braun, Mozilla Corporation Devdatta Akhawe, UC Berkeley Joel Weinberger, Google, Inc. Mike West, Google, Inc. Copyright W3C® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract specification mechanism user agents verify thata fetched resource been delivered unexpected manipulation. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index list changes document be found athttps://github.com/w3c/webappsec. document was published Web Application Security Working Group as First Public Working Draft. document intended become W3C Recommendation. wish make comments regarding document, send archives) start email's subject. comments are Publication as First Public Working Draft not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document as other work progress. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Goals Use Cases/Examples Resource Integrity Downloads Fallback Conformance Key Concepts Terminology Framework Integrity metadata Cryptographic hash functions Resource verification algorithms Apply algorithm resource resource eligible integrity validation resource match metadata? Modifications Fetch Verification HTML document subresources integrity attribute noncanonical-src attribute Element interface extensions HTMLAnchorElement Attributes HTMLEmbedElement Attributes HTMLIFrameElement Attributes HTMLImageElement Attributes HTMLLinkElement Attributes HTMLMediaElement Attributes HTMLObjectElement Attributes HTMLScriptElement Attributes HTMLTrackElement Attributes Handling integrity violations Elements element embed element iframe element img element link element object element script element track element audio element source element video element Verification CSS-loaded subresources Verification JS-loaded subresources Workers Worker extension Attributes SharedWorker extension Attributes Validation XMLHttpRequest integrity attribute Progress events Validation Caching Risks Origin confusion MIME type confusion Recommendations Proxies Security Considerations Insecure channels remain insecure Hash collision attacks Cross-origin data leakage Acknowledgements A. References A.1 Normative references Introduction section non-normative. Sites applications web are rarely composed resources fromonly single origin. Authors pull scripts, images, fonts, etc. awide variety services content delivery networks, trustthat delivered representation fact, expected toload. attacker trick user downloading content froma hostile server DNS poisoning, other such means), author hasno recourse. Likewise, attacker replace file CDN serverhas ability inject arbitrary content. Delivering resources over secure channel risk: withTLS, HSTS, pinned public keys, user agent be fairly certainthat indeed speaking server talking Thesemechanisms, however, authenticate only server, not content. Anattacker admin!) access server manipulate content withimpunity. Ideally, authors not only be able pin keys aserver, also pin content, ensuring exact representation ofa resource, only representation, loads document such validation scheme, extending several HTMLelements integrity attribute cryptographic hash ofthe representation resource author load. instance,an author wish load jQuery shared server rather hosting iton own origin. Specifying expected SHA-256 hash ofhttps://code.jquery.com/jquery-1.10.2.min.jsis C6CB9UYIS9UJeqinPHWTHVqh_E1uhG5Twh-Y5qFQmYg meansthat user agent verify data loads URL matchesthat expected hash before executing JavaScript Thisintegrity verification significantly risk attacker cansubstitute malicious content. example be communicated user agent adding hash ascript element, so: Example src="https://code.jquery.com/jquery-1.10.2.min.js" integrity="ni:///sha-256;C6CB9UYIS9UJeqinPHWTHVqh_E1uhG5Twh-Y5qFQmYg?ct=application/javascript"> Scripts, course, are not only resource type integrity validation. scheme specified here HTMLelements trigger as as triggered CSSand JavaScript. Moreover, integrity metadata also be useful purposes other thanvalidation. User agents decide use integrity metadata as anidentifier local cache, instance, meaning common resources(for example, JavaScript libraries) be cached retrieved once,regardless URL are loaded. Goals Compromise third-party service not automatically meancompromise site scripts. Content authorswill have mechanism specify expectations forcontent load, meaning example load aspecific script, not script have aparticular URL. verification mechanism extend resource types thata page fetch course execution rendering. Activecontent style, iframe contents, etc) are, course,critical, inactive content such as images fonts also becovered. verification mechanism have reporting functionality whichwould inform author invalid resource was downloaded.Further be possible author choose run onlythe reporting functionality, allowing potentially corrupt resourcesto run site, flagging violations manual review. metadata provided verification enable improvements touser agents’ caching schemes: common resources such as JavaScriptlibraries be downloaded once, only once, even multipleinstances distinct URLs are requested. Relax mixed-content warnings resources whoseintegrity verified. integrity metadata resourceis delivered over secure channel, user agent choose toallow loading resource over insecure channel. Allow resources be downloaded non-canonicalsources instance, over insecure channel) performance,but fall back canonical source non-canonical sourcefails integrity check. Issue not sure about #5 #6. Get more detail WG about thebenefits such fallback system enable. Use Cases/Examples Resource Integrity author include JavaScript provided third-partyanalytics service site. however, ensure onlythe code carefully reviewed executed. do so generatingintegrity metadata script planning including, andadding script element page: Example src="https://analytics-r-us.com/v1.0/include.js" integrity="ni:///sha-256;SDfwewFAE...wefjijfE?ct=application/javascript"></script> advertising network wishes ensure advertisements delivered viathird-party servers matches code reviewed order reducethe risk accidental malicious substitution unreviewed content. Byadding integrity metadata iframe element wrapping theadvertisement, ensure third-party server onlythe agreed-upon content. Example src="https://awesome-ads.com/advertisement1.html" integrity="ni:///sha-256;kasfdsaffs...eoirW-e?ct=text/html"></iframe> user agent wishes ensure pieces UI are rendered viaHTML example, Chrome’s New Tab Page) aren’t manipulated before display.Integrity metadata risk altered JavaScript runin page’s high-privilege context. author mash-up make sure creation workingstate. Adding integrity metadata external subresources anexpected revision included files. author then use reportingfunctionality be notified changes included resources. Downloads software distribution service ensure files are correctlydownloaded. do so adding integrity metadata aelements users click trigger download: Example href="https://software-is-nice.com/awesome.exe" integrity="ni:///sha-256;fkfrewFRFEFHJR...wfjfrErw?ct=application/octet-stream" download>...</a> Fallback author wishes load resource over insecure channel performancereasons, fall back secure channel insecurely-loaded resourceis manipulated. do adding integrity metadata anon-canonical source script element: Example src="https://rockin-resources.com/script.js" noncanonical-src="http://insecurity-is-inherent.net/script.js" integrity="ni:///sha-256;asijfiqu4t12...woeji3W?ct=application/javascript"></script> Conformance as sections marked as non-normative, authoring guidelines, diagrams, examples, notes specification are non-normative. Everything else specification normative. key words NOT, REQUIRED, NOT, RECOMMENDED, MAY, OPTIONAL specification are be interpreted as described Conformance requirements phrased as algorithms specific steps beimplemented manner, so long as end result equivalent. Inparticular, algorithms defined specification are intended tobe easy understand are not intended be performant. Implementersare encouraged optimize. Key Concepts Terminology section several terms used document. term digest base64url-encoded result ofexecuting cryptographic hash function arbitrary block data. secure channel communication mechanism useragent defined as limited HTTP over TransportLayer Security insecure channel communication mechanism other thanthose user agent defined as term origin defined Origin specification.[RFC6454] MIME type resource technical hint about useand format resource. entity body, transfer encoding, contentencoding message body resource defined theHTTP specification, section base64url encoding defined inRFC section nutshell, charactersU+002B PLUS SIGN U+002F SOLIDUS characters normal base64encoding U+002D HYPHEN-MINUS U+005F LOW LINE respectively. Augmented Backus-Naur Form notation used document isspecified RFC SHA-256, SHA-384, SHA-512 are partof SHA-2 set cryptographic hash functions defined theNIST SHA-256, SHA-384, SHA-512”. Framework integrity verification mechanism specified here down theprocess generating sufficiently strong cryptographic digest aresource, transmitting digest user agent so beused fetching resource. Integrity metadata verify integrity resource, user agent integritymetadata, following pieces information: cryptographic hash function digest resource’s MIME type hash function digest be provided order validate aresource’s integrity. MIME type be provided, as therisk certain attack vectors MIME Type confusion inthis document’s Security Considerations section). metadata generally encoded as information” URI, asdefined RFC6920. example, given resource containing only string world!”,an author choose SHA-256 as hash function.-MO_YqmqPm_BYZwlDkir51GTc9Pt9BvmLrXcRRma8u8 base64url-encodeddigest results. be encoded as ni URI as Example ni:///sha-256;-MO_YqmqPm_BYZwlDkir51GTc9Pt9BvmLrXcRRma8u8 author further wishes specify content type Example ni:///sha-256;-MO_YqmqPm_BYZwlDkir51GTc9Pt9BvmLrXcRRma8u8?ct=text/plain Note Digests be generated using number utilities. OpenSSL, forexample, quite commonly available. example section theresult following command line: echo world." openssl dgst openssl enc sed Cryptographic hash functions Conformant user agents support SHA-256 SHA-512cryptographic hash functions use as part resource’sintegrity metadata. Resource verification algorithms Apply algorithm resource algorithm not hash function recognized supportedby user agent, return null. Let result be result applying algorithm tothe content entity body resource, including anycontent coding been applied, not including anytransfer encoding applied message body. Let encodedResult be result base64url-encodingresult. Strip trailing U+003D SIGN characters fromencodedResult. Return encodedResult. Issue Step pulled content-md5 definition want. bzbarsky’s WG post topic resource eligible integrity validation order mitigate attacker’s ability read data cross-origin bybrute-forcing values integrity checks, resources are only eligiblefor such checks are same-origin, publicly cachable, are theresult explicit access granted loading origin CORS. Certain HTTP headers also change way resource inways integrity checking account resourcecontains headers, ineligible integrity validation: WWW-Authenticate hides resources behind login; such non-publicresources are excluded integrity checks. Refresh cause IFrame contents transparently redirect anunintended target, bypassing integrity check. Issue Consider impact other headers: Content-Length, Content-Range,etc. there danger there? following algorithm details restrictions: Let request be request fetchedresource. resource following HTTP headers,return false: WWW-Authenticate Refresh mode request CORS,return true. origin request isresource’s origin, return true. resource cachable shared cache, as definedin return true. Return false. Note Step returns true resource was CORS-enabled request. theresource failed CORS checks, be available integritychecking because have loaded successfully. resource match metadata? metadata empty string, return true. resource’s URL’s scheme about, return true. metadata not valid information” URI,return false. resource not eligible integrityvaliation, return false. Let algorithm be alg component ofmetadata. Let expectedValue be val component ofmetadata. Let expectedType be value metadata’s ctquery string parameter. expectedType not empty string, not acase-insensitive match resource’s MIME type,return false. Let actualValue be result applyingalgorithm resource. actualValue null, return false. actualValue case-sensitive match forexpectedValue, return true. Otherwise, return false. Note expectedType empty string #6, wouldbe reasonable user agent warn page’s author about thedangers MIME type confusion attacks developer console. Modifications Fetch Fetch specification contain following modifications orderto enable rest specification’s work: following text be added section associated integrity metadata.Unless stated otherwise, request’s integrity metadata emptystring.” following text be added section associated integrity state, whichis indeterminate, pending, corrupt, intact. Unlessstated otherwise, indeterminate. Perform following steps before executing fetch” fetch preflight” algorithms: request’s integrity metadata empty string, setresponse’s integrity state indeterminate. Otherwise: Set response’s integrity state pending. Include Cache-Control header value request’s integrity metadata contenttype: Set request’s Accept header value valueof request’s integrity metadata’s content type. Add following step before step #1 handling statuscodes fetch” fetch preflight” algorithms: request’s integrity state pending, setresponse’s integrity state corrupt returnresponse. firing process request end-of-file event anyrequest: request’s integrity metadata empty string, setthe response’s integrity state indeterminate andskip directly firing event. response matches request’s integritymetadata, set response’s integrity state intactand skip directly firing event. Set response’s integrity state corruptand skip directly firing event. Verification HTML document subresources variety HTML elements result requests resources are beembedded document, executed context. support integritymetadata new elements are added future,a new integrity attribute added list content attributes forthe audio, embed, iframe, link, object, script, source,track, video elements. corresponding integrity IDL attribute thevalue element’s integrity content attribute added theHTMLAnchorElement, HTMLMediaElement, HTMLEmbedElement,HTMLIframeElement, HTMLLinkElement, HTMLObjectElement,HTMLScriptElement, HTMLSourceElement, HTMLTrackElementinterfaces. integrity attribute integrity attribute integrity metadata element.The value attribute be either empty string, onevalid information” URI as described thefollowing ABNF grammar: integrity-metatata NI-URL NI-URL rule defined RFC6920, section figure integrity IDL attribute reflect integrity content attribute. Issue consider supporting multiple ni URLs, allow migrationbetween algorithms. noncanonical-src attribute Authors MAY opt-in fallback mechanism user agents initiallyattempt load resources non-canonical source over HTTP, forperformance caching reasons). fetch failed integrity check, theuser agent report violation, retry fetch using canonicalURL over HTTPS). non-canonical URL specified noncanonical-src attribute. Forexample: Example src="http://example.com/script.js" noncanonical-src="http://cdn.example.com/script.js" integrity="ni:///sha-256;jsdfhiuwergn...vaaetgoifq?ct=application/javascript"></script> noncanonicalSrc IDL attribute reflect noncanonical-srccontent attribute. noncanonical resource be fetched omit credentialsmode set always, prevent leakage cookies insecurechannels. Issue attribute fallback general) only sense careabout allowing cache-friendly URLs load HTTPS contextwithout warnings. not sure do, so not going put too muchthought details here before discuss things bit more. Element interface extensions HTMLAnchorElement partial interface HTMLAnchorElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLEmbedElement partial interface HTMLObjectElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLIFrameElement partial interface HTMLIFrameElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLImageElement partial interface HTMLImageElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLLinkElement partial interface HTMLLinkElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLMediaElement partial interface HTMLMediaElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLObjectElement partial interface HTMLObjectElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLScriptElement partial interface HTMLScriptElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute HTMLTrackElement partial interface HTMLTrackElement attribute DOMString integrity;}; Attributes integrity type DOMString, value element’s integrity attribute Handling integrity violations Documents specify behavior failed integrity check deliveringa Content Security Policy integrity-policydirective, defined following ABNF grammar: directive-name document’s integrity policy value theintegrity-policy directive, explicitly provided as part thedocument’s Content Security Policy, block otherwise. document’s integrity policy block, user agent refuseto render execute resources fail integrity check, MUSTreport violation. document’s integrity policy report, user agent MAY renderor execute resources fail integrity check, MUSTreport violation. Issue document’s integrity policy fallback, user agent MUSTrefuse render execute resources fail integrity check, andMUST report violation. user agent MAY additionally choose loada fallback resource as specified relevant element. fallbackresource integrity check, user agent refuse render orexecute resource, report noncanonical-srcattribute strawman look). Issue document’s integrity policy require-for-all, user agentMUST treat lack integrity metadata resource as automaticfailure, refuse fetch resource, report violation. Elements element element integrity download attributes, useragent data needs order verify integrity thedownloaded resource. only type download safely makepromises about, so only type download support. Ifintegrity metadata added element not explicitlyrequest resource points be downloaded, user agents MUSTtreat link as broken. following hyperlink, user agent run following steps: subject integrity attribute value not theempty string, then: user agent MAY report error user auser-agent-specific manner. Abort following hyperlink algorithm. Replace step downloads hyperlink algorithm following: integrity attribute element not empty string, andthe element not have download attribute, abort steps. Fetch URL integrity metadata set value theintegrity attribute element, handle resulting resourceas download. handling resource as download, perform following step beforeproviding user way save resource later use: response’s integrity state corrupt document’sintegrity policy block, user agent report violation,and abort download. Note Note cover only downloads triggered explicitly adding adownload attribute element. Such link look following: Example href="https://example.com/file.zip" integrity="ni:///sha256;skjdsfkafinqfb...ihja_gqg?ct=application/octet-stream" download>Download!</a> embed element fetching URL step embed element setup stepsalgorithm: Set integrity metadata request valueof element’s integrity attribute. running task queued networking task source once URL hasbeen fetched, first perform following steps: response’s integrity state corrupt: document’s integrity policy block: Set element’s type attribute empty string. Skip step algorithm. Report violation. iframe element content be loaded child browsing context createdby iframe, perform integrity metadata set thevalue iframe element’s integrity attribute. Moreover: document’s integrity policy block, then useragent delay rendering content thefetching algorithm’s task process request end-of-filecompletes. process request end-of-file task request’s integrity state corrupt: resource same origin document’sbrowsing context owner iframe element’s Document’s origin, thenqueue task fire simple event named error theiframe element not fire cross-origin requests, toavoid leaking data about resource’s content). Report violation. Navigate child browsing context about:blank. Note Note only check integrity iframe’s document source.No subsequent verification document’s subresources perfomed.If integrity checks document’s subresources are desirable, documentloaded iframe needs include integrity metadata subresources. Issue effect things preload scanner? much work itgoing be vendors change got, ASAP!”behavior things fast users? much impact there beon user experience, especially things ads, kind ofvalidation most value? Issue do deal navigations child browsing context? Are theysimply disallowed? so, make sense? ads, butwhat about other use-cases? img element fetching image step update image dataalgorithm: Set integrity metadata request valueof element’s integrity attribute. jumping entries list step theupdate image data algorithm, first perform followingsteps: response’s integrity state corrupt: document’s integrity policy block: Abort jump progress. Perform steps entry labeled step Report violation. link element user agent attempts obtain resource pointed alink element: Set integrity metadata request valueof element’s integrity attribute. Additionally, perform following steps before firing load event atthe element: response’s integrity state corrupt: document’s integrity policy block: Abort load event, treat resource as having failedto load. resource same origin origin ofthe link element’s Document, then queue task tofire simple event named error link element. Report violation. object element fetching image step step theobject element algorithm: Set integrity metadata request valueof element’s integrity attribute. step object element first perform following steps: response’s integrity state corrupt: document’s integrity policy block: Fire simple event named error element. Jump step labeled fallback. Report violation. script element executing step step HTML5’s“prepare script” algorithm: Set integrity metadata request valueof element’s integrity attribute. Insert following steps after step step HTML5’s“prepare script” algorithm: Once fetching algorithm completed: response’s integrity state corrupt: document’s integrity policy block: resource same origin linkelement’s Document’s origin, then queue task tofire simple event named error element, andabort steps. Report violation. track element fetching track URL step start trackprocessing model algorithm: Set integrity metadata request valueof element’s integrity attribute. Additionally, perform following steps before performing stepsspecified successful track fetch: response’s integrity state corrupt: document’s integrity policy block: Perform steps specified failed track fetch. Abort steps specified successful track fetch. Report violation. audio element Issue TODO: Write section? want delay media elements have solution streaming. source element Issue TODO: Write section? want delay media elements have solution streaming. video element Issue TODO: Write section? want delay media elements have solution streaming. Verification CSS-loaded subresources Issue Tab Anne are poking adding fetch() spec somewherewhich allow CSS files specify various arguments fetchalgorithm requesting resources. Detail proposal athttp://lists.w3.org/Archives/Public/public-webappsec/2014Jan/0129.html.Once specified, proceed defining integrity argumentthat allow integrity checks CSS. Verification JS-loaded subresources Issue sections are less fleshed out debated HTML sections, wherethe WG concentrated most time thus far. Workers validate integrity scripts are be run as workers, newconstructor added Worker SharedWorker secondargument containing integrity metadata. information used whenrunning worker perform validation, as outlined thefollowing sections: Worker extension scriptURL, DOMString integrityMetadata)]partial interface Worker EventTarget attribute DOMString integrity;}; Attributes integrity type DOMString, value Worker’s integrity attribute. Defaults empty string. Worker(scriptURL, integrityMetadata) constructor invoked: integrityMetadata not valid information” URL,throw SyntaxError exception abort steps. Execute Worker(scriptURL) constructor, set newly createdWorker object’s integrity attribute integrityMetadata. SharedWorker extension scriptURL, DOMString name, DOMString integrityMetadata)]partial interface Worker EventTarget attribute DOMString integrity;}; Attributes integrity type DOMString, value SharedWorker’s integrity attribute. Defaults empty string. SharedWorker(scriptURL, name, integrityMetadata) constructor isinvoked: integrityMetadata not valid information” URL,throw SyntaxError exception abort steps. Execute SharedWorker(scriptURL, name) constructor, set thenewly created SharedWorker object’s integrity attribute tointegrityMetadata. Validation Add following step directly after step run workeralgorithm: script resource fetched step integrity status ofcorrupt, then Worker SharedWorker object associatedwith worker global scope, queue task fire asimple event named error object. Abort steps. XMLHttpRequest validate integrity resources loaded XMLHttpRequest, newintegrity attribute added XMLHttpRequest object. set, theintegrity metadata attribute used validate resourcebefore triggering load event. integrity attribute integrity attribute return value. Initially value MUSTbe empty string. Setting integrity attribute run steps: state not UNSENT OPENED, throw InvalidStateErrorexception abort steps. value provided not valid information” URL,throw exception abort steps. Set integrity attribute’s value value provided. Progress events Validation only place entire resource body beendownloaded. Data processed before resource completelyloaded failed load) unvalidated, potentially corrupt.For reason, document’s integrity policyis block, progress events not fire fetch hascompleted, way document’s integrity policy not block, developers whocare about integrity validation still ignore progress eventsfired resource downloading, instead listen only forthe load, abort, error events. document’s integrity policy block, then: executing step response” algorithm instep XMLHttpRequest’s send(data) method: object’s integrity attribute not empty stringthe user agent abort response” algorithm, andMUST NOT fire readystatechange event. executing step response body” algorithm instep XMLHttpRequest’s send(data) method: object’s integrity attribute not empty stringthe user agent abort response body” algorithm,and NOT fire readystatechange event. executing step response body” algorithm instep XMLHttpRequest’s send(data) method: object’s integrity attribute not empty stringthe user agent abort response body” algorithm,and NOT fire progress event. Validation user agent switch XMLHttpRequest object theDONE state, then perform following steps beforeswitching state: response’s integrity state intact indeterminate,then abort steps, continue toswitch DONE state. Otherwise, report violation, run following stepsif document’s integrity policy block: Set response entity body null Run request error steps exceptionNetworkError event error. Do not continue switch DONE state. Caching caching mechanism described section OPTIONAL. JavaScript libraries are good example resources are often loadedand reloaded different locations as users browse web:http://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js isexactly same file ashttps://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js. Bothfiles are identifiable ni URLni:///sha-256;iaFenEC8axSAnyNu6M0-0epCOTwfbKVceFXNd5s_ki4?ct=application/javascript. reduce performance impact reloading same data, user agentsMAY use integrity metadata as new index local cache, meaning thata user had already loaded version file have touch network load version.The user agent content same, be free treatthe latter as cache hit, regardless location mismatch. Risks approach good performance, have security implications. Seethe origin confusion MIME type confusion sections below somedetails. Origin confusion User agents set up caching mechanism uses only integritymetadata identify resource are vulnerable attacks bypasssame-origin restrictions are very careful choosing whetheror not read data straight cache. instance: Runtime script errors are sanitized resources areCORS-cross-origin page are loaded. XMLHttpRequest only load data same-origin resources, fromresources delivered proper CORS headers. Content Security Policy origin-based security checks. Issue More? Note simple cache-poisoning version attack be mitigated byrequiring strong hash functions cachable resources. More complexvariants are more difficult mitigate. Consider following: attacker Alice page containing following code: Example src="http://evil.com/evil.js" digest="ni://sha-256;123...789"> Alice’s user agent loads evil.js, stores cache. protected CSP only script attacker still be able exploit XSS vulnerabilityin injection Example src="http://bank.com/awesome.js" digest="ni://sha-256;123...789"> script come CSP even thoughit actually exist server. MIME type confusion User agents set up caching mechanism uses only integritymetadata identify resource are vulnerable attacks createresources behave differently based context areloaded. Gifar canonical example such attack. Authors mitigate risk specifying expected content typealong digest, as specified RFC section means content type be verified along digest whendetermining resource matches certain integritymetadata. Recommendations mitigate risk cross-origin data leakage type-sniffingexploitation, user agents take approach caching NOTuse integrity metadata as cache identifier followingare true: integrity metadata content type. resource was delivered response HTTP GET request notPOST, OPTIONS, TRACE, etc.) resource was delivered Access-Control-Allow-Origin HTTPheader value integrity metadata uses hash function very strong uniquenesscharacteristics: SHA-512 better. Content Security Policy active context, script orlink element triggered resource’s fetch valid nonce. Issue More ideas? Limiting resources wide-open CORS headers stronghash functions reasonable start… Proxies Optimizing proxies other intermediate servers modify thecontent fetched resources ensure digest associatedwith resources stays sync new content. optionis ensure integrity metadata associated withresources updated along resource Anotherwould be simply deliver only canonical version resourcesfor page author requested integrity verification. Tosupport latter option, user agents MAY send aCache-Control header value ofno-transform. Issue Think about integrity checks effect vary headersin general. Security Considerations Insecure channels remain insecure Integrity metadata delivered over insecure channel securitybenefit. Attackers alter digest remove entirely absolutely anything else document)), just as alter theresource hash meant validate. Authors desire sort ofsecurity whatsoever deliver resources containing digests oversecure channels. Hash collision attacks Digests are only as strong as hash function used generate Useragents refuse support known-weak hashing functions MD5, andSHOULD restrict supported hashing functions known becollision-resistant. time writing, SHA-256 good baseline.Moreover, user agents reevaluate supported hashing functionson regular basis, deprecate support functions shown beinsecure. Cross-origin data leakage Attackers determine cross-origin resource certaincontent attempting load known digest, watching forload failure. load attacker surmise theresource didn’t match hash, thereby gain insight itscontents. reveal, example, not user islogged particular service. Moreover, attackers brute-force specific values otherwisestatic resource: consider document Example content}<h1>Hello, content}</html> attacker precompute hashes page variety ofcommon usernames, specify hashes repeatedly attemptingto load document. examining reported violations, attackercan obtain user’s username. User agents mitigate risk refusing fire error eventson elements loaded cross-origin resources, side-channelswill likely be difficult avoid naturalHeight andnaturalWidth instance). Acknowledgements None new. Much content here inspired heavily GervaseMarkham’s Link Fingerprints concept, as as WHATWG’s Link Hashes. A. References A.1 Normative references D. Crocker; P. Overell. Augmented BNF Syntax Specifications: ABNF. January STD. URL: Anne van Kesteren. Cross-Origin Resource Sharing. January W3C Recommendation. URL: Adam Barth; Dan Veditz; Mike West. Content Security Policy Working Draft. URL: Robin Berjon; Steve Faulkner; Travis Leithead; Erika Doyle Navara; Edward O'Connor; Silvia Pfeiffer. HTML5. February W3C Candidate Recommendation. URL: R. Fielding et al. Hypertext Transfer Protocol HTTP/1.1. June RFC. URL: Ned Freed; Nathaniel S. Borenstein. Multipurpose Internet Mail Extensions Part Media Types. Draft Standard. URL: S. Bradner. Key words use RFCs Indicate Requirement Levels. March Internet RFC URL: E. Rescorla. HTTP Over TLS. May RFC. URL: Simon Josefsson. Base16, Base32, Base64 Data Encodings. Proposed Standard. URL: A. Barth. Web Origin Concept. December RFC. URL: Stephen Farrell; Dirk Kutscher; Christian Dannewitz; Borje Ohlman; Ari Keranen; Phillip Hallam-Baker. Naming Things Hashes. Proposed Standard. URL: Ian Hickson. Web Workers. May W3C Candidate Recommendation. URL: Anne van Kesteren; Julian Aubourg; Jungkee Song; Hallvord Steen et al. XMLHttpRequest Level January W3C Working Draft. URL: 