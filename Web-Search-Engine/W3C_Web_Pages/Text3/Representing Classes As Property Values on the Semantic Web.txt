Representing Classes Property Values Semantic Web Representing Classes Property Values Semantic Web W3C Working Group Note April version: Latest version: Previous version: Editor: Natasha Noy, Stanford University Contributors: Michael Uschold, Boeing Chris Welty, IBM Research Also Acknowledgements. Copyright W3C®(MIT, ERCIM, Keio), Rights Reserved. W3C liability,trademarkand documentuse rules apply. Abstract document addresses issue using classes as property values OWL RDF Schema. often convenient put class Animal) as property value topic book subject) building ontology. OWL Full RDF Schema do not put restriction using classes as property values, OWL DL OWL Lite most properties have classes as values. illustrate direct approach representing classes as property values OWL-Full RDF Schema. present various alternative mechanisms representing required information OWL DL OWL Lite. approach, discuss various considerations users keep mind choosing best approach purposes. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index document Working Group Note, produced Ontology Engineering Patterns Task Force Semantic Web Best Practices Deployment Working Group, part W3C Semantic Web Activity. document series documents produced task force. Comments document be sent public-swbp-wg@w3.org, mailing list public archive. Publication as Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document as other work progress. General issue often convenient put class Animal) as property value topic book subject) building ontology. OWL Full Overview] RDF Schema do not put restriction using classes as property values, OWL DL OWL Lite most properties have classes as values. Use case example Suppose have set books about animals, catalog books. want annotate catalog entry subject, particular species class animal book about. Further, want be able infer book about African lions also book about lions. example, retrieving books about lions repository, want books are annotated as books about African lions be included results. More specifically, consider book examples: Life Pride", book introduction lions describing physical characteristics, habitat, young, food, predators, relationship people"; African Lion," physical characteristics, habitat, behavior African lions. specify first book animal species lion, second species African lion. also want retrieve second book query about lions, not just African lions. consider species animals be subjects booksandwould use Dublin Core property dc:subjectfor annotation. Furthermore, use as oursubjectsvarious species existing class hierarchy different animalspecies. examine representation information OWL RDF Schema suggest different ways capturing information OWL DL OWL Lite. goal web publisher enable maximum reuse published information. be common Semantic Web import reuse other published ontologies. reuse existing ontologies Semantic Web case, hierarchy animal species) preserve original intended semantics new context. semantics changes, other applications already using ontology be adversely affected. Interoperation existing applications using ontology also be error-prone there be different interpretations same ontology). patterns suggest below change interpretation hierarchy classes used property values. suggest users take approach only know be adversely affected such re-interpretation. Other use case scenarios issue general have hierarchy classes use as terminology annotate other classes individuals. Consider using hierarchy different genres annotate music CDs, linking classes individuals ontology corresponding terms standard reference terminology. example, UMLS standard reference terminology many medical applications. want have hasDiagnosis relation instance patient class representing disease indicating patient was diagnosed disease. Other use cases using classes as property values include meta-modeling semantic interoperability systems. note uses particular example as subjects books) illustrate more general representation issue: using classes as property values. note not be interpreted as general discussion represent subject hierarchies terminologies semantic web. Notations figures below, ovals represent classes rectangles represent individuals. orange color classes individuals are specific particular approach. Green arrows green labels are OWL annotation properties. use N3 syntax represent examples. Approaches Approach Use classes directly as property values first approach, simply use classes subjecthierarchyas values properties example, as values dc:subjectproperty). define class Book represent books.For simplicity, hierarchy animals, omit classes otheranimals, such as mammals felines Figure Using classes directly aspropertyvalues. Here definition individual specific book areannotating)with corresponding subject simplicity, assume eachbookdiscusses only species animal): rdfs:seeAlso Life Pride" dc:subject book African Lion" be represented rdfs:seeAlso African Lion" dc:subject class AfricanLion subclass class Lion: owl:Class; rdfs:subClassOf Considerations choosing approach resulting ontology compatible RDF Schema OWLFull, butit outside OWLDL OWL Lite. approach probably most succinct intuitive amongall theapproaches proposed here. Applications using representation directly access theinformationneeded infer Lion subject LionsLifeInThePrideBookindividual) subclass Animal AfricanLion(the subject TheAfricanLionBook individual) asubclassof Lion. need restrict range values dc:subject property, then need create additional class such restriction. instance, want define class books about animals—BookAboutAnimals—that animal books be instances want restrict range values dc:subject property BookAboutAnimals class class Animal subclasses. way define such restriction as owl:Class rdfs:subClassOf rdfs:subClassOf owl:Class owl:unionOf owl:Restriction owl:onProperty dc:subject owl:hasValue Animal owl:Restriction owl:onProperty dc:subject owl:someValuesFrom owl:Restriction owl:onProperty rdfs:subClassOf; owl:hasValue Animal  Here class BookAboutAnimals subclass oftheclass Book. class BookAboutAnimals also asubclassof class things have either class Animalitself, class subclass Animal as ofthevalues dc:subject property. OWL code approach Summary approach approach good use care about simplicity, do not have be OWL DL, either do not need limit range dc:subject values do not care also need use classes as subjects implement restriction. Approach Create special instances class be used as property values treat hierarchy animal species as hierarchy subjects, create individuals corresponding subjects use individuals as values dc:subject property Figure Using hierarchy subjectsand parallel set subject individuals. Thus, have, example, individual LionSubject be instance Lion class: then use LionSubject as value property dc:subject LionsLifeInThePrideBook individual: rdfs:seeAlso Life Pride" dc:subject Considerations choosing approach resulting ontology compatible RDF Schema OWL Lite hence OWL DL) class Lion instance subject lion. Creating instance Lion class represent specific lion zoo be inconsistent interpretation. Therefore, need have different class represent lions zoo. change important implications hierarchy animals not created imported somewhere else. Applications interpret reference imported classes according original definitions. Other ontologies importing same hierarchy animals fact use original definition. Therefore, there be inconsistency not only own interpretation also ontology integrated others importing same resource. consideration not problem interoperability not issue. approach, there explicit direct relation relation general-purpose reasoner canreadily identify) LionSubject individual definedaboveand, example, AfricanLionSubject individual, isaninstance AfricanLion: application trying utilize relation(for example, extract books about African lions askedforbooks about lions), need be aware specific approach andknow trace back corresponding classes, subclasses, andrespective instances. general-purpose reasoner willnot be able use information directly. Note however theindividual AfricanLionSubjectis also instance Lion class. Therefore, askforall books dc:subject instance Lionclass get books are annotated AfricanLionSubject. There maintenance penalty: need maintain set ofinstancesfor subjects addition hierarchy subjects ensurethatthe sets—classes representing subjects correspondingindividuals—areconsistent other have same names, etc.).However, developers instrument tools maintain thisconsistencyautomatically. consider approach be messy" simpletaskathand Defining range restriction dc:subjectproperty class BookAboutAnimals straightforward.Wedefine restriction states somevaluesof dc:subject property are instances class Animal: owl:Class rdfs:subClassOf owl:Restriction owl:someValuesFrom owl:onProperty dc:subject OWL code approach Summary approach approach results OWL DL ontology be good use staying OWL DL important. approach potential disadvantage having actual subject values be unrelated hence not allowing general-purpose reasoner relate books subject books subject lions", example. Furthermore, hierarchy animals imported source uses hierarchy describe actual animals, using approach inconsistent interpretation. need maintain consistency set classes representing subjects set corresponding individuals. Approach Create parallel hierarchy instances as property values create single class Subject make subjects be individuals are instances class Subject rdfs:seeAlso Figure Using property other rdfs:subClassOf organize subject hierarchy use annotation property rdfs:seeAlso link LionSubject individual Lion class. Note rdfs:seeAlso annotation property hence giving value class not take out OWL DL. approach, are essentially using individuals as surrogates classes. then create explicit relations different subjects, re-create hierarchy animals have mind. owl:TransitiveProperty owl:ObjectProperty rdfs:domain rdfs:range rdfs:seeAlso rdfs:seeAlso wecreate own property parentSubject, also use thecorrespondingproperties SKOS-Core1.0 schema, RDF schema representing thesauri andsimilartypes knowledge organization systems. So, example parentSubjectis similar skos:broader. SKOS schema richvocabularyfor handling subject hierarchy, additional properties such as skos:narrower,skos:related,and so Considerations choosing Approach resulting ontology compatible RDF Schema OWLLite OWL DL). However, note RDF Schema not havetransitiveproperties, thus not be able express transitivity parentSubjectproperty RDF Schema. Most DL reasoners be able infer transitive relations betweensubjects, such as fact AnimalSubject parentSubjectof AfricanLionSubject. However, DL reasoner willnot be able infer book LionSubject as thevaluefor dc:subject also about Animals. More specializedreasonersmay be able infer information. resulting hierarchy subjects not related dependent class hierarchy representing same topics case, animals), annotation property rdfs:seeAlso. Annotation properties however, are usually ignored inference engines. consider approach having parallel hierarchies representing essentially same information be too complicated difficult maintain simple task hand approach explicitly subject terminology fromthecorrespondingontology. Many consider separation good modeling practice: thesemanticsof subject Lion be different semantics theclassof lions. Having subjects separate hierarchy, allow todefinefor example subject Africa parent subject ofthesubject AfricanLion. separation subject terminology correspondingontologyincurs serious maintenance penalty: need maintain set ofinstancesfor subjects addition hierarchy subjects. manyapplications,we also need ensure sets—classes representingsubjectsand corresponding individuals values parentSubjectproperty—are consistent other. However, developers caninstrumenttools maintain consistency automatically. Defining range restriction dc:subjectproperty class BookAboutAnimals straightforward.Werestrict values dc:subject property theinstancesof class Subject: owl:Class rdfs:subClassOf owl:Restriction owl:someValuesFrom owl:onProperty dc:subject OWL code approach Summary approach approach be good use staying OWL DL important. also use DL reasoner infer transitive relationships subjects. carry penalty having parallel Approach Create special restriction lieu using specific value approach use DL reasoner infer, example, book Lion as subject also Animal as subject. approach, create new class represent class books particular subject. example, create class BookAboutLions represent books have Lion as subjects. then assign subject specific book making book instance classes, instead explicitly setting property value instance. Thus, example individual LionsLifeInThePrideBook be instance class BookAboutLions create similar classes subject category books are interested such as BookAboutAnimals, BookAboutAfricanLions Figure Using members class as values properties. key pattern definition new book classes. classes represent books about particular subject, include subject definition. following, example, definition class BookAboutLions: owl:Class owl:equivalentClass owl:Class owl:intersectionOf owl:Restriction owl:onProperty dc:subject owl:someValuesFrom specific instance class LionsLifeInThePrideBookwouldthen be defined as rdfs:seeAlso Life Pride" code above literally, book instance instance class, members have least instance class Lion as value dc:subject property. OWL, not necessary create explicit instances classes use restriction Lion above). Figure include instances diagram as were explicit, use dotted lines denote not actually exist. approach interpretation used previous approaches using unspecified members class rather class as property values define class BookAboutAnimals as class books subject animal animals. Similarly, BookAboutLions class be class books subject lion lions. DL reasoner be able classify LionsLifeInThePrideBook as instance class BookAboutAnimals. Note there correspondence hierarchy classes books specific subjects as BookAboutAnimals, BookAboutLions, BookAboutAfricanLions) classes species hierarchy use as subjects Lion, AfricanLion). hierarchy books essentially parallels hierarchy subjects, not have have book class corresponding subjects—only subjects are interested book classes are defined as above, DL reasoner be able infer automatically hierarchy book classes, based hierarchy subjects. There variant approach merge steps Instead creating explicit named class, BookAboutLions, then creating instance class, create instance assign type be anonymous class type owl:Restriction. variant, there explicitly named class corresponding BookAboutLions. example, define LionsLifeInThePrideBook as owl:Restriction owl:onProperty dc:subject owl:someValuesFrom rdfs:seeAlso Life Pride" Considerations choosing Approach resulting ontology compatible OWL DL. Sincethisapproachuses restrictions, do not have semantics RDF Schema, wecannotuse approach RDF Schema. interpretation pattern different interpretations other patterns note: subject book more specific lions—individuals Lion class—rather Lion class case, book about lions book about lions, even be lions. Description Logic reasoner be able classify automatically individual LionsLifeInThePrideBook instance Lion class as subject as instance class BookAboutLions BookAboutAnimals. also be able classify class BookAboutLions defined above as subclass class BookAboutAnimals similar way). approach likely be easiest approach use youwouldlike employ DL reasoning classify books based subjects. Many consider more cumbersome express simple factthatthesubject book creating new anonymous)restrictionclass making class be type book. OWL code approach Summary approach approach make most use DL reasoners. different interpretation subject as being prototypical instance class rather whole class things specific subject corresponding class. understanding are using different interpretation, approach be good use using DL reasoners classify individuals based subjects property used place) important. Approach Use classes directly as annotation property values way stay OWL DL use classes as values annotation properties approach very similar approach treats dc:subject as annotation property: dc:subject owl:AnnotationProperty rdfs:seeAlso Life Pride" dc:subject Figure Using classes as values annotation properties. Considerations choosing Approach OWL DL, annotation properties same time bedefinedeitherobject properties datatype properties. Thus, dc:subject(or property want use) defined elsewhere as objectproperty datatype property, be used as annotationproperty. OWL DL, annotation properties have restrictions,such ascardinality domain/range restrictions, subproperties. Thus, ifyouuse approach, specify book have atleastone subject example individuals are instances BookAboutAnimalsmust be subclasses Animal class. Even ontology OWL DL annotationproperties areused consistent OWL DL restrictions), DL reasoners not usetheinformation annotation properties reasoning. Thus, order toextracta book about lions queried animal books, need usespecial-purpose reasoning uses annotation properties canperformreasoning OWL code approach Summary approach approach use classes directly as propertyvalues staying OWL DL. However, properties thatwillhave classes as values have be defined as annotations andthereforecannot have additional restrictions defined notbe declared as object datatype properties elsewhere). DL reasonerswillnot use values annotation properties. References Primer:Getting intoRDF Semantic Web using N3,http://www.w3.org/2000/10/swap/Primer. OWLWebOntology Language Overview, Deborah L. McGuinness Frank vanHarmelen, Editors, W3C Recommendation, February Latest versionavailableat Guide] OWLWebOntology Language Guide, Michael K. Smith, Chris Welty, andDeborahL. McGuinness, Editors, W3C Recommendation, February Latest versionavailableat Abstract Syntax] OWLWeb Ontology Language Semantics Abstract Syntax, Peter F.Patel-Schneider,Patrick Hayes, Ian Horrocks, Editors, W3C Recommendation, 10February2004, Latestversion available Resource Description Framework Model Syntax Specification Ora Lassila, Ralph R. Swick, Editors. World Wide Web Consortium Recommendation, Latest version available RDF Vocabulary Description Language RDF Schema Dan Brickley R.V. Guha, Editors. W3C Recommendation, February Latest version available RDFSemantics,Pat Hayes, Editor, W3C Recommendation, February Latest version availableathttp://www.w3.org/TR/rdf-mt/ RDFVocabularyDescription Language RDF Schema, Dan Brickley R. V.Guha,Editors, W3C Recommendation, February Latest versionavailableat Acknowledgements editor thank following Working Group members contributions document: Aldo Gangemi, Pat Hayes, Aditya Kalyanpur, Brian McBride, Alan Rector, Bernard Vatant. Atanas Kiryakov, Peter Mika, York have also contributed document. document product Ontology Engineering Patterns Task Force Semantic Web Best Practices Deployment Working Group. 