OWL Web Ontology Language New Features Rationale Edition) OWL Web Ontology Language New Features Rationale Edition) W3C Recommendation December version: Latest version Latest Recommendation: Previous version: Editors: Christine Golbreich, University Versailles Saint-Quentin LIRMM Evan K. Wallace, National Institute Standards Technology Contributors: Peter F. Patel-Schneider, Nuance Communications refer errata document, include normative corrections. color-coded version document showing changes made since previous version also available. document also available non-normative formats: PDF version. also translations. Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract OWL Web Ontology Language, informally OWL ontology language Semantic Web formally defined meaning. OWL ontologies provide classes, properties, individuals, data values are stored as Semantic Web documents. OWL ontologies be used along information written RDF, OWL ontologies are primarily exchanged as RDF documents. OWL Document Overview overall state OWL be read before other OWL documents. document simple introduction new features OWL Web Ontology Language, including explanation differences initial version OWL OWL document also presents requirements have motivated design main new features, rationale theoretical implementation perspective. Status Document May Be Superseded section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index Summary Changes There have been substantive changes since previous version. details minor changes change log color-coded diff. Send Comments send comments archive). work document OWL Working Group complete, comments be addressed errata future revisions. Open discussion developers archive). Endorsed W3C document been reviewed W3C Members, software developers, other W3C groups interested parties, endorsed Director as W3C Recommendation. stable document be used as reference material cited document. W3C's role making Recommendation draw attention specification promote widespread deployment. functionality interoperability Web. Patents document was produced group operating February W3C Patent Policy. document informative only. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. Table Contents Introduction Features Rationale Syntactic sugar F1: DisjointUnion F2: DisjointClasses F3: NegativeObjectPropertyAssertion NegativeDataPropertyAssertion New constructs properties F4: Self Restriction F5: Property Qualified Cardinality Restrictions F6: Reflexive, Irreflexive, Asymmetric Object Properties F7: Disjoint Properties F8: Property Chain Inclusion F9: Keys Extended datatype capabilities F10: Extra Datatypes Datatype Restrictions F11: N-ary Datatypes Datatype Definitions Data Range Combinations Simple metamodeling capabilities F12: Punning Extended Annotations F13: Annotations Axioms about annotation properties Other Innovations F14: Declarations Top Bottom Properties IRIs Imports Versioning Minor features Anonymous Individuals Inverse Properties Profiles F15: OWL EL, OWL QL, OWL RL OWL EL OWL QL OWL RL profile choose Other Design Choices Rationale Syntax Backward Compatibility Recapitulatory Table References Appendix: Use Cases Use Cases Features Use Case #1 Brain image annotation neurosurgery Use Case #2 Foundational Model Anatomy Use Case #3 Classification chemical compounds Use Case #4 Querying multiple sources automotive company Use Case #5 OBO ontologies biomedical data integration Use Case #6 Spatial topological relationships Ordnance Survey Space] Use Case #7 Systematized Nomenclature Medicine Use Case #8 Simple part-whole relations OWL Ontologies Use Case #9 Kidney Allocation Policy France Use Case #10 Eligibility Criteria Patient Recruitment Use Case #11 Multiple UCs datatype Use Case #12 Protégé report experiences OWL users Use Case #13 Web service modeling Use Case #14 Managing vocabulary collaborative environments Use Case #15 UML Association Class Use Case #16 Database federation Use Case Tools developers Use Case #18 Virtual Solar Terrestrial Observatory Space] Use Case #19 Semantic Provenance Capture Space] Use Case #20 Biochemical self-interaction domain] Use Cases Bibliography Appendix: Change Log Changes Recommendation Changes Proposed Recommendation Changes Last Call Acknowledgments Introduction document overview main new features OWL rationale. features were determined based real applications user tool-developer experience, been documented OWLED Workshop Series. inclusion features supported use cases provided W3C OWL Working Group, are listed Section document also other design decisions were made development OWL purposefully retained OWL Web Ontology Language particularly various concrete syntaxes OWL relationship OWL RDF OWL language features, design decisions, use casesfor OWL document thus forms extension Use Cases Requirements underlie OWL Use Cases Requirements]. OWL several new features OWL includingincreased expressive power properties, extended supportfor datatypes, simple metamodeling capabilities, extended annotationcapabilities, keys OWL also several profiles language subsets better meet certain performancerequirements be easier implement Features Rationale new features OWL are presented here, organized following categories: syntactic sugar make common statements easier new constructs increase expressivity, extended support datatypes, simple metamodeling capabilities, extended annotation capabilities, other innovations, minor features. feature described common pattern as brief sentence explaining new feature was added, feature description including informal meaning, informal syntax, simple example issued Use Cases, theoretical implementation implications new feature, links related use cases. Readers selectively show hide Examples Functional Syntax RDF Syntax Examples toggling buttons below Syntactic sugar OWL syntactic sugar make common patterns easier write. constructs are simply shorthands, do not change expressiveness, semantics, complexity language. Implementations, however, prefer take special notice constructs more efficient processing. F1: DisjointUnion OWL means define set subclasses as disjointand complete covering superclass using several axioms, thiscannot be done concisely. DisjointUnion class as theunion other classes, are pairwise disjoint. shorthand separate axioms making classes pairwisedisjoint setting up union class. Normative SyntaxDirect SemanticsRDF-Based Semantics DisjointUnion C CE1 CEn C class, CEi, n are class expressions, more annotations. HCLS Functional-Style Syntax: DisjointUnion(:BrainHemisphere exclusively either be DisjointUnion(:Lobe exclusively either be more RDF: owl:disjointUnionOf exclusively either be Lobe owl:disjointUnionOf exclusively either be more CHEMISTRY Functional-Style Syntax: DisjointUnion(:AmineGroup exclusively either be RDF: owl:disjointUnionOf exclusively either be AUTOMOTIVE Functional-Style Syntax: DisjointUnion(:CarDoor exclusively either not more RDF: CarDoor owl:disjointUnionOf exclusively either not more Use Case #1 Use Case #2 Use Case #3 Use Case #4 F2: DisjointClasses OWL means state subclasses are disjoint, stating several subclasses are pairwise disjoint be done concisely. DisjointClasses states classes set are pairwise disjoint. shorthand binary disjointness axioms classes.Normative SyntaxDirect SemanticsRDF-Based Semantics DisjointClasses CE1 CEn CEi, n are class expressions, more annotations. HCLS Functional-Style Syntax: DisjointClasses( are pairwise exclusive. DisjointClasses( Nothing be RDF: rdf:type owl:AllDisjointClasses owl:members are pairwise exclusive. owl:disjointWith Nothing be Note: FMA uses huge number disjoint classes C]: template Left X X Left lung lung), classes X left Y X Y Skin breast Skin left breast), classes X male Y X female Y side male chest side female chest). Use Case #1 Use Case #2 F3: NegativeObjectPropertyAssertion NegativeDataPropertyAssertion OWL means assert values property individual, not provide construct directly asserting values individual not have facts). NegativeObjectPropertyAssertion NegativeDataPropertyAssertion) states given property not hold given individuals literal).Normative SyntaxDirect SemanticsRDF-Based Semantics NegativeObjectPropertyAssertion( OPE a1 a2 OPE object property expression, a1 a2 are individuals, more annotations. NegativeDataPropertyAssertion( DPE lt DPE data property expression, individual, lt literal, more annotations. HCLS Functional-Style Syntax: NegativeObjectPropertyAssertion( not live region. NegativeDataPropertyAssertion( not years old. RDF: rdf:type owl:NegativePropertyAssertion owl:sourceIndividual owl:assertionProperty owl:targetIndividual not live region. rdf:type owl:NegativeDataPropertyAssertion owl:sourceIndividual owl:assertionProperty owl:targetValue not years old. Use Case #9 New constructs properties OWL was mainly focused constructs expressing information about classes individuals, exhibited weakness regarding expressiveness properties. OWL offers new constructs expressing additional restrictions properties, new characteristics properties, incompatibility properties, property chains keys. F4: Self Restriction OWL not allow definition classes objects are related given property, example class processes regulate reflexivity" useful many applications, particularly global reflexivity not hold property general, local reflexivity classes object.The OWL construct ObjectHasSelf local reflexivity be used class descriptions. Self restrictions are part SROIQ extension description logic underlying OWL-DL designed provide additions requested users, not affecting decidability practicability. SROIQ supported several reasoners, including FaCT++, HermiT Pellet class expression defined using ObjectHasSelf restrictiondenotes class objects are related given object property. Normative Syntax Direct SemanticsRDF-Based Semantics ObjectHasSelf OPE object property expression. HCLS Functional-Style Syntax: SubClassOf( ObjectHasSelf( Auto-regulating processes regulate SubClassOf( ObjectHasSelf( Auto-Phosphorylating-Kinases phosphorylate RDF: owl:SubClassOf rdf:type owl:Restriction owl:onProperty owl:hasSelf Auto-regulating processes regulate owl:SubClassOf rdf:type owl:Restriction owl:onProperty owl:hasSelf Auto-Phosphorylating-Kinases phosphorylate Use Case #5 Use Case #3 F5: Property Qualified Cardinality Restrictions OWL restrictions number instances property, e.g., defining persons have least children, not provide means restrain class data range instances be counted cardinality restrictions), e.g., specifying class persons have least children are girls. OWL qualified unqualified cardinality restrictions are possible. Qualified object data cardinality restrictions are present SROIQ have been successfully implemented. are already supported various tools reasoners Protégé FACT++, HermiT, KAON2, PELLET RACER)[TOOLS] API]. ObjectMinCardinality, ObjectMaxCardinality, ObjectExactCardinality DataMinCardinality, DataMaxCardinality, DataExactCardinality) allow assertion minimum, maximum exact qualified cardinality restrictions, object data) properties. Normative Syntax Direct SemanticsRDF-Based Semantics Object Property Cardinality Restrictions ObjectMinCardinality n OPE CE n non-negative integer, OPE object property expression, CE class expression. ObjectMaxCardinality n OPE CE n non-negative integer, OPE object property expression, CE class expression. ObjectExactCardinality n OPE CE n non-negative integer, OPE object property expression, CE class expression. HCLS Functional-Style Syntax: ObjectMinCardinality( owl:Thing Class objects having least direct part. ObjectExactCardinality( Class objects having exactly direct part type frontal lobe. RDF: rdf:type owl:Restriction minQualifiedCardinality owl:onProperty Class objects having least direct part. rdf:type owl:Restriction owl:cardinality owl:onProperty owl:onClass Class objects having exactly direct part type frontal lobe. OWL possible express Brain Hemisphere least direct parts not exactly direct part specific type, frontal, parietal, temporal, occipital, limbic lobe, as needed UC#1. OWL statements are possible as shown examples above. CHEMISTRY Functional-Style Syntax: ObjectMaxCardinality( Class objects bound most different RDF: rdf:type owl:Restriction maxQualifiedCardinality owl:onProperty owl:onClass Class objects bound most different AUTOMOTIVE Functional-Style Syntax: ObjectMaxCardinality( Class objects having most ObjectExactCardinality( Class objects having exactly RDF: rdf:type owl:Restriction maxQualifiedCardinality owl:onProperty owl:onClass Class objects having most rdf:type owl:Restriction owl:cardinality owl:onProperty owl:onClass Class objects having exactly Data Property Cardinality Restrictions DataMinCardinality n DPE DR n non-negative integer, DPE data property expression, DR data range. DataMaxCardinality n DPE DR n non-negative integer, DPE data property expression, DR data range. DataExactCardinality n DPE DR n non-negative integer, DPE data property expression, DR data range. HCLS Functional-Style Syntax: DataMaxCardinality( individual most Social Security Number RDF: rdf:type owl:Restriction maxQualifiedCardinality owl:onProperty individual most Social Security Number Use Case #1 Use Case #2 Use Case #3, Use Case #4 Use Case #8 F6: Reflexive, Irreflexive, Asymmetric Object Properties OWL assertions object property symmetric transitive, impossible assert property reflexive, irreflexive asymmetric. OWL construct ReflexiveObjectProperty be asserted object property expression globally reflexive property individuals. Normative Syntax Direct SemanticsRDF-Based_Semantics ReflexiveObjectProperty OPE OPE object property expression more annotations. HCLS Functional-Style Syntax: ReflexiveObjectProperty( Everything same blood group as ReflexiveObjectProperty( Everything RDF: rdf:type owl:ReflexiveProperty Everything same blood group as rdf:type owl:ReflexiveProperty Everything Note: There are different interpretations mereological relations. example OBO Case #5) states reflexive mereological relation anatomicalPartOf anatomical entities asserted be irreflexive Use Case #1. OWL construct IrreflexiveObjectProperty be asserted object property expression irreflexive property not hold individual. Normative Syntax Direct SemanticsRDF-Based_Semantics IrreflexiveObjectProperty OPE OPE object property expression more annotations. HCLS Functional-Style Syntax: IrreflexiveObjectProperty( Nothing be proper part IrreflexiveObjectProperty( Nothing be bound RDF: rdf:type owl:IrreflexiveProperty Nothing be proper part rdf:type owl:IrreflexiveProperty Nothing be bound EARTH SPACE Functional-Style Syntax: IrreflexiveObjectProperty( Nothing flow RDF: rdf:type owl:IrreflexiveProperty Nothing flow Note: given examples correspond statements about mereological topological properties anatomicalPartOf given Use Cases, e.g.; Use Case #1. Other applications however, use terms properties different characteristics. OWL construct AsymmetricObjectProperty be asserted object property expression asymmetric isif property expression OPE individuals y, then hold y x. Note asymmetric stronger simply not symmetric.Normative Syntax Direct SemanticsRDF-Based_Semantics AsymmetricObjectProperty OPE OPE object property expression more annotations. HCLS Functional-Style Syntax: AsymmetricObjectProperty( property asymmetric. RDF: rdf:type owl:AsymmetricProperty property asymmetric. constructs are part SROIQ have been implemented SROIQ reasoners such as FaCT++, HermiT Pellet. Use Case #5 Use Case #6 Use Case #8 Note: Many use cases illustrate desirability Reflexivity, Irreflexivity, Asymmetry Local Reflexivity. usefulness features was explicitly mentioned Health Care Life Sciences interest group last call comment. Semantic Web Deployment Working Group also explicitly mentioned potential usefulness reflexivity asymmetry e.g., specifying application-specific specializations SKOS semantic relations comment SWD). example, mereology, partOf relation defined be transitive, reflexive, antisymmetric. Many applications describe complex structures, e.g., life sciences systems engineering, require extensive use part-whole relations axiomatized way. Other relations encountered ontology modeling also require such axiomatizations, possibly different characteristics Examples include proper part locative relations transitive irreflexive), causal relations transitive irreflexive) membership relations irreflexive). example skos:broader relationship. SKOS specification statements regarding reflexivity irreflexivity skos:broader allow interpretations: example, be considered reflexive direct translation inferred OWL subclass hierarchy, irreflexive most thesauri classification schemes. OWL reflexivity/irreflexivity features be added demand. Self restrictions are even more fine grained, allowing skos:broader be made only locally reflexive irreflexive w.r.t. given skos:Concept SubClassOf axiom F7: Disjoint Properties OWL means state disjointness classes, impossible state properties are disjoint. OWL construct DisjointObjectProperties be asserted several object properties are pairwise incompatible individuals be connected different properties set.This construct part SROIQ been implemented SROIQ reasoners. Normative Syntax Direct SemanticsRDF-Based Semantics DisjointObjectProperties( OPE1 OPEn OPEi, nare object property expressions more annotations. HCLS Functional-Style Syntax: DisjointObjectProperties( are exclusive properties. RDF: owl:propertyDisjointWith are exclusive properties. Note: Use Case #1 anatomical entities related third anatomical entity as connected, are adjacent, are said be contiguous. DisjointDataProperties be asserted several data properties are pairwise incompatible SyntaxDirect SemanticsRDF-Based Semantics DisjointDataProperties( DPE1 DPEn DPEi, nare data property expressions more annotations. Functional-Style Syntax: DisjointDataProperties( Start time something, e.g., surgery, be different end time. RDF: owl:propertyDisjointWith Start time something, e.g., surgery, be different end time. Use Case #1 Use Case #2 Use Case #3 F8: Property Chain Inclusion OWL not provide means define properties as composition other properties, as uncle be defined; hence, not possible propagate property locatedIn) along property partOf).The OWL construct ObjectPropertyChain SubObjectPropertyOf axiom property be defined as composition several properties. Such axioms are known as complex role inclusions SROIQ also regularity conditions necessary decidability), have been implemented SROIQ reasoners.Normative Syntax Direct SemanticsRDF-Based Semantics axiom SubObjectPropertyOf ObjectPropertyChain( OPE1 OPEn OPE) states individual connected individual y chain object properties expressions OPE1, OPEn necessary connected y object property OPE. SubObjectPropertyOf ObjectPropertyChain( OPE1 OPEn OPE OPEi, n are object property more annotations. HCLS Functional-Style Syntax: SubPropertyOf( ObjectPropertyChain( located y y part then located example disease located part located whole. RDF: owl:propertyChainAxiom located y y part then located example disease located part located whole. Use Case #1 Use Case #5 Use Case #7 Use Case #8 F9: Keys OWL not provide means define keys. However, keys are clearly vital importance many applications order uniquely identify individuals given class values set key properties. OWL construct HasKey keys be defined given class. OWL key properties are not required be functional total properties, always possible separately state key property functional, desired.Keys OWL are form DL Safe rule have been implemented HermiT, KAON2 Pellet, be added other reasoners. HasKey axiom states named instance class uniquely identified object) property set properties named instances class coincide values key properties, then individuals are same. Normative SyntaxDirect SemanticsRDF-Based Semantics HasKey( CE OPE1 OPEm DPE1 DPEn CE class expression, OPEi m are object property expressions DPEj, j n are data property expression more annotations. HCLS Functional-Style Syntax: HasKey( registered patient ABM national organ waiting list] uniquely identified waiting list number ClassAssertion( DataPropertyAssertion( waiting list number RDF: owl:hasKey registered patient ABM national organ waiting list uniquely identified waiting list number rdf:type waiting list number example, since key class number uniquely axiom HasKey( only states different patients have got number assigned have same number waiting list: values were same named instances class individuals be equal. HasKey axiom similar InverseFunctionalProperty axiom, main difference being applicable only individuals are explicitly named. not state registered patient least most value inference patient class be drawn. Functional-Style Syntax: HasKey( Transplantation uniquely identified donor, recipient, organ RDF: owl:hasKey Transplantation uniquely identified donor, recipient, organ set several properties needed identify transplantation: indeed donor provide several organs single person, e.g., kidney liver, same kind organ recipients, e.g., kidney, different organs different recipients. Use Case #2 Use Case #7 Use Case #9 Extended datatype capabilities F10: Extra Datatypes Datatype Restrictions OWL support only integers strings as datatypesand not support subsets datatypes. example, state person age, integer, not restrict range datatype adults have age greater OWL new capabilities datatypes, supporting richer set datatypes restrictions datatypes facets, as XML Schema. OWL datatypes include various kinds numbers, adding support wider range XML Schema Datatypes float, decimal, positiveInteger, etc.) providing own datatypes, e.g., owl:real; strings Language Tag rdf:PlainLiteral datatype); boolean values, binary data, IRIs, time instants, etc. DatatypeRestriction also possible specify restrictions datatypes means constraining facets constrain range values allowed given datataype,by length strings) e.g., minLength, maxLength, minimum/maximum value, e.g., minInclusive, maxInclusive.Extended datatypes are allowed many description logics are supported several reasoners.Normative Syntax Direct SemanticsRDF-Based Semantics DatatypeRestriction( DT F1 lt1 Fn ltn DT unary datatype Fi lti n are pairs constraining facet literal. HCLS Functional-Style Syntax: DatatypeRestriction(xsd:integer minInclusive new datatype lower bound XML Schema datatype xsd:integer RDF: rdf:type rdfs:Datatype owl:onDatatype xsd:integer owl:withRestrictions xsd:minInclusive new datatype lower bound XML Schema datatype xsd:integer datatype needed example define patients depend hospital's pediatric services over depend adult services. Use Case #9 Use Case #11 Use Case #12 Use Case #18 Use Case #19 F11: N-ary Datatypes OWL not possible represent relationships values object, e.g., represent square rectangle length width. N-ary datatype support was not added OWL because there were issues regarding just support be added. However, OWL syntactic constructs needed n-ary datatypes, provide common basis extensions. Data Range Extension: Linear Equations note extension OWL defining data ranges terms linear rational coefficients. HCLS Functional-Style Syntax: DataAllValuesFrom DataComparison(Arguments(x y) leq( y individuals less equal Use Case #10 Use Case #11 Datatype Definitions OWL new class be defined class description, not offer means explicitly define new datatype. ease writing, reading, maintaining ontologies, OWL new construct define datatypes; particularly useful same datatype used multiple times ontology. DatatypeDefinition explicitly name new datatype.Normative Syntax Direct Semantics RDF-Based Semantics DatatypeDefinition DT DR DT datatype, DR data range more annotations. HCLS Functional-Style Syntax: DatatypeDefinition( DatatypeRestriction(xsd:integer minInclusive adult age defined using lower bound XML Schema datatype xsd:integer RDF: owl:equivalentClass rdf:type rdfs:Datatype owl:onDatatype xsd:integer owl:withRestrictions xsd:minInclusive adult age defined using lower bound XML Schema datatype xsd:integer Use Case #9 Data Range Combinations OWL new class be constructed combining classes, not provide means construct new datatype combining other ones. OWL possible define new datatypes way. OWL combinations data ranges be constructed using intersection union DataUnionOf), complement data ranges. DataIntersectionOf DR1 DRn DRi, n are data ranges more annotations. DataUnionOf DR1 DRn DRi, n are data ranges more annotations. DataComplementOf DR) DRi, n are data ranges more annotations. Functional-Style Syntax: DataComplementOf( data range literals are not positive integer greater equal RDF: rdf:type rdfs:Datatype owl:complementOf data range literals are not positive integer greater equal Use Case #9 Simple metamodeling capabilities F12: Punning OWL DL required strict separation names e.g., classes individuals. OWL DL separation somewhat allow different uses same term, e.g., Eagle, be used class, class Eagles, individual, individual representing species Eagle belonging plant animal species. However, OWL DL still certain restrictions: name be used class datatype name only be used kind property. OWL Direct Semantics treats different uses same name as completely separate, as required DL reasoners. Telecom Declaration( Class( declared be class ClassAssertion( individual ObjectPropertyAssertion( individual connected individual same term class individual possible OWL thanks punning Individual). Collaborative environment Declaration( Class( declared be Class Declaration( ObjectProperty( declared be ObjectProperty ClassAssertion( individual same term property individual possible OWL thanks punning Individual). Use Case #14 also be represented using annotation deprecated property property be more intuitive better modeling. UML Design Declaration( Class( Declaration( Class( are declared be classes. SubClassOf subclass used model association classes Company as class. ObjectPropertyDomain( domain property ObjectPropertyRange( range property same term class ObjectProperty(3, possible OWL thanks punning ObjectProperty). Use Case #12 Use Case #13 Use Case #14 Use Case #15 Extended Annotations OWL allowed extralogical annotations, such as label comment, be given ontology entity, did not allow annotations axioms, e.g., giving information about asserted axiom OWL annotatins ontologies, entities, anonymous individuals, axioms, annotations F13: Annotations Annotations ontology entities anonymous individualsOWL construct AnnotationAssertion annotation ontology entities as classes properties) anonymous individuals. annotations carry semantics OWL Direct Semantics, allowing direct use DL reasoners. AnnotationAssertion( AP s v AP annotation property, s IRI anonymous individual, v literal, IRI, anonymous individual are more annotations annotation assertion) HCLS Functional-Style Syntax: AnnotationAssertion CARO:0000003 structure" IRI CARO:0000003 CARO ontology annotated human-readable label structure", as value rdfs:label annotation property AnnotationAssertion FMA:Heart IRI FMA:Heart FMA annotated integer FMA Id), as value annotation property FMA:UWDAID. RDF: CARO:0000003 rdfs:label structure" IRI CARO:0000003 CARO ontology annotated rdfs:label annotation property human-readable label anatomical structure. FMA:Heart FMA:UWDAID IRI FMA:Heart FMA annotated annotation property FMA:UWDAID positive integer FMA Id). Annotations Axioms, Annotations, OntologiesOWL construct Annotation annotations axioms ontologies. also be used annotations annotations annotations carry semantics OWL Direct Semantics, allowing direct use DL reasoners. Annotation( AP v AP annotation property, v literal, IRI, anonymous individual are more annotations. HCLS Functional-Style Syntax: SubClassOf( Annotation( rdfs:comment lobes lungs are necessarily lobes since left lungs do not have middle lobe.") comment lobes lungs are necessarily lobes" annotation subclass axiom subclass RDF: rdfs:subClassOf rdf:type owl:Annotation owl:annotatedSource owl:annotatedProperty rdfs:subClassOf owl:annotatedTarget rdfs:comment lobe lungs are necessary lobe, since left lung do not have middle lobe." comment lobe lungs are necessary lobe" annotation subclass axiom subclass Use Case #2Use Case #5 Use Case #12 Use Case #19 Axioms about annotation properties Annotation properties be given domains ranges participate annotation property hierarchy special axioms have semantic meaning OWL Direct Semantics, carry standard RDF semantics RDF-based Semantics mapping RDF vocabulary). Subproperty Annotation Property SubAnnotationPropertyOf( AP1 AP2 AP AP2 are annotation properties, are more annotations. HCLS Functional-Style Syntax: SubAnnotationPropertyOf property subproperty OBO ontologies, particular Gene Ontology, distinguish different kinds synonyms: exact_synonym, narrow_synonym, broad_synonym. RDF: rdfs:subPropertyOf property subproperty OBO ontologies, particular Gene Ontology, distinguish different kinds synonyms: exact_synonym, narrow_synonym, broad_synonym. Domain Annotation Property AnnotationPropertyDomain AP U AP annotation property, U IRI are more annotations. HCLS Functional-Style Syntax: AnnotationPropertyDomain FMA:UWDAID FMA:AnatomicalEntity Only FMA: AnatomicalEntity have FMA:UWDAID FMA ID) RDF: FMA:UWDAID rdfs:domain FMA:AnatomicalEntity Only FMA: AnatomicalEntity have FMA:UWDAID FMA ID) Range Annotation Property AnnotationPropertyRange AP U AP annotation property, U IRI are more annotations. HCLS Functional-Style Syntax: AnnotationPropertyRange FMA:UWDAID xsd:positiveInteger ID FMA: AnatomicalEntity positive integer RDF: FMA:UWDAID rdfs:range xsd:positiveInteger ID FMA: AnatomicalEntity positive integer Use Case #2Use Case #5 Other Innovations F14: Declarations OWL entity such as class object property be used ontology prior announcement, so there was way ensuring entity names matched different axioms. practice, entity name was mistyped axiom, there was way catching error. OWL declaration signals entity part vocabulary ontology. declaration also associates entity category datatype, object property, data property, annotation property, individual) declared entity. Declarations are not always necessary Syntax).Declarations do not affect meaning OWL ontologies thus do not have effect reasoning.Implementations choose check name declared desired. Declaration( E annotation E entity. TOOLS following declarations state IRI used as class IRI as individual. Functional-Style Syntax: Declaration( Class( declared be class Declaration( NamedIndividual( declared be individual RDF: rdf:type owl:Class declared be class rdf:type owl:NamedIndividual declared be individual HCLS Functional-Style Syntax: Declaration( Class( CARO:0000003 CARO:0000003 declared be class RDF: CARO:0000003 rdf:type owl:Class CARO:0000003 declared be class Use Case Use Case #5 Top Bottom Properties OWL had only top bottom predefined entities classes, classes owl:Thing owl:Nothing, OWL also top bottom object data properties, namely owl:topObjectProperty,owl:bottomObjectProperty, owl:topDataProperty, owl:bottomDataProperty. pairs individuals are connected owl:topObjectProperty individuals are connected owl:bottomObjectProperty. possible individuals are connected literals owl:topDataProperty individual connected owl:bottomDataProperty literal. IRIs Uniform Resource Locators were used OWL identifyclasses, ontologies, other ontology elements. URIs are stringsformed using subset ASCII. was quite limiting, particularlywith respect non-English language names as ASCII only includesletters English alphabet. support broad international needs, OWL uses Internationalized Resource Identifiers identifyingontologies elements. Imports Versioning OWL ontologies be stored as Semantic Web documents, ontologies import other ontologies. OWL clear importing location ontology document. OWL also up relationship ontology name andits location response several requests, simpleversioning mechanism means version names OWL 2ontology have ontology IRI, used identify theontology. OWL ontology also have version IRI, used toidentify particular version ontology. OWL ontology stored version IRI ontologiesthat have ontology IRI stored ontology IRI as itdoes not matter versions desired then importing usethe ontology IRI, particular version desired then theversion IRI used. Ontology V Import AX are ontology version IRIs, are more imports, ontology IRI, are more annotations are more axioms. ontology stored version IRI V. versions using ontology IRI also be stored O; considered be current version ontology. Minor features other changes have been introduced OWL syntax, are not changes expressive power respect OWL Anonymous Individuals OWL anonymous individuals were introduced as individuals identifiers. Functional-Style Syntax: Individual(value( value( axiom not contain individual name subject triples, so introduced individual anonymous individual. contrast, OWL anonymous individuals are identified using node IDs. Functional-Style Syntax: ObjectPropertyAssertion( axiom explicit anonymous individual unknown address city Paris ObjectPropertyAssertion( region IleDeFrance RDF: axiom explicit anonymous individual unknown address city Paris state Rhode Island. change was mainly motivated requirement related new functional syntax. patterns using blank nodes be specified node IDs because frame structure Abstract syntax constructions, be done functional syntax. There change expressive capability. Nothing changed RDF side, treatment anonymous individuals OWL fully backwards compatible OWL example above, simply blank node RDF graph. Use Case #9 Inverse Properties OWL properties are atomic, possible assert object property inverse property. OWL property expressions such as ObjectInverseOf( P be directly used class expressions. writing ontologies easier avoiding need name inverse. inverse object property expression ObjectInverseOf( P individual a1 a2 only object property P a2 a1. ObjectInverseOf( P P object property. Functional-Style Syntax: ObjectInverseOf( expression inverse property RDF: owl:inverseOf expression inverse property inverse object properties axiom InverseObjectProperties( OPE1 OPE2 states properties are inverse. InverseObjectProperties( OPE1 OPE2 OPE1 OPE2 are object property expressions. following example OWL inverse property axiom. Functional-Style Syntax: ObjectProperty( inverse inverse property named be represented OWL following axiom stating inverse Functional-Style Syntax: EquivalentProperties( ObjectInverseOf( same as inverse property such axioms are quite common, OWL following syntactic shortcut as Functional-Style Syntax: InverseObjectProperties( are inverse properties. RDF: owl:inverseOf are inverse properties. Profiles F15: OWL EL, OWL QL, OWL RL OWL defined major dialects, OWL DL OWL Full, syntactic subset Lite). However, turned out was not sufficient address requirements later identified deployments OWL ontologies. Many applications, particularly life sciences, use very large ontologies, e.g.; FMA, NCI Thesaurus, SNOMED CT, Gene Ontology OBO ontologies. Such ontologies often need represent complex entities anatomical entities composed parts connected complex ways) allow propagation properties location diseases parts whole); also have huge number classes, heavy use made classification order facilitate development maintenance. Applications are, therefore, mainly concerned language scalability reasoning performance problems e.g., issues surrounding FMA are willing trade off expressiveness return computational guarantees, particularly w.r.t. classification. Many applications involving classical databases are concerned interoperability OWL database technologies tools. ontologies used such applications are typically relatively lightweight, are often used query very large sets individuals stored standard relational databases. There therefore, requirement access such data directly relational queries SQL). Other applications are concerned interoperability ontology language rules existing rule engines. ontologies used such applications are again typically relatively lightweight, be used query large datasets, be useful necessary operate directly data form RDF triples. Typical cases include OWL applications are willing trade full expressivity language efficiency, RDF(S) applications need added expressivity OWL order address above requirements, OWL different profiles OWL EL, OWL QL, OWL RL sublanguages subsets) OWL useful computational properties reasoning complexity range LOGSPACE PTIME) implementation possibilities fragments implementable using RDBs). are briefly described below; complete description, Profiles Profiles]. OWL EL OWL EL expressive power used many large-scale ontologies, e.g.; SNOMED CT, NCI thesaurus. OWL EL places several syntactic restrictions language: Restrictions constructs: OWL EL supports existential quantification class expression data range, existential quantification individual literal self-restriction, enumerations involving single individual single literal, intersection classes data ranges. Missing features include universal quantification class expression data range, cardinality restrictions max exact), disjunction DisjointUnion, DataUnionOf), class negation many other features; complete list missing features given OWL Profiles Profiles]. Restrictions axioms: OWL EL supports most axioms e.g., subClass, equivalentClass, class disjointness, range domain, object property inclusion possibly involving property chains, data property inclusion properties, keys be noted addition syntactic restrictions, OWL EL global restrictions axioms defined OWL Structural Specification Specification] additional condition Global Restrictions OWL Profiles Profiles]). result restrictions, OWL EL reasoners CEL exploit reasoning algorithms, including query answering algorithms, complexity known be worst-case polynomial Computational Properties OWL Profiles Profiles]). EL acronym profile's basis EL family description logics Update], logics provide only Existential quantification. OWL QL OWL QL expressive power typically used simple ontologies thesauri, expressive power ER/UML schemas. OWL QL places several syntactic restrictions language: Restrictions constructs: features include limited form existential restrictions, subClass, equivalentClass, disjointness, range domain, symmetric properties, etc. Missing features are existential quantification class expression data range, self-restriction, existential quantification individual literal, enumeration individuals literals, universal quantification class expression data range, cardinality restrictions max exact), disjunction DisjointUnion, DataUnionOf, property inclusions involving property chains), functional inverse-functional properties, transitive properties, reflexive properties, irreflexive properties, asymmetric properties, keys; complete list missing features given OWL Profiles Profiles]. Restrictions axioms: OWL QL supports same class axioms as structural specification Specification], DisjointUnion disallowed. restrictions enable tight integration RDBMSs, reasoners be implemented top standard relational databases. profile therefore, particularly suited applications requiring only relatively lightweight ontologies, very large number individuals, useful necessary access data directly relational queries SQL). Reasoning, including query answering, be efficiently implemented using query rewriting techniques, complexity known be worst case NLogSpace Computational Properties OWL Profiles Profiles]). QL acronym fact query answering be implemented rewriting queries standard relational Query Language. OWL RL OWL RL designed accommodate OWL applications trade full expressivity language efficiency, RDF(S) applications need added expressivity OWL achieved defining syntactic subset OWL amenable implementation using rule-based technologies. OWL RL places several syntactic restrictions language: Restrictions constructs: most OWL class expressions constructs are supported, use restricted certain syntactic positions Table OWL Profiles Profiles]). example, existential quantification class unions class expressions are allowed hand side axioms. Restrictions axioms: OWL RL supports axioms OWL disjoint unions classes, reflexive object property axioms, negative object data property assertions. restrictions allow OWL RL be implemented using rule-based technologies such as rule extended DBMSs, results complexity reasoning, including query answering, being worst-case polynomial Computational Properties OWL Profiles Profiles]). Rule-based implementations operate directly RDF triples Oracle’s OWL Prime Prime]) so be applied arbitrary RDF graph, i.e., OWL ontology. case, only correct answers queries be computed be sound), not guaranteed obtain correct answers not be complete). profile was inspired DLP pD* RL acronym fact reasoning be implemented using standard Rule Language. Use Case #2 Use Case #3 Use Case #4 Use Case #8 Use Case #16 profile choose Application developers ask profile best suits needs. choice different profiles mainly expressiveness required application, priority given reasoning classes data, size datasets importance scalability, etc. following suggestions be useful: Users requiring scalable profile large simple ontologies good time performance ontology reasoning want consider OWL EL. Users requiring profile easily interoperate relational database systems, scalable reasoning large datasets most important task want consider OWL QL. Users requiring profile easily interoperate rules engines rule extended DBMSs, scalable reasoning large datasets most important task want consider OWL RL. Note OWL QL OWL RL are suited applications relatively lightweight ontologies are used very large datasets. choice use depend type data be processed: useful necessary access data directly relational queries SQL), then OWL QL be preferred; useful necessary operate directly data form RDF triples, then OWL RL be preferred. Other Design Choices Rationale OWL fully backwards compatible OWL conceptual design slightly different, particular regarding OWL syntax. Syntax There are various syntaxes available serialize exchange OWL ontologies. primary exchange syntax OWL RDF/XML Syntax only syntax be supported implementations. explained below, main purpose Functional Syntax Specification] specify structure language. OWL/XML XML] XML serialization motivated desire better interoperability XML based tools languages. Normative syntax only required exchange syntax OWL ontologies RDF/XML, as clearly stated Section Conformance document Conformance]: syntaxes have been defined OWL ontology documents, someor be used OWL tools exchanging documents.However, conformant OWL tools take ontology documents as input(s)must accept ontology documents using RDF/XML serialization RDF Mapping], conformant OWL tools publish ontologydocuments possible, be able publish RDF/XMLserialization asked do so HTTP content negotiation)." Functional Syntax grammar OWL was defined Abstract Syntax Functional Syntax plays similar role OWL grammar language. OWL specified not only terms grammar also structure. Indeed, addition Functional Syntax, OWL introduced structural specification precisely specify conceptual structure OWL ontologies. structural specification defined using Unified Modeling Language uses very simple form UML diagrams are expected be easily understandable readers familiar object-oriented systems. structural specification normative abstract model syntaxes OWL normative non-normative. independent concrete exchange syntaxes OWL ontologies. Functional Syntax closely structural specification. Clarity readability syntax were important factors design Functional Syntax. functional-style syntax been introduced allow easy writing OWL axioms. benefit OWL Functional Syntax closer syntax used first order logic, various specification issues as as relating OWL constructs general literature easier. several syntaxes OWL RDF/XML, Manchester syntax). OWL frame-like syntax several features class, property individual be defined single axiom once. cause problems practice. First, bundles many different aspects given entity single axiom. be convenient ontologies are being designed, not convenient manipulating programmatically. fact, most implementations OWL break such axioms apart several axioms, dealing only single feature entity. However, cause problems round-tripping, as structure ontology be destroyed process. Second, type axiom often misinterpreted as declaration unique given entity. OWL however, entities be used being subject such axiom, there be many such axioms relating same entity. OWL addressed problems several ways. First, frame-like notation been dropped favor more fine-grained structure axioms: axiom just feature given entity. Second, OWL explicit declarations, explicit definition notion structural consistency. OWL more verbose, not expected lead problems given most OWL ontologies are created using ontology engineering tools. following example OWL frame-like axiom. ObjectProperty( ObjectInverseOf( inverseFunctional transitive Annotation( rdfs:comment object part object.")) property inverse property named containedIn, inverse functional transitive property, human-friendly comment object part object." be represented OWL using following axioms. Declaration( ObjectProperty( Declaration object property AnnotationAssertion( rdfs:comment means object part object." assertion comment property means object part object." InverseObjectProperties( are inverse properties InverseFunctionalObjectProperty( inverse functional property TransitiveObjectProperty( transitive property Concerning abstract syntax OWL AS used as exchange syntax, then OWL ontologies written AS be input OWL tools remain valid ontologies. be emphasized issue tool providers: only required exchange syntax OWL ontologies being RDF/XML, up tools decide accept ontologies serialized AS FS, matter). OWL/XML Syntax OWL Working Group defined XML syntax OWL based XML Schema Schema], called XML_Serialization, OWL/XML XML]. syntax mirrors structural specification OWL Specification]. XML syntax motivated desire support OWL users want better interoperability XML based tools languages, example WSDL, XSLT/XQuery/XPath, schema-aware editors. standard format OWL tool vendors mayoptionally support provide access extensive tool chainavailable XML schemas. Thus OWL tool developers users usingtools vendors be be able write XPath, XSLT, XQueryand CSS work OWL. was very difficult do using RDF/XMLformat was only XML format available OWL additional benefit XML data be exposed RDF/OWL applications using GRDDL. introduction OWL/XML also more comfortable avenuefor XML-savvy user understand OWL OWL more appealingto organizations individuals have made considerableinvestment XML tooling training. open source toolkit isalready available conversion format requiredexchange form RDF/XML. Thus OWL/XML existing OWL 1tooling data, not breaking interoperability tools. Backward Compatibility overall structure OWL not changed compared OWL almost building blocks OWL were already present OWL possibly different names. OWL abstract syntax Section OWL Semantics Semantics]) played role structure functional syntax OWL Specification]. OWL functional syntax form OWL abstract syntax, role overall structure OWL identical: structure language. OWL functional syntax much closer RDF graph representation capture more RDF graphs; also direct correspondence structural specification UML OWL OWL precise mapping ontology structures using abstract/functional syntax) RDF graphs. OWL however, also benefits explicitly specified mapping RDF graphs back ontology structures RDF Mapping]. semantics Direct Semantics] RDF-Based RDF-Based Semantics]) OWL have direct counterparts OWL names Direct Model-Theoretic Semantics RDF-Compatible Model-Theoretic Semantics respectively Semantics]. XML Presentation Syntax was also available OWL XML Syntax] not as Recommendation). other hand, Manchester syntax Manchester Syntax] did not exist OWL OWL defined sub-language Lite), OWL QL, RL) Profiles]. OWL Lite not been re-specified OWL because backward compatibility, OWL Lite ends up as sub-language OWL central role RDF/XML as only required exchange syntax OWL tools relationships Direct RDF-Based semantics correspondence theorem) have not changed. More importantly, backwards compatibility OWL complete, syntactically semantically. Just as OWL OWL handle RDF graphs. vocabulary given special meaning OWL special vocabulary OWL However, use owl:DataRange, still possible, now deprecated rdfs:Datatype be used instead. direct semantics OWL Direct Semantics] almost completely compatible direct semantics OWL Semantics]. only difference annotations are semantics-free direct semantics OWL highly unlikely, however, users notice difference: firstly, semantics given annotations OWL direct semantics was extremely weak unlikely lead significant entailments; secondly, OWL tools using direct semantics typically treat annotations as though are semantics-free. RDF-based semantics OWL RDF-Based Semantics] completely compatible RDF-based semantics OWL Semantics]. details semantics have changed, set inferences same. treatment importing RDF documents changed slightly OWL RDF graphs are be conformant OWL DL ontology documents Conformance]. OWL importing happened first, so entire merged graph was considered as unit Semantics]. OWL individual documents are considered separately most cases Specification]. means OWL DL RDF documents do not have well-specified ontology header need be slightly modified be conforming OWL DL ontology documents. Recapitulatory Table table summary main new features example relations Use Cases Features Examples use case specific feature, noted name bold, selected. corresponding example given reference issued bold other features use case concerned are noted numbers F1 F15. choice examples aims reconciling easy understandable illustration feature, variety domains, real examples papers available online). Use Case Feature(s) Example References UC#1 DisjointUnion F2 F5 F7 F8 F11 DisjointUnion(:Lobe disjoint union REQ] rules][Brain Imaging UC#2 DisjointClasses F1 F2 F5 F7 F9 DisjointClasses( be UC#20 Local reflexivity ObjectHasSelf( class individuals UC#4 Qualified Cardinality F1 F15 ExactCardinality( Class objects having exactly UC#5 Asymmetric property F6 F8 F13 AsymmetricProperty( p proper part then be proper part p UC#6 Irreflexive property IrreflexiveProperty( Nothing UC#7 Property chain F9 SubPropertyOf( ObjectPropertyChain( anything part whole, e.g., disease. REQ] UC#8 Reflexive property F5 F8 ReflexiveProperty( Whole] about partOf as reflexive property e.g., part car". Whole] UC#9 Negative property F9 F10 NegativePropertyAssertion( patient not years old. Ontology] Biomedecine] UC#10 N-ary AllValuesFrom( y individuals superior UC#11 N-ary F10 AllValuesFrom( y) individuals inferior UC#12 Datatype restriction F5 F12 F13 DatatypeRestriction(xsd:integer minInclusive new datatype lower bound XML Schema datatype xsd:integer, e.g., describe class Adult. UC#13 metamodeling Declaration( Class( declared be class ClassAssertion( instance PropertyAssertion( input example punning Class Individual. Service] UC#14 metamodeling Declaration( ObjectProperty( declared be ObjectProperty ClassAssertion( individual class example punning Property UC#15 metamodeling Declaration( Class( Declaration( Class( are declared be classes SubClassOf association classes PropertyDomain( domain property PropertyRange( range property example punning Class ObjectProperty. Association Class] UC#16 Profiles Use Case profile e.g., OWL QL, conjunctive query answering implemented using conventional relational database systems UC#17 Declaration Declaration( Class( declared be class. Problem] UC#18 Datatype F5 DatatypeRestriction( xsd:integer minInclusive maxExclusive data range atmosphere above below UC#19 Annotation F10 SubClassOf( rdfs:comment generated LogParser using ObserverLog") example annotation axioms Legend: F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 F14 F15 Disjoint Union Disjoint Classes Negative Property Assertion Local reflexivity Qualified Cardinality Reflexive, Irreflexive, Asymmetric Disjoint properties Property chain inclusion Keys Datatype restriction N-ary datatype Simple metamodeling capabilities Extended annotations Declarations Profiles References Specification] OWL Web Ontology Language: Structural Specification Functional-Style Syntax Edition) Boris Motik, Peter F. Patel-Schneider, Bijan Parsia, eds. W3C Recommendation, December Latest version available Direct Semantics] OWL Web Ontology Language: Direct Semantics Edition) Boris Motik, Peter F. Patel-Schneider, Bernardo Cuenca Grau, eds. W3C Recommendation, December Latest version available RDF-Based Semantics] OWL Web Ontology Language: RDF-Based Semantics Edition) Michael Schneider, editor. W3C Recommendation, December Latest version available RDF Mapping] OWL Web Ontology Language: Mapping RDF Graphs Edition) Peter F. Patel-Schneider, Boris Motik, eds. W3C Recommendation, December Latest version available Profiles] OWL Web Ontology Language: Profiles Edition) Boris Motik, Bernardo Cuenca Grau, Ian Horrocks, Zhe Wu, Achille Fokoue, Carsten Lutz, eds. W3C Recommendation, December Latest version available Conformance] OWL Web Ontology Language: Conformance Edition) Michael Smith, Ian Horrocks, Markus Krötzsch, Birte Glimm, eds. W3C Recommendation, December Latest version available XML Serialization] OWL Web Ontology Language: XML Serialization Edition) Boris Motik, Bijan Parsia, Peter F. Patel-Schneider, eds. W3C Recommendation, December Latest version available Manchester Syntax] OWL Web Ontology Language: Manchester Syntax Edition) Matthew Horridge, Peter F. Patel-Schneider. W3C Working Group Note, December Latest version available Semantics] OWL Web Ontology Language: Semantics Abstract Syntax. Peter F. Patel-Schneider, Patrick Hayes, Ian Horrocks, eds., W3C Recommendation, February XML Syntax] OWL Web Ontology Language: XML Presentation Syntax. Masahiro Hori, Jérôme Euzenat Peter F. Patel-Schneider, eds., W3C Note, June RFC Internationalized Resource Identifiers M. Duerst M. Suignard. IETF, January RDF/XML Syntax Specification Dave Beckett Brian McBride, eds., W3C Recommendation February Use Cases Requirements] OWL Web Ontology Language: Use Cases Requirements Jeff Heflin, ed. W3C Recommendation, February Latest version available Even More Irresistible SROIQ. Ian Horrocks, Oliver Kutz, Uli Sattler. Proc. 10th Int. Conf. Principles Knowledge Representation Reasoning AAAI Press, Tableaux Decision Procedure SHOIQ. Horrocks, I., Sattler, U. Proc. 19th International Joint Conference Artificial Intelligence Morgan Kaufmann, Los Altos.). Next Steps OWL. B. Cuenca Grau, I. Horrocks, B. Parsia, P. Patel-Schneider, U. Sattler. Proc. OWL: Experiences Directions, CEUR, Problem] Problem OWL Syntax. Boris Motik I. Horrocks, OWLED CEL—A Polynomial-time Reasoner Life Science Ontologies. F. Baader, C. Lutz, B. Suntisrivaraporn. U. Furbach N. Shankar, editors, Proceedings 3rd International Joint Conference Automated Reasoning volume Lecture Notes Artificial Intelligence, pages Springer-Verlag, EL+] Replacing SEP-Triplets SNOMED CT using Tractable Description Logic Operators. B. Suntisrivaraporn, F. Baader, S. Schulz, K. Spackman, AIME Pushing EL Envelope. Franz Baader, Sebastian Brandt, Carsten Lutz. Proc. 19th Joint Int. Conf. Artificial Intelligence Update] Pushing EL Envelope Further. Franz Baader, Sebastian Brandt, Carsten Lutz. Proc. Washington DC workshop OWL: Experiences Directions Tractable Reasoning Efficient Query Answering Description Logics: DL-Lite Family. Diego Calvanese, Giuseppe de Giacomo, Domenico Lembo, Maurizio Lenzerini, Riccardo Rosati. J. Automated Reasoning Description Logic Programs: Combining Logic Programs Description Logic. Benjamin N. Grosof, Ian Horrocks, Raphael Volz, Stefan Decker. Proc. 12th Int. World Wide Web Conference Budapest, Hungary, pp.: Completeness, decidability complexity entailment RDF Schema semantic extension involving OWL vocabulary. Herman J. ter Horst. J. Web Semantics Implementing Inference Engine RDFS/OWL Constructs User-Defined Rules Oracle. Zhe Wu Eadon, G. Das, S. Chong, E.I. Kolovski, V. Annamalai, M. Srinivasan, J. Oracle, Nashua, NH; Data Engineering, ICDE IEEE 24th International Conference pages Cancun, Properties Metamodeling OWL. Boris Motik. Properties Metamodeling OWL. Journal Logic Computation, OWL Datatypes: Design Implementation. Boris Motik, Ian Horrocks, ISWC Karlsruhe, Deutshland, Schema] W3C XML Schema Definition Language Part Structures. Shudi Gao, C. M. Sperberg-McQueen, Henry S. Thompson, eds. W3C Candidate Recommendation, April Latest version available as Query Answering OWL-DL Rules. Boris Motik, Ulrike Sattler Rudi Studer. Journal Web Semantics: Science, Services Agents World Wide Web, Unified Modeling Language UML), Infrastructure, V2.1.2. Object Management Group, Available Specification, November Appendix: Use Cases Use Cases Features Use Case Disjoint Union Disjoint Classes Negative property Local reflexivity Qualified Cardinality Reflex., Irrefl., Asymm. Disjoint properties Property chain Keys Datatype restriction N-ary datatype Meta- modeling Extend. annot. Declarations Profiles Anonym. Individual UC#1 UC#2 UC#3 UC#4 UC#5 UC#6 UC#7 UC#8 UC#9 UC#10 UC#11 UC#12 UC#13 UC#14 UC#15 UC#16 UC#17 UC#18 UC#19 following list Use Cases not exhaustive. Use Cases included list are only many motivated OWL new features user/implementor/theoretical reasons appear, time, accepted Working Group OWL other extensions pointed out papers as rules, default, etc.), possibly needed future, are indicated brackets. use cases are presented using following pattern: Overview, Features, Example References. Overview only general description use cases. Features lists several features required use case after paper. Example points feature short example been selected illustrate specific new feature OWL same information be seen abbreviated form Table easy access, References points related papers available online URL provided bibliography Appendix. Use Case #1 Brain image annotation neurosurgery Overview: system being developed concerns preparation surgical procedures neurosurgery. Specifically, aim assist user labelling cortical gyri sulci region surrounding lesion resection primary objective. Providing anatomical landmarks, especially eloquent cortex, highly important surgery. Brain image annotation also useful documentation clinical cases, then retrieval similar cases decision support future procedures. shared ontology brain anatomy also needed integrate multiple distributed image sources indexed anatomical features. useful large-scale federated systems statistical analysis brain images major brain pathologies. Features: Disjoint Union, Disjoint Classes, Qualified Cardinality Restrictions, Disjoint Properties, Property chain inclusion axioms, Example Disjoint Union E.g.; Lobe disjoint union References: REQ][Ontology rules][Brain Imaging Use Case #2 Foundational Model Anatomy Overview: Foundational Model Anatomy most comprehensive ontology human anatomy. Anatomy plays prominent role biomedicine, many biomedical ontologies applications refer anatomical entities. FMA tremendous resource bioinformatics sharing information applications use anatomy knowledge. authors claim, FMA reference ontology biomedical informatics correlating different views anatomy, aligning existing emerging ontologies bioinformatics Anatomy ontology, together Gene, Disease reference ontologies constitute backbone future Semantic Web Life Sciences. FMA benefit new features OWL state properties are exclusive proper-part boundBy). many biomedical ontologies applications refer FMA anatomical entities cross-references, keys also be useful. Features: Disjoint Union, Disjoint Classes, Qualified Cardinality Restrictions, Disjoint Properties, Keys, Extended annotations, Profiles Example Disjoint Classes E.g.; Nothing be References: Use Case #3 Classification chemical compounds Overview: Functional groups describe semantics chemical reactivity terms atoms connectivity, exhibit characteristic chemical behavior present compound. use case authors take first step designing OWL-DL ontology functional groups classification chemical compounds, highlight capabilities limitations OWL proposed OWL terms domain requirements. also describe application expressive features design ontology basic relations upper-level ontology be used guide formulation life science knowledge. report experiences enhance existing ontologies so as facilitate knowledge representation question answering. polycyclic ring structures are important parts molecules participate several kinds chemical reactions."A new OWL language feature such as qualified cardinality restriction be helpful describe number types functional groups. Features: Disjoint Union, Disjoint Classes, Qualified Cardinality Restrictions, Profiles Example Qualified Cardinality Restrictions E.g.; specifying number types functional groups. References: Use Case #4 Querying multiple sources automotive company Overview: Large companies often store information knowledge multiple information systems using various models formats. key objective use case retrieval relevant information multiple data knowledge sources large automotive company. application language profile facilitating querying multiple databases easy representation Parts Library ISO Standard ontologies Products, particularly used e-business catalogues, be helpful. Features: Disjoint Union, Qualified Cardinality Restrictions, Profiles QL) Example Qualified Cardinality Restrictions E.g.; class automobile having exactly rear doors. References: Use Case #5 OBO ontologies biomedical data integration Overview: Open Biomedical Ontologies consortium pursuing strategy facilitate integration biomedical data annotation using common controlled ontologies. Existing OBO ontologies, including Gene Ontology, are undergoing coordinated reform, new ontologies are being created basis evolving set shared principles governing ontology development. result expanding family OBO ontologies designed be interoperable incorporate accurate representations biological reality. effort OBO ontology relations designed define set basic relations semantics. OBO relation using characteristics being transitive, symmetric, reflexive, anti-symmetric. More generally OBO format offers constructs such as is_reflexive, is_symmetric, is_cyclic, is_anti_symmetric, etc. are used OBO obtologies. Converting OBO ontologies new OWL property axioms reflexive, irreflexive, asymmetric map corresponding OBO constructs, otherwise be transformed annotations. Features: Local reflexivity, Reflexive, Irreflexive, Asymmetric, Property chain inclusion axioms, Declaration Example Asymmetric E.g.; p proper part then be proper part p. References: Use Case #6 Spatial topological relationships Ordnance Survey Space] Overview: Ordnance Survey Britain's National Mapping Agency. currently continuously updated database topography Great Britain. database around man-made natural landscape features. features include everything forests, roads rivers down individual houses, garden plots, even pillar boxes. addition topographic mapping, entire new layers information are progressively being added database, such as aerial photographic images precisely match mapping; data providing addresses properties; integrated transport information. topological spatial relationships, many other places, need be able property reflexive, irreflexive, asymmetric antisymmetric order capture true intentions axioms”. Features: Reflexive, Irreflexive, Asymmetric, Example Irreflexive E.g.; Nothing flows References: Use Case #7 Systematized Nomenclature Medicine Overview: Systematized Nomenclature Medicine, Clinical Terms CT) work clinical terminology broad coverage domain health care, been selected as national standard use electronic health applications many countries, including U.S., U.K., Canada, Australia, Denmark, others. SNOMED was originally published SNOMED CT became available as major expansion resulting merger SNOMED RT U.K.'s Clinical Terms version major distinguishing feature differentiating prior editions use description logic define organize codes terms. major distinguishing feature SNOMED size complexity. over concept codes, representing different class, order magnitude larger next largest DL-based ontology are aware. property chain inclusion axioms, adoption OWL SNOMED community have required awkward workarounds attendant complications complexities effectively killing movement direction. have clear path using OWL further development integration other biomedical ontologies. required property chain inclusion axioms allow encode inheritance properties along property, e.g., part-of, utmost importance anatomy. example, axioms such as proper-part-of injury finger be inferred as injury hand. reported EL+] re-engineering SNOMED-CT way, number anatomical classes dropped time needed CEL reasoner seconds seconds. FMA, given common use cross-references SNOMED other biomedical ontologies concepts ID, keys be highly useful as Features: Property chain inclusion axioms, Keys, Profiles EL) Example Property chain E.g.; anything located part located whole References: REQ] Use Case #8 Simple part-whole relations OWL Ontologies Overview: Representing part-whole relations very common issue developing ontologies Semantic Web. OWL not provide built-in primitives part-whole relations subclass relation), sufficient expressive power capture most, not common cases. study part-whole relations entire field note intended only deal straightforward cases defining classes involving part-whole relations. Several extensions whole neededfor part-whole are discussed study, namely, needs qualified cardinality restriction, reflexivity, propagation parts whole Features: Qualified cardinality restriction, Reflexivity, Property chain inclusion Example Reflexive E.g.; frontal lobe part brain hemisphere car part car Note: According definition given OBO, whole being considered as part Whole] there are controversial opinions asserting not reflexive. References: Whole] Use Case #9 Kidney Allocation Policy France Overview: Allocation France responsibility Agence de biomedicine. general rules such donor-recipient ABO blood group identity, unique registration national waiting list registration number assigned registration waiting list uniquely patient waiting list)and definition organ specific nation-wide allocation priorities. kidney recipient, minimal HLA matching forbidden antigens be specified. Pediatric recipients get priority pediatric donors. Kidneys are proposed order priority urgent patients, patients panel reactive antibodies level included specific acceptable antigen protocol HLA mismatch donor, then mismatch patients, patients low transplantation accessibility. Geographic criteria are involved: region transplant map), e.g., Ile de France, supposed take charge only patients living region. real-life application allocation system show distinguishing adults children strong implications health care: hospital, patients depend pediatric services over depend adult services; only children less years waiting transplant have priority waiting list. Features: Negative Property Assertion, Datatypes restriction, Keys Example NegativePropertyAssertion E.g.; patient not years old. References: Biomedecine][Transplant Ontology] Use Case #10 Eligibility Criteria Patient Recruitment Overview: use case based ongoing W3C task force Clinical Observations Interoperability goal enable re-use sharing clinical data created healthcare delivery Clinical Trials context. particular first application chosen demonstrate feasibility interoperability approach patient recruitment. case, sample set clinical trial protocols available list eligibility exclusion criteria). eligibility criteria are used identify eligible patients potentially form conditions SPARQL query be represented as OWL classes. also need be mapped as discussion use case above. list requirements based analysis clinical trial protocols available particular, clinical trials enrolment date clinical trial participant be days after patient been started particular therapy. motivated need N-ary datatypes inequality expressions. Features: Example N-ary Datatypes E.g.; enrolment date clinical trial participant be days after patient been started particular therapy Use Case #11 Multiple UCs datatype Overview: presents many Use cases benefit various datatype extensions Features: Datatypes restriction, Example N-ary Datatypes E.g.; datatypes restrictions intervals, N-Ary datatype inequality such as needed Use Case #10. References: Use Case #12 Protégé report experiences OWL users Overview: reported Protégé experiences development OWL support, experiences user community OWL time. overall feedback community was positive, experience suggested there were considerable gaps user requirements, expressivity OWL, users’ understanding OWL. summarize, based experiences, Protégé developers suggested number extensions future version OWL namely, Integration user-defined datatypes numeric ranges), Qualified Cardinality Restrictions, Management disjointness More flexible annotation properties least as best practices). report underlined omissions OWL language users complain about most often poor representation numeric expressions. Almost groups, developing traditional medical terminologies, sorely need be able express quantitative information. Typical examples include length age greater years, pressure range 1035mb. Such range declarations are needed classify individuals build class definitions such as Adult, therefore be supported reasoners. User base points out current OWL datatype formalism much too weak support most real world applications many potential users therefore adopt OWL. user communities anxiously await extension OWL specification represent user-defined datatypes XML Schema facets such as xsd:minInclusive."It also points out limitations related annotations metamodeling implementors perspective: value annotation properties, OWL DL, properties are declared as annotation properties are greatly limited so far have range domain constraints, be arranged sub-property hierarchies. type information about property tools control values annotation properties acquire. range constraints difficult provide user appropriate input widgets. similar sense, often helpful declare meta-classes so classes be categorized types different be pro-vided type. Currently, using features means ontology be forced OWL Full." Features: Qualified cardinality restriction, Datatypes restriction, Annotations, metamodeling Example Extra Datatypes E.g.; adults are individuals age greater years. References: Use Case #13 Web service modeling Overview: People often want use class specify value property. example originating University Karlsruhe Service] service modeling. Services are modeled as instances class. concrete service instance users wanted state input service Here example service description: rdf:type owl:Class rdf:type owl:Class s1 rdf:type s1 s1 individual class due class due hence, have relationship individual class. Hence, need kind metamodeling solve problem. way be name refer Person as class as individual denoting Person as whole Individual) Features: metamodeling Example Simple metamodeling E.g.; class individual Person be used class individual References: Service] Use Case #14 Managing vocabulary collaborative environments Overview: be useful relate schema elements other order capture pragmatic relationships example observed applications Semantic MediaWiki simple widely used OWL-based semantic content management system light-weight expressiveness) Wiki] users wish relate schema elements indicate domain-specific relationships, generally organize ontological vocabulary. Examples are statements such property is_located_in class Deprecated_Properties was replaced property has_location." class City have value property population." relating class property) are merely pragmatic descriptions, logical relationship schema-level intended. However, collaborative vocabulary creation, relevant users express such intended relationships. important aspect Semantic MediaWiki users also query semantic information, currently realized as intended punning. Semantic MediaWiki already been extended using off-the-shelf OWL reasoners, be desirable such systems be able deal use punning such simple cases; Individual) Features: metamodeling Example Simple metamodeling E.g.; property individual: make statement asserting property individual class Deprecated_properties References: Use Case #15 UML Association Class Overview: Unified Modeling Language modeling element knownas Association Class features UML Class anda UML Association construct defining class classrelationships Association). Association Class, e.g., association classes Person Company,allows modeler define relation as association reify simultaneously. isconvenient model attributes relations themselves.One way support such case be Class ObjectProperty punning ObjectProperty). Features: metamodeling Example Simple metamodeling E.g.; object property class: PersonCompany be used object property class. References: Association Class][Punning] Use Case #16 Database federation Overview: life sciences application designer been building database federation scheme. scheme involvesdesigning XML schema fields values variety databases, associated query tools query interface, write queries several variants SQL) databases have relevant information. results are presented as single integrated view. OWL Semantic Web technologies be suitable technology implementing same functionality making available using Web standards, know start. application common needs wide community users use databases easily query convivial way. profile conjunctive query answering implemented using conventional relational database systems. Features: Profiles QL) Example Profiles E.g.; OWL QL profile easily query federation databases convivial way References: Use Case Tools developers Overview: user assertion ontology; however, accidentally mistypes IRI individual. be possible detect error comparing IRI individual axiom IRIs explicitly declared be part ontology: individual IRI not been explicitly introduced as being ontology, user be given opportunity correct error. Tools developers, such as involved Protégé-OWL toolset architecture have often expressed problems raised e.g.; APIs API]due lack declarations. first problem OWL not allow explicit declarations—assertions certain class, property, individual ontology. aspect OWL standard was often misinterpreted, caused design errors OWL APIs" Problem]. Features: Declaration Example Declaration E.g.; person declared be class ontology. References: Problem] Use Case #18 Virtual Solar Terrestrial Observatory Space] Overview: Numerous single discipline multi-discipline virtual observatories are beginning use semantic technologies provide data access integration. virtual observatory suite software applications set computers users uniformly find, access, use resources software, document, image products services using collection distributed product repositories service providers. VO service services multiple repositories. http://lwsde.gsfc.nasa.gov/VO_Framework_7_Jan_05.doc. Virtual Observatories are focusing quite heavily provenance encoding data ingest time Virtual Solar Terrestrial Observatory National Science Foundation National Center Atmospheric Research supported effort researchers find solar solar-terrestrial data. ontology-enhanced interface semantically-enhanced web services help access number online repositories scientific data. background OWL ontology term descriptions science terms including instruments, observatories, parameters, etc. Users essentially need specify description data wish retrieve either specific instrument class description class, date range data taken, parameters. order specify relevant science terms, scientists need be able represent numerical ranges comparisons going numeric support OWL application also needs expand include spatial descriptions. use representational power provided spatial/geographic containment. Requirements: Qualified Cardinality, Datatype restriction, Example Datatype restriction E.g.; range atmosphere above below References: Use Case #19 Semantic Provenance Capture Space] Overview: effort provide better search capabilities over meta information addition scientific data, SPCDIS effort providing infrastructure capture declarative descriptions scientific provenance information data ingest time. initial domain effort solar coronal physics. effort other things) extended annotations as as datatype restriction. Features: Datatype restriction, Extended Annotations Example Extended annotation attach annotations E.g.; comments axioms, such as SubClass axiom, express instance elements subclass are data generated log parser. References: Use Case #20 Biochemical self-interaction domain] Overview: Biochemistry, biomolecules chemical modify such way biologically important consequences. Protein kinases are enzymes capable adding phosphate groups certain amino acids found target proteins. kinases, known as Auto-Phosphorylating Kinases, add phosphate groups certain target amino acids are part Ribozymes are catalytically active RNA molecules natural types are known cleave own RNA sequences. Such cleavage result significant changes viral replication, gene expression, possibly generation different protein transcripts. Such catalytically active, self-cleaving RNA make up subclass ribozymes called Self-Cleaving Ribozymes. Such biochemical self-interaction be captured asserting local reflexivity properties. Features: Local Reflexivity Example Local reflexivity E.g.; Auto-Phosphorylating Kinase kinase References: Use Cases Bibliography Req] Web ontology language requirements w.r.t expressiveness taxonomy axioms medicine Proc. ISWC Theory] Creation Usage Theory" Long Bone Fractures: Experience ReportHoward Goldberg, Vipul Kashyap Kent Spackman, Proc. KR-MED Rules] Ontology enriched rules identifying brain anatomical structures RIF Washington, Imaging] Hybrid System Using Ontology Enriched Rules Semantic Annotation Brain MRI Images Proc. RR Brain Anatomy Case Study Proc. Protege Foundational Model Anatomy Foundational Model Anatomy B Foundational Model Anatomy C. Describing chemical functional groups OWL-DL classification chemical compounds Natalia Villanueva-Rosales Michel Dumontier. OWL: Experiences Directions Innsbruck, Austria. Modelling Life Sciences knowledge OWL1.1 DC) exploratory study automotive company. OBO Foundry: coordinated evolution ontologies support biomedical data integration. Barry Smith et al. Relations Biomedical Ontologies. OBO OWL: Go OWL1.1! OBO OWL: Leveraging Semantic Web Technologies Life Sciences Proc. ISWC Experiences using OWL Ordnance Survey. REQ] examination OWL requirements large health care terminology. Biomedecine] Changing Kidney Allocation Policy France: Value Simulation. Ontology] Construction dialysis transplantation ontology. Web] little semantic web long way biology Wolstencroft, K., Brass, A., Horrocks, I., Lord, P., Sattler, U., Stevens, R., Turi, D. Proceedings International Semantic Web Conference pp. Springer, Berlin Heidelberg New York Whole] Simple part-whole relations OWL Ontologies Alan Rector, Chris Welty. W3C Editor's Draft Aug Supporting Early Adoption OWL Protege-OWL FaCT++. Matthew Horridge Dmitry Tsarkov Timothy Redmond. OWL: Experiences Directions Athens, Georgia. API] Igniting OWL Touch Paper: OWL API Matthew Horridge Sean Bechhofer Olaf Noppens OWL: Experiences Directions Innsbruck, Austria. OWL] Protégé OWL Experience Holger Knublauch, Matthew Horridge, Mark Musen, Alan Rector, Robert Stevens, Nick Drummond, Phil Lord, Natalya F. Noy2, Julian Seidenberg, Hai Wang. OWL: Experiences Directions Galway, Ireland, N-ary Data predicate use case. Service] Preference-based Selection Highly Configurable Web Services Steffen Lamparter, Anupriya Ankolekar, Stephan Grimm, Rudi Studer: WWW-07, Banff, Canada, Reusing Ontological Background Knowledge Semantic Wikis Denny Vrandecic, Markus Krötzsch, Proceedings 1st Workshop Semantic Wikis. Budva, Montenegro, June Association Class] Association. Punning Use Cases. documents? Virtual Solar-Terrestrial Observatory: Deployed Semantic Web Application Case Study Scientific Research McGuinness, D.L., Fox, P., Cinquini, L., West, P., Garcia, J., Benedict, J.L., Middleton, D.. VSTO2. VMO. Semantic Provenance Capture Data Ingest Systems Springer. pnas. W3C Working Draft August Appendix: Change Log Changes Recommendation section changes document since Recommendation October, publication XML Schema Definition Language Part Datatypes Recommendation April elements OWL are based XSD are now considered required, note detailing optional dependency XSD Candidate Recommendation April, been removed Document" section. Minor typographical errors were corrected as detailed OWL Errata page. Changes Proposed Recommendation section changes document since Proposed Recommendation September, minor editorial changes were made. Changes Last Call section changes document since Candidate Recommendation June, note was added pointing out property being asymmetric much stronger notion being non-symmetric. note origin profile names was added. Several minor editorial changes were made. Acknowledgments starting point development OWL was OWL1.1 member submission, result user developer feedback, particular information gathered OWL Experiences Directions Workshop series. working group also considered postponed issues WebOnt Working Group. document been produced OWL Working Group below), contents reflect extensive discussions Working Group as whole.The editors extend special thanks toElisa Kendall Software),Peter F. Patel-Schneider Labs Research, Alcatel-Lucent) andAlan Ruttenberg Commons)for thorough reviews. regular attendees meetings OWL Working Group time publication document were:Jie Bao Calvanese University Bozen-Bolzano),Bernardo Cuenca Grau University Computing Laboratory),Martin Dzbor University),Achille Fokoue Corporation),Christine Golbreich de Versailles St-Quentin LIRMM),Sandro Hawke Herman Hoekstra Amsterdam),Ian Horrocks University Computing Laboratory),Elisa Kendall Software),Markus Krötzsch Lutz Bremen),Deborah L. McGuinness Motik University Computing Laboratory),Jeff Pan Aberdeen),Bijan Parsia Manchester),Peter F. Patel-Schneider Labs Research, Alcatel-Lucent),Sebastian Rudolph Ruttenberg Commons),Uli Sattler Manchester),Michael Schneider Smith Parsia),Evan Wallace Wu Corporation), andAntoine Zimmermann Galway).We also thank past members working group:Jeremy Carroll,Jim Hendler, andVipul Kashyap. 