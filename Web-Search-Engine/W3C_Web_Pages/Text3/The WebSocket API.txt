WebSocket API WebSocket API W3C Candidate Recommendation September Version: Latest Published Version: Latest Editor's Draft: Previous Versions: Editor: Ian Hickson, Google, Inc. Copyright W3CÂ® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. bulk text specification also available WHATWG Web Applications specification, license permits reuse specification text. Abstract specification API Web pages use WebSocket protocol IETF) communication remote host. Status document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index wish make comments regarding document manner tracked W3C, submit using public bug database. do not have account then enter feedback using form: Feedback Comments enter feedback, carefully indicating title section are submitting feedback, quoting text wrong today appropriate. suggesting new feature, really important problem trying solve more important solution, fact. don't use section numbers as tend change rapidly make feedback harder understand. IP address user agent be publicly recorded spam prevention purposes.) also e-mail feedback archives), archives). feedback Notifications changes specification are sent along notifications changes related specifications using following mechanisms: E-mail notifications changes Commit-Watchers mailing list source diffs): Browsable version-control record changes: CVSWeb interface side-by-side diffs: Annotated summary unified diffs: Raw Subversion interface: svn checkout W3C Web Applications Working Group W3C working group responsible specification's progress along W3C Recommendation track. specification September Candidate Recommendation. Comments bugs submitted August Last Call Working Draft are tracked comment tracking document. Publication as Candidate Recommendation not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document as other work progress. specification being developed conjunction RFC wire protocol, WebSocket Protocol, available following location: RFC WebSocket Protocol: document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Candidate Recommendation Exit Criteria exit Candidate Recommendation stage, following criteriamust have been met: There be least interoperable implementations passing approved test cases test suite specification. implementation be available download), shipping not private), not experimental intended wide audience). working group decide test suite sufficient quality test interoperability produce implementation report together test suite). minimum month CR stage have elapsed not after October ensure enough time given remaining major errors be caught. CR period be extended implementations are slow appear. Table Contents Introduction Conformance requirements Dependencies Terminology WebSocket interface Feedback protocol Ping Pong frames Parsing WebSocket URLs Event definitions Garbage collection References Acknowledgements Introduction section non-normative. enable Web applications maintain bidirectional communications server-side processes, specification WebSocket interface. interface not allow raw access underlying network. example, interface not be used implement IRC client proxying messages custom server. Conformance requirements diagrams, examples, notes specification are non-normative, as are sections explicitly marked non-normative. Everything else specification normative. key words NOT", NOT", normative parts document are be interpreted as described RFC2119. readability, words do not appear uppercase letters specification. Requirements phrased imperative as part algorithms as leading space characters" false abort steps") are be interpreted meaning key word etc) used introducing algorithm. conformance requirements are phrased as requirements attributes, methods objects. Such requirements are be interpreted as requirements user agents. Conformance requirements phrased as algorithms specific steps be implemented manner, so long as end result equivalent. particular, algorithms defined specification are intended be easy follow, not intended be performant.) only conformance class defined specification user agents. User agents impose implementation-specific limits otherwise unconstrained inputs, e.g. prevent denial service attacks, guard running out memory, work around platform-specific limitations. support feature disabled as emergency measure mitigate security problem, aid development, performance reasons), user agents act as had support feature whatsoever, as feature was not mentioned specification. example, particular feature accessed attribute Web IDL interface, attribute be omitted objects implement interface leaving attribute object making return null throw exception insufficient. Dependencies specification several other underlying specifications. HTML Many fundamental concepts HTML are used specification. WebIDL IDL blocks specification use semantics WebIDL specification. Terminology construction Foo object", Foo actually interface, sometimes used instead more accurate object implementing interface Foo". term DOM used refer API set made available scripts Web applications, not necessarily imply existence actual Document object other Node objects as defined DOM Core specifications. IDL attribute said be getting value being retrieved author script), said be setting new value assigned WebSocket interface url, optional DOMString[]) protocols)]interface WebSocket EventTarget readonly attribute DOMString url; ready state const unsigned short CONNECTING const unsigned short OPEN const unsigned short CLOSING const unsigned short CLOSED readonly attribute unsigned short readyState; readonly attribute unsigned long bufferedAmount; networking attribute EventHandler onopen; attribute EventHandler onerror; attribute EventHandler onclose; readonly attribute DOMString extensions; readonly attribute DOMString protocol; void close([Clamp] optional unsigned short code, optional DOMString reason); messaging attribute EventHandler onmessage; attribute DOMString binaryType; void send(DOMString data); void send(Blob data); void send(ArrayBuffer data); void send(ArrayBufferView data);}; WebSocket(url, protocols) constructor arguments. first argument, url, URL connect. second, protocols, present, either string array strings. string, equivalent array consisting just string; omitted, equivalent empty array. string array subprotocol name. connection only be established server reports selected subprotocols. subprotocol names be strings match requirements elements comprise value Sec-WebSocket-Protocol header fields as defined WebSocket protocol specification. WebSocket() constructor invoked, UA run steps: Parse WebSocket URL's components url argument, obtain host, port, resource name, secure. throw SyntaxError exception abort steps. secure false origin entry script scheme component secure protocol, e.g. HTTPS, then throw SecurityError exception. port port user agent configured block access, then throw SecurityError exception. agents typically block access well-known ports SMTP.) Access ports not be blocked, including unlikely cases secure false port secure true port protocols absent, let protocols be empty array. Otherwise, protocols present string, let protocols instead be array consisting just string. values protocols occur more once otherwise fail match requirements elements comprise value Sec-WebSocket-Protocol header fields as defined WebSocket protocol specification, then throw SyntaxError exception abort steps. Let origin be ASCII serialization origin entry script, converted ASCII lowercase. Return new WebSocket object, continue steps background blocking scripts). Establish WebSocket connection given set port, resource name, secure), along protocols list, empty list extensions, origin. headers send appropriate cookies be Cookie header value cookie-string computed user's cookie store URL url; purposes not API. user agent server's response WebSocket connection" algorithm, status code received server not redirect), user agent fail WebSocket connection. Following HTTP procedures here introduce serious security problems Web browser context. example, consider host WebSocket server path open HTTP redirector Suddenly, script be given particular WebSocket URL be tricked communicating potentially sharing secrets host Internet, even script checks URL hostname. establish WebSocket connection algorithm fail WebSocket connection algorithm, then close WebSocket connection algorithm, then WebSocket connection closed, fires close event as described below. constructor be visible script's global object either Window object object implementing WorkerUtils interface. url attribute return result resolving URL was passed constructor. matter resolved relative since already know absolute URL.) readyState attribute state connection. have following values: CONNECTING value connection not yet been established. OPEN value WebSocket connection established communication possible. CLOSING value connection going closing handshake, close() method been invoked. CLOSED value connection been closed not be opened. object created readyState be set CONNECTING extensions attribute initially return empty string. WebSocket connection established, value change, as defined below. extensions attribute returns extensions selected server, only ever be empty string.) protocol attribute initially return empty string. WebSocket connection established, value change, as defined below. protocol attribute returns subprotocol selected server, be used conjunction array form constructor's second argument perform subprotocol negotiation. close() method run following steps: method's first argument present not integer equal range throw InvalidAccessError exception abort steps. method's second argument present, then run substeps: Let raw reason be method's second argument. Let Unicode reason be result converting raw reason sequence Unicode characters. Let reason be result encoding Unicode reason as UTF-8. reason longer bytes, then throw SyntaxError exception abort steps. Run first matching steps following list: readyState attribute CLOSING CLOSED state Do nothing. connection already closing already closed. not already, close event eventually fire as described below. WebSocket connection not yet established Fail WebSocket connection set readyState attribute's value CLOSING fail WebSocket connection algorithm close WebSocket connection algorithm, then WebSocket connection closed, fires close event as described below. WebSocket closing handshake not yet been started Start WebSocket closing handshake set readyState attribute's value CLOSING first argument present, then status code use WebSocket Close message be integer given first argument. second argument also present, then reason be provided Close message after status code. start WebSocket closing handshake algorithm eventually close WebSocket connection algorithm, then WebSocket connection closed, fires close event as described below. Otherwise Set readyState attribute's value CLOSING WebSocket closing handshake started, eventually invoke close WebSocket connection algorithm, establish WebSocket connection closed, thus close event fire, as described below. bufferedAmount attribute return number bytes application data text binary data) have been queued using send() as last time event loop started executing task, had not yet been transmitted network. thus text sent execution current task, regardless user agent able transmit text asynchronously script execution.) not include framing overhead incurred protocol, buffering done operating system network hardware. connection closed, attribute's value only increase call send() method number not reset once connection simple example, bufferedAmount attribute used ensure updates are sent either rate update 50ms, network handle rate, rate network handle, too fast. var socket new WebSocket('ws://game.example.com:12010/updates');socket.onopen function setInterval(function() socket.send(getUpdateData()); bufferedAmount attribute also be used saturate network sending data higher rate network handle, though more careful monitoring value attribute over time. WebSocket object created, binaryType IDL attribute be set string getting, return last value was set setting, new value either string string then set IDL attribute new value. Otherwise, throw SyntaxError exception. attribute authors control binary data exposed scripts. setting attribute binary data returned Blob form; setting returned ArrayBuffer form. User agents use as hint handle incoming binary data: attribute set safe spool disk, set likely more efficient keep data memory. Naturally, user agents are encouraged use more subtle heuristics decide keep incoming data memory not, e.g. based big data common script change attribute last minute. latter aspect important particular because quite possible attribute be changed after user agent received data before user agent fired event send(data) method transmits data using connection. readyState attribute CONNECTING, throw InvalidStateError exception. Otherwise, user agent run appropriate set steps following list: argument string Let data be result converting data argument sequence Unicode characters. WebSocket connection established WebSocket closing handshake not yet started, then user agent send WebSocket Message comprised data using text frame opcode; data be sent, e.g. because need be buffered buffer full, user agent close WebSocket connection prejudice. invocation method string argument not throw exception increase bufferedAmount attribute number bytes needed express argument as UTF-8. argument Blob object WebSocket connection established, WebSocket closing handshake not yet started, then user agent send WebSocket Message comprised data using binary frame opcode; data be sent, e.g. because need be buffered buffer full, user agent close WebSocket connection prejudice. data be sent raw data represented Blob object. invocation method Blob argument not throw exception increase bufferedAmount attribute size Blob object's raw data, bytes. argument ArrayBuffer object WebSocket connection established, WebSocket closing handshake not yet started, then user agent send WebSocket Message comprised data using binary frame opcode; data be sent, e.g. because need be buffered buffer full, user agent close WebSocket connection prejudice. data be sent data stored buffer described ArrayBuffer object. invocation method ArrayBuffer argument not throw exception increase bufferedAmount attribute length ArrayBuffer bytes. argument ArrayBufferView object WebSocket connection established, WebSocket closing handshake not yet started, then user agent send WebSocket Message comprised data using binary frame opcode; data be sent, e.g. because need be buffered buffer full, user agent close WebSocket connection prejudice. data be sent data stored section buffer described ArrayBuffer object ArrayBufferView object references. invocation method ArrayBufferView argument not throw exception increase bufferedAmount attribute length ArrayBufferView bytes. following are event handlers corresponding event handler event types) be supported, as IDL attributes, objects implementing WebSocket interface: Event handler Event handler event type onopen open onmessage message onerror error onclose close Feedback protocol WebSocket connection established, user agent queue task run steps: Change readyState attribute's value OPEN Change extensions attribute's value extensions use, not null value. Change protocol attribute's value subprotocol use, not null value. Act as user agent had received set-cookie-string consisting cookies set server's opening handshake, URL url given WebSocket() constructor. Fire simple event named open WebSocket object. WebSocket message been received type type data data, user agent queue task follow steps: readyState attribute's value not OPEN then abort steps. Let event be event uses MessageEvent interface, event type message, not bubble, not cancelable, default action. Initialize event's origin attribute Unicode serialization origin URL was passed WebSocket object's constructor. type data Text, then initialize event's data attribute data. type data Binary, binaryType set then initialize event's data attribute new Blob object data as raw data. type data Binary, binaryType set then initialize event's data attribute new read-only ArrayBuffer object contents are data. Dispatch event WebSocket object. User agents are encouraged check perform above steps efficiently before run task, picking tasks other task queues prepare buffers not. example, binaryType attribute was set data arrived, user agent spooled data disk, just before running above task particular message script switched binaryType user agent want page data back RAM before running task so as avoid stalling main thread created ArrayBuffer object. Here example define handler message event case text frames: function turnLampOn(); else turnLampOff(); protocol here trivial server just sending messages. WebSocket closing handshake started, user agent queue task change readyState attribute's value CLOSING close() method was called, readyState attribute's value already be set CLOSING task runs.) WebSocket connection closed, possibly cleanly, user agent queue task run following substeps: Change readyState attribute's value CLOSED user agent was required fail WebSocket connection WebSocket connection closed prejudice, fire simple event named error WebSocket object. Create event uses CloseEvent interface, event type close, not bubble, not cancelable, default action, wasClean attribute initialized true connection closed cleanly false otherwise, code attribute initialized WebSocket connection close code, reason attribute initialized WebSocket connection close reason decoded as UTF-8, error handling, dispatch event WebSocket object. User agents not convey failure information scripts way allow script distinguish following situations: server host name not be resolved. server packets not successfully be routed. server refused connection specified port. server failed correctly perform TLS handshake server certificate be verified). server did not complete opening handshake because was not WebSocket server). WebSocket server sent correct opening handshake, specified options caused client drop connection server specified subprotocol client did not offer). WebSocket server abruptly closed connection after successfully completing opening handshake. cases, WebSocket connection close code be as required WebSocket Protocol specification. Allowing script distinguish cases allow script probe user's local network preparation attack. particular, means code not used user agent server erroneously uses close frame, course). task source tasks queued section WebSocket task source. Ping Pong frames WebSocket protocol specification Ping Pong frames be used keep-alive, heart-beats, network status probing, latency instrumentation, so forth. are not currently exposed API. User agents send ping unsolicited pong frames as desired, example attempt maintain local network NAT mappings, detect failed connections, display latency metrics user. User agents not use pings unsolicited pongs aid server; assumed servers solicit pongs appropriate server's needs. Parsing WebSocket URLs steps parse WebSocket URL's components string url are as steps return either host, port, resource name, secure flag, fail. url string not absolute URL, then fail algorithm. Resolve url string, URL character encoding set UTF-8. matter resolved relative since already know absolute URL point. url not have component value, converted ASCII lowercase, either then fail algorithm. url component, then fail algorithm. component url set secure false; otherwise, component set secure true. Let host be value component url, converted ASCII lowercase. url component, then let port be component's value; otherwise, there explicit port. there explicit port, then: secure false, let port be otherwise let port be Let resource name be value component be empty) url. resource name empty string, set single character U+002F SOLIDUS url component, then append single U+003F QUESTION MARK character resource name, followed value component. Return host, port, resource name, secure. Event definitions type, optional CloseEventInit eventInitDict)]interface CloseEvent Event readonly attribute boolean wasClean; readonly attribute unsigned short code; readonly attribute DOMString reason;};dictionary CloseEventInit EventInit boolean wasClean; unsigned short code; DOMString reason;}; wasClean attribute return value was initialized object created, attribute be initialized false. connection closed cleanly not. code attribute return value was initialized object created, attribute be initialized WebSocket connection close code provided server. reason attribute return value was initialized object created, attribute be initialized empty string. WebSocket connection close reason provided server. Garbage collection WebSocket object readyState attribute's value was set CONNECTING as last time event loop started executing task not be garbage collected there are event listeners registered open events, message events, error events, close events. WebSocket object readyState attribute's value was set OPEN as last time event loop started executing task not be garbage collected there are event listeners registered message events, error, close events. WebSocket object readyState attribute's value was set CLOSING as last time event loop started executing task not be garbage collected there are event listeners registered error close events. WebSocket object established connection data queued be transmitted network not be garbage collected. WebSocket object garbage collected connection still open, user agent start WebSocket closing handshake, status code Close message. user agent make disappear WebSocket object Document object away), user agent follow first appropriate set steps following list: WebSocket connection not yet established Fail WebSocket connection. WebSocket closing handshake not yet been started Start WebSocket closing handshake, status code use WebSocket Close message being Otherwise Do nothing. References references are normative marked HTTP State Management Mechanism, A. Barth. IETF. DOM4, A. van Kesteren. W3C. File API, A. Ranganathan. W3C. HTML5, I. Hickson. W3C. Key words use RFCs Indicate Requirement Levels, S. Bradner. IETF. UTF-8, transformation format ISO F. Yergeau. IETF. Typed Array Specification, D. Herman, K. Russell. Khronos. Unicode Standard. Unicode Consortium. Web IDL, C. McCormack. W3C. WebSocket protocol, I. Fette, A. Melnikov. IETF. Acknowledgements full list acknowledgements, HTML specification. 