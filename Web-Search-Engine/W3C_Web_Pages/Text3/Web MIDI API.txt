Web MIDI API Web MIDI API W3C Working Draft November version: Latest published version: Previous version: Latest editor's draft: Editors: Jussi Kalliokoski Chris Wilson, Google Versioning Repository: Issues tracker: Test suite: Working Group: Audio Working Group Comments: Copyright W3CÂ® ERCIM, Keio, Beihang), Rights Reserved. W3C liability, trademark document use rules apply. Abstract user agents have music devices, such as synthesizers, keyboard other controllers, drum machines connected host computer device. widely adopted Musical Instrument Digital Interface protocol electronic musical instruments, controllers computers communicate synchronize other. MIDI not transmit audio signals: instead, event messages about musical notes, controller signals parameters such as volume, vibrato panning, cues clock signals set tempo, system-specific MIDI communications remotely store synthesizer-specific patch data). same protocol become standard non-musical uses, such as show control, lighting special effects control. specification API supporting MIDI protocol, enabling web applications enumerate select MIDI input output devices client system send receive MIDI messages. intended enable non-music MIDI applications as as music ones, providing low-level access MIDI devices available users' systems. Web MIDI API not intended describe music controller inputs semantically; designed expose mechanics MIDI input output practical aspects sending receiving MIDI messages, identifying actions mean semantically terms vibrato 20Hz" G#7 chord", other terms changing controller value sending set note-on messages happen represent G#7 chord). users, become synonymous Standard MIDI Files General MIDI. not intent API; use case simply playing back file not purview specification be considered different format be supported HTML5 element, example). Web MIDI API intended enable direct access devices respond MIDI external synthesizers lighting systems, example, even software synthesizers are built many common operating systems. Web MIDI API also explicitly designed enable new class applications web respond MIDI controller inputs using external hardware controllers physical buttons, knobs sliders as musical controllers keyboard, guitar wind instrument controllers) control web applications. Web MIDI API also expected be used conjunction other APIs elements web platform, notably Web Audio API. API also intended be familiar users MIDI APIs other systems, such as Apple's CoreMIDI Microsoft's Windows MIDI API. Status Document section status document time publication. Other documents supersede document. list current W3C publications latest revision technical report be found W3C technical reports index document was published Audio Working Group as Working Draft. wish make comments regarding document, send archives). comments are Publication as Working Draft not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document as other work progress. document was produced group operating February W3C Patent Policy. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents Introduction Conformance Terminology Obtaining Access MIDI Devices requestMIDIAccess() Methods MIDIOptions dictionary Dictionary MIDIOptions Members MIDIInputMap Interface Attributes Methods MIDIOutputMap Interface Attributes Methods MIDISuccessCallback Callback MIDISuccessCallback Parameters MIDIErrorCallback Callback MIDIErrorCallback Parameters MIDIAccess Interface Attributes MIDIPort Interface Attributes MIDIInput Interface Attributes MIDIOutput Interface Methods MIDIMessageEvent Interface Attributes MIDIMessageEventInit Interface Dictionary MIDIMessageEventInit Members MIDIConnectionEvent Interface Attributes MIDIConnectionEventInit Interface Dictionary MIDIConnectionEventInit Members Examples Web MIDI API Usage JavaScript Getting Access MIDI System Requesting Access MIDI System System Exclusive Support Listing Inputs Outputs Handling MIDI Input Sending MIDI Messages Output Device Simple Loopback Simple Monophonic Sine Wave MIDI Synthesizer Security Privacy Considerations MIDI A. References A.1 Normative references Introduction section non-normative. Web MIDI API specification means web developers enumerate, manipulate access MIDI devices example provide hardware MIDI ports other devices plugged USB devices support USB-MIDI specification. Having Web API MIDI web applications use existing software hardware synthesizers, hardware music controllers light systems other mechanical apparatus controlled MIDI. API been defined wide variety use cases mind. approaches taken API are similar taken Apple's CoreMIDI API Microsoft's Windows MIDI API; API designed represent low-level software protocol MIDI, order enable developers build powerful MIDI software top. API developer enumerate input output send receive MIDI messages, aforementioned APIs) not attempt semantically define interpret MIDI messages necessary robustly support current devices. Web MIDI API not intended directly implement high-level concepts such as sequencing; not directly support Standard MIDI Files, example, Standard MIDI File player be built top Web MIDI API. also not intended semantically capture patches controller assignments, as General MIDI such interpretation outside scope Web MIDI API again, General MIDI easily be utilized Web MIDI API). Conformance as sections marked as non-normative, authoring guidelines, diagrams, examples, notes specification are non-normative. Everything else specification normative. key words NOT, REQUIRED, NOT, RECOMMENDED, MAY, OPTIONAL specification are be interpreted as described specification conformance criteria apply single product: user agent implements Implementations use ECMAScript implement APIs defined specification implement manner consistent ECMAScript Bindings defined Web IDL specification as specification uses specification terminology. Terminology concepts queue task fires simple event are defined terms event handlers event handler event types corresponding EventHandler interface are defined Uint8Array interface defined term octet defined Web Audio API associated concepts are defined Event interface defined DOMError interface defined DOMHighResTimeStamp interface defined terms MIDI, MIDI device, MIDI input port, MIDI output port, MIDI interface, MIDI message, MIDI System Real-Time message system exclusive are defined Promise interface currently defined WHATWG DOM specification. Obtaining Access MIDI Devices requestMIDIAccess() partial interface Navigator Promise requestMIDIAccess MIDIOptions options);}; Methods requestMIDIAccess invoked, returns Promise object representing request access MIDI devices user's system. Requesting MIDI access prompt user access MIDI devices, particularly system exclusive access requested. scenarios, permission have already been implicitly explicitly granted, case prompt not appear. user express permission call otherwise approved, vended Promise's resolveCallback invoked, as MIDISuccessCallback MIDIAccess object MIDIOptions object as arguments. underlying system choose allow user select specific MIDI expose API pick choose individual basis), not required. system also choose prompt not) based system exclusive support requested, as system exclusive greater privacy security implications. user declines call denied other reason, Promise's rejectCallback invoked as MIDIErrorCallback. requestMIDIAccess method called, user agent run algorithm request MIDI Access: Let promise be new Promise object resolver be associated resolver. Return promise run following steps asynchronously. Optionally, e.g. based previously-established user preference, security reasons, due platform limitations, jump step labeled failure below. Optionally, e.g. based previously-established user preference, jump step labeled success below. Prompt user user-agent-specific manner permission provide entry script's origin MIDIAccess object representing control over user's MIDI devices. prompt be contingent system exclusive support was requested, allow user enable disable access. permission denied, jump step labeled failure below. user never algorithm never progress step. permission granted, continue following steps. success: Let access be new MIDIAccess object. possible call requestMIDIAccess() multiple times; prompt user multiple times, so not be best practice, same instance MIDIAccess not be returned time.) Call resolver's accept(value) method access as value argument. Terminate steps. failure: Let error be new DOMError. be type user security settings denied application creating MIDIAccess instance requested options, underlying systems raise errors, otherwise be type Call resolver's reject(value) method error as value argument. Parameter Type Nullable Optional Description options MIDIOptions Return type: Promise MIDIOptions dictionary dictionary optional settings be provided requestMIDIAccess request. dictionary MIDIOptions boolean sysex;}; Dictionary MIDIOptions Members sysex type boolean member system ability send receive system exclusive messages requested allowed given MIDIAccess object. option passed requestMIDIAccess, member set true, system exclusive support denied policy user action), access request fail error. support not requested allowed), system throw exceptions user tries send system exclusive messages, silently mask out system exclusive messages received port. options parameter passed resolveCallback, member system exclusive allowed MIDIAccess. MIDIInputMap Interface interface attribute readonly int size; function keys function DOMString)); function entries function Array)); function values function MIDIInput)); MIDIInput get key); boolean key);}; Attributes size type readonly int, number available MIDI input ports current time. Methods entries iterator map entries; passed arrays contain MIDIKeyType, MIDIInput Parameter Type Nullable Optional Description Array) void function Return type: function get Getter particular input Parameter Type Nullable Optional Description key DOMString Return type: MIDIInput Returns true keyed port currently available. Parameter Type Nullable Optional Description key DOMString Return type: boolean keys iterator keys Parameter Type Nullable Optional Description DOMString) void function Return type: function values Iterator values Parameter Type Nullable Optional Description MIDIInput) void function Return type: function type used represent currently available MIDI input ports as MapClass-like interface. tell many entries there are: var numberOfMIDIInputs inputs.size; add ports box function( port var opt document.createElement("option"); port.name; document.getElementById("inputportselector").add(opt); express inputs) var opt document.createElement("option"); input.name; document.getElementById("inputportselector").add(opt); MIDIOutputMap Interface interface attribute readonly int size; function keys function DOMString)); function entries function Array)); function values function MIDIOutput)); MIDIOutput get key); boolean key);}; Attributes size type readonly int, number available MIDI output ports current time. Methods entries iterator map entries; passed arrays contain MIDIKeyType, MIDIOutput Parameter Type Nullable Optional Description Array) void function Return type: function get Getter particular input Parameter Type Nullable Optional Description key DOMString Return type: MIDIOutput Returns true keyed port currently available. Parameter Type Nullable Optional Description key DOMString Return type: boolean keys iterator keys Parameter Type Nullable Optional Description DOMString) void function Return type: function values Iterator values Parameter Type Nullable Optional Description MIDIOutput) void function Return type: function type used represent currently available MIDI output ports as MapClass-like interface. tell many entries there are: var numberOfMIDIOutputs inputs.size; add ports box function( port var opt document.createElement("option"); port.name; document.getElementById("outputportselector").add(opt); express outputs) var opt document.createElement("option"); input.name; document.getElementById("inputportselector").add(opt); MIDISuccessCallback callback MIDISuccessCallback void access, MIDIOptions options); Callback MIDISuccessCallback Parameters access type MIDIAccess MIDIAccess object created provide script access user's MIDI devices. object used enumerate obtain access individual MIDI devices. Note: term device" specification MIDI interface available host system; example, hardware MIDI adapter connected host system, be enumerated as single device, even several MIDI-supporting devices as synthesizers drum machines) are plugged hardware MIDI ports adapter. options type MIDIOptions parameter options enabled MIDIAccess object. MIDIErrorCallback callback MIDIErrorCallback void error); Callback MIDIErrorCallback Parameters error type DOMError DOMError object representing reason creating getting MIDIAccess failed. MIDIAccess Interface interface methods list MIDI input output devices, obtain access individual device. interface MIDIAccess EventTarget readonly attribute MIDIInputMap inputs; readonly attribute MIDIOutputMap outputs; attribute EventHandler onconnect; attribute EventHandler ondisconnect; readonly attribute boolean sysexEnabled;}; Attributes inputs type MIDIInputMap, readonly MIDI input ports available system. onconnect type EventHandler, handler called new port connected. event handler, type MIDIConnectionEvent, be supported objects implementing MIDIAccess interface. previously unavailable MIDI port available use, user agent run following steps: Let port be MIDIPort corresponding newly-available port. Let event be newly constructed MIDIConnectionEvent, port attribute set port. Fire event named connectat MIDIAccess, using event as event object. ondisconnect type EventHandler, handler called previously-available port disconnected. event handler, type MIDIConnectionEvent, be supported objects implementing MIDIAccess interface. previously available MIDI port unavailable use, user agent run following steps: Let port be MIDIPort corresponding newly-available port. Let event be newly constructed MIDIConnectionEvent, port attribute set port. Fire event named disconnectat MIDIAccess, using event as event object. outputs type MIDIOutputMap, readonly MIDI output ports available system. sysexEnabled type boolean, readonly attribute user system exclusive support enabled MIDIAccess. MIDIPort Interface interface MIDI input output port. enum MIDIPortType Enumeration description input MIDIPort input port, type member be value. output MIDIPort output port, type member be value. interface MIDIPort EventTarget readonly attribute DOMString id; readonly attribute DOMString? manufacturer; readonly attribute DOMString? name; readonly attribute MIDIPortType type; readonly attribute DOMString? version; attribute EventHandler ondisconnect;}; Attributes id type DOMString, readonly unique ID port. be used developers remember ports user chosen application. User Agent ensure id unique only port. User Agent ensure id maintained instances application e.g., system rebooted device removed system. Applications want cache ids locally re-create MIDI setup. systems not support completely unique persistent identifiers; such cases, be more challenging maintain identifiers interface added removed system. throw off index requested port.) expected system do best match port instances MIDI API: example, storing port interface manufacturer, name index id, attempting find ports name consider as match. Applications use comparison id MIDIPorts test equality. manufacturer type DOMString, readonly nullable manufacturer port. name type DOMString, readonly nullable system name port. ondisconnect type EventHandler, handler called previously-available port disconnected. event handler, type disconnect, be supported objects implementing MIDIPort interface. type type MIDIPortType, readonly descriptor property distinguish port input output port. MIDIOutput, be MIDIInput, be version type DOMString, readonly nullable version port. MIDI port corresponding MIDIPort unavailable use, user agent run following steps: Let port be MIDIPort. Let event be newly constructed MIDIConnectionEvent, port attribute set port. Fire event named disconnect port, using event as event object. MIDIInput Interface interface MIDIInput MIDIPort attribute EventHandler onmidimessage;}; Attributes onmidimessage type EventHandler, event handler, type MIDIMessage, be supported objects implementing MIDIInput interface. MIDI port corresponding MIDIInput finishes receiving more MIDI messages, user agent run following steps: Let port be MIDIInput. MIDIAccess did not enable system exclusive access, message system exclusive message, abort process. Let event be newly constructed MIDIMessageEvent, timestamp attribute set time message was received system, data attribute set Uint8Array MIDI data bytes representing single MIDI message. Fire event named midimessage port, using event as event object. specifically noted MIDI System Real-Time Messages actually occur middle system exclusive messages input stream; case, System Real-Time messages be dispatched as occur, system exclusive message be buffered complete then dispatched). MIDIOutput Interface interface MIDIOutput MIDIPort void send data, optional double timestamp);}; Methods send Enqueues message be sent corresponding MIDI port. underlying implementation necessary) coerce member sequence unsigned integer. use sequence rather Uint8Array developers use convenience output.send( 0x90, 0x45, 0x7f rather having create Uint8Array, e.g. output.send( new Uint8Array( 0x90, 0x45, 0x7f still enabling use Uint8Arrays efficiency large MIDI data scenarios reading Standard MIDI Files sending sysex messages). data more valid, complete MIDI messages. Running status not allowed data, as underlying systems not support port disconnected, throw InvalidStateError exception. data not valid sequence not contain valid MIDI message, throw TypeError exception. data system exclusive message, MIDIAccess did not enable system exclusive access, throw InvalidAccessError exception. Parameter Type Nullable Optional Description data sequence<octet> data be enqueued, sequence entry representing single byte data. timestamp double time begin sending data port DOMHighResTimeStamp number milliseconds measured relative navigation start document). timestamp not present set time past), data be sent as soon as possible. Return type: void MIDIMessageEvent Interface event object implementing interface passed MIDIInput's onmidimessage handler MIDI messages are received. type, optional MIDIMessageEventInit eventInitDict)]interface MIDIMessageEvent Event readonly attribute double receivedTime; readonly attribute Uint8Array data;}; Attributes data type Uint8Array, readonly Uint8Array containing MIDI data bytes single MIDI message. receivedTime type double, readonly DOMHighResTimeStamp specifying event occurred. Note DOM4 Event object timeStamp member event object be filled out current time, lower precision defined as integer number milliseconds), different reference number milliseconds passed since UTC January therefore less suitable MIDI applications. MIDIMessageEventInit Interface dictionary MIDIMessageEventInit double receivedTime; Uint8Array data;}; Dictionary MIDIMessageEventInit Members data type Uint8Array Uint8Array containing MIDI data bytes single MIDI message. receivedTime type double DOMHighResTimeStamp specifying event occurred. MIDIConnectionEvent Interface event object implementing interface passed MIDIAccess' ondisconnect handler, present) MIDIPorts referencing port previously-available port unavailable example, MIDI interface disconnected), also passed MIDIAccess' onconnect handler new port available example, MIDI interface been disconnected plugged computer). Connection events are not required be dispatched, as underlying systems do not support as notification events; such systems have long time delays as poll new devices infrequently. type, optional MIDIConnectionEventInit eventInitDict)]interface MIDIConnectionEvent Event readonly attribute MIDIPort port;}; Attributes port type MIDIPort, readonly port been connected disconnected. MIDIConnectionEventInit Interface dictionary MIDIConnectionEventInit MIDIPort port;}; Dictionary MIDIConnectionEventInit Members port type MIDIPort port been connected disconnected. Examples Web MIDI API Usage JavaScript section non-normative. following are examples common MIDI usage JavaScript. Getting Access MIDI System example shows request access MIDI system. var midi null; global MIDIAccess objectfunction onMIDISuccess( midiAccess ready!" midi midiAccess; store global real usage, probably keep object instance)}function onMIDIFailure(msg) get MIDI access msg onMIDISuccess, onMIDIFailure Requesting Access MIDI System System Exclusive Support example shows request access MIDI system, including ability send receive system exclusive messages. var midi null; global MIDIAccess objectfunction onMIDISuccess( midiAccess ready!" midi midiAccess; store global real usage, probably keep object instance)}function onMIDIFailure(msg) get MIDI access msg sysex: true onMIDISuccess, onMIDIFailure Listing Inputs Outputs example list input output ports prints information console log. function listInputsAndOutputs( midiAccess input midiAccess.inputs) port id:'" manufacturer:'" name:'" version:'" output midiAccess.outputs) port id:'" manufacturer:'" name:'" version:'" Handling MIDI Input example prints incoming MIDI messages single arbitrary input port console log. function onMIDIMessage( event var str message received timestamp bytes]: str event.data[i].toString(16) str startLoggingMIDIInput( midiAccess, indexOfPort midiAccess.inputs.entries[indexOfPort].onmidimessage onMIDIMessage;} Sending MIDI Messages Output Device example middle C note message immediately MIDI channel channels are generally referred as channels queues corresponding note off message second later. function sendMiddleC( midiAccess, indexOfPort var noteOnMessage 0x7f]; note middle C, full velocity var output midiAccess.outputs.entries[indexOfPort]; output.send( noteOnMessage timestamp means send immediately. output.send( 0x40], window.performance.now() Inlined array creation- note off, middle C, release velocity timestamp now 1000ms.} Simple Loopback example loops input messages first input port first output port including system exclusive messages. var midi null; global MIDIAccess objectvar output null;function echoMIDIMessage( event output.send( event.data, onMIDISuccess( midiAccess ready!" try var input midiAccess.inputs.entries[indexOfPort]; echoMIDIMessage; output midiAccess.outputs.entries[indexOfPort]; catch console.error("Exception! get ports." e onMIDIFailure(msg) get MIDI access msg onMIDISuccess, onMIDIFailure Simple Monophonic Sine Wave MIDI Synthesizer example input messages available input ports, uses note messages drive envelope frequency monophonic sine wave oscillator, creating very simple synthesizer, using Web Audio API. Note note off messages are supported, sustain pedal, velocity pitch bend are not. sample also hosted var context=null; Web Audio object var midiAccess=null; MIDIAccess object. var oscillator=null; single oscillator var envelope=null; envelope single oscillator var attack=0.05; attack speed var release=0.05; release speed var portamento=0.05; portamento/glide speed var activeNotes stack actively-pressed keys window.addEventListener('load', function() patch up prefixes window.AudioContext=window.AudioContext||window.webkitAudioContext; context new AudioContext(); navigator.requestMIDIAccess().then( onMIDIInit, onMIDIReject else alert("No MIDI support present browser. gonna have bad time.") set up basic oscillator chain, muted begin oscillator context.createOscillator(); oscillator.frequency.setValueAtTime(110, envelope context.createGain(); oscillator.connect(envelope); envelope.connect(context.destination); 0.0; Mute sound oscillator.start(0); Go ahead start up oscillator function onMIDIInit(midi) midiAccess midi; alert("No MIDI input devices present. gonna have bad time.") else Hook message handler MIDI inputs input inputs) MIDIMessageEventHandler; function onMIDIReject(err) alert("The MIDI system failed start. gonna have bad time."); function MIDIMessageEventHandler(event) Mask off lower nibble channel, don't care about) switch 0xf0) case 0x90: velocity note-on message noteOn(event.data[1]); return; velocity fall note-off. MIDI's weird, case 0x80: noteOff(event.data[1]); return; function frequencyFromNoteNumber( note return Math.pow(2,(note-69)/12); function noteOn(noteNumber) activeNotes.push( noteNumber oscillator.frequency.cancelScheduledValues(0); oscillator.frequency.setTargetAtTime( frequencyFromNoteNumber(noteNumber), portamento envelope.gain.cancelScheduledValues(0); envelope.gain.setTargetAtTime(1.0, attack); function noteOff(noteNumber) var position activeNotes.indexOf(noteNumber); activeNotes.splice(position,1); shut off envelope envelope.gain.cancelScheduledValues(0); envelope.gain.setTargetAtTime(0.0, release else oscillator.frequency.cancelScheduledValues(0); oscillator.frequency.setTargetAtTime( frequencyFromNoteNumber(activeNotes[activeNotes.length-1]), portamento Security Privacy Considerations MIDI There are primary security privacy concerns adding Web MIDI API web platform: Allowing enumeration user's MIDI potential target fingerprinting uniquely identifying user specific MIDI have connected). Note context, be enumerated MIDI not, example, individual sampler synthesizer plugged MIDI interface, as not be enumerated, devices are connected host computer USB devices typically have own MIDI interface, be enumerated). be fingerprinted are equivalent MIDI device API expose name device, manufacturer, opaque identifier MIDI interface not attached devices). Few systems have significant numbers MIDI devices attached; systems do typically use hardware MIDI not fanning out dozen USB-MIDI connections USB hubs. case, course, enumerating MIDI only hardware MIDI interface(s), not synthesizers, samplers, etc. plugged other side. Given few number devices plugged amount information exposed here fairly symmetric fingerprinting concern exposed other APIs such as Gamepad API. vast majority systems have relatively few MIDI attached. Separate fingerprinting concerns identifying available ports are concerns around sending receiving MIDI messages. issues are explored more depth below. brief, general categories things do MIDI ports are: Sending short messages messages SysEx) Receiving short messages messages SysEx) Sending SysEx messages. SysEx messages include commonly recognized MIDI Time Code MIDI Sample Dump Standard, as as device-specific messages control data Roland Jupiter-80 synthesizerâ) do not apply other devices. Receiving SysEx messages. impact Sending short messages: sending note-on/note-off/controller messages let cause sounds be played attached devices, including Mac Windows) default virtual synthesizers. not cause concerning exposure already make sounds interaction, Flash, Web Audio. attached devices be professional lighting control systems, so possible control stage lighting; however, extremely rare, known system ability cause lasting damage information leakage based solely short messages; worst, malicious page flash lights, user close page reset lighting controller. Receiving short messages: receiving note-on/note-off/controller messages not cause information exposure security issues, as there identifying data being received, just stream controller messages be initiated user MIDI device clock-type messages). very analogous receiving keyboard mouse events. Sending Receiving SysEx. biggest concern, because be possible write code looked system-specific responses sysex messages, identify hardware available, then use download data e.g. samples stored sampler replace data sample data patches device), scenarios have be coded particular device. also possible samplers enable system exclusive message start recording sample so sampler happened have dedicated microphone attached practice, possible), be possible write code specific particular device record short sample sound then upload network further user intervention. not stream audio device, most samplers have fairly limited memory, MIDI Sample Dump sysex slow way transfer data transcode so unlikely listen long periods.) More explicit fingerprinting concern, as patch information/stored samples/user configuration uniquely identify system again, much device-specific code; there not standardized patches hash capability.) suggest system exclusive messages are security category own. also useful examine scenarios are enabled MIDI, mapped features: Receiving short messages. most attractive scenario Web MIDI, as getting input keyboards, drum pads, guitars, wind controllers, DJ/controllerist controllers, more, use messages as input control instruments features Web Audio API as as other control scenarios protocol choice multi-billion-dollar music production industry getting physical controllers knobs buttons attached computer, pro/prosumer audio media applications as as consumer applications Garageband.) Sending short messages tempting sending significantly less interesting, as scenario attached output devices hardware synthesizers less common today's market. major exception many MIDI controllers have external host control indicator lights, dramatically more useful. example, very popular Novation Launchpad controller uses MIDI note messages sent turn change colors buttons. same true nearly DJ controllers. Sending receiving SysEx obviously, more advanced communication high-end hardware devices, SysEx required. Unfortunately, common MIDI commands are also sent as system exclusive messages Machine Control, example generic start/stop/rew/ffw commands) many devices use system exclusive program patches, send advanced controller messages, download firmware, etc., are much-demanded scenarios Web MIDI. devices use sysex as direct control protocol, as pack more data single most devices use SysEx as way save restore patches configuration information less-expensive computer storage. Several major music hardware producers have expressed strong interest using Web MIDI provide web-based configuration programming hardware. short, disabling sysex altogether not only disable high-end scenarios. short: additional fingerprinting exposure enumerating MIDI devices directly analogous Gamepad APIâs additional fingerprinting exposure gamepad enumeration; typical users only have most few devices connected, configuration change, information exposed about interface user-configured data). additional security concern receiving short messages also small analogous listening keyboard, mouse, mobile/laptop accelerometer, touch input gamepad events; there additional information exposed, messages other clock signals be initiated user. additional concerns about sending short messages are analogous audio output overwrite user information expose use information, make sounds happen, change patches, rare configurations) toggle lights non-destructively, not persistently. System Exclusive, other hand, much less bounded potential, distinguishing requests SysEx separately API good idea, order more carefully provide user security hooks. suggested security model explicitly user agents require user's approval before giving access MIDI devices, not currently required prompt user approval also detailed system exclusive support be requested as part request. A. References A.1 Normative references Arnaud Le Hors; Philippe Le HÃ©garet; Lauren Wood; Gavin Nicol; Jonathan Robie; Mike Champion; Steven B Byrne et al. Document Object Model Level Core Specification. April W3C Recommendation. URL: Anne van Kesteren; Aryeh Gregor; Lachlan Hunt; Ms2ger. DOM4. December W3C Working Draft. URL: Jatinder Mann. High Resolution Time Specification. October W3C Editor's Draft. URL: Robin Berjon; Steve Faulkner; Travis Leithead; Erika Doyle Navara; Edward O'Connor; Silvia Pfeiffer. HTML5. August W3C Candidate Recommendation. URL: Musical Instrument Digital Interface November MIDI Manufacturers Association. Complete MIDI Detailed Specification ISBN URL: S. Bradner. Key words use RFCs Indicate Requirement Levels. March Internet RFC URL: David Herman; Kenneth Russell. Typed Array Specification. June Khronos Working Draft. URL: Cameron McCormack. Web IDL. April W3C Candidate Recommendation. URL: Paul Adenot; Chris Wilson; Chris Rogers. Web Audio API. October W3C Working Draft. URL: 