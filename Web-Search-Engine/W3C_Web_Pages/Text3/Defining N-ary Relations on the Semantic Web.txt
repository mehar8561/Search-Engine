Defining N-ary Relations Semantic Web Defining N-ary Relations Semantic Web W3C Working Group Note April version: Latest version: Previous version: Editors: Natasha Noy, Stanford University Alan Rector, University Manchester Contributors: Pat Hayes, IHMC Chris Welty, IBM Research Also Acknowledgements. Copyright W3C® ERCIM, Keio), Rights Reserved. W3C liability, trademark document use rules apply. Abstract Semantic Web languages, such as RDF OWL, property binary relation: used link individuals individual value. However, cases, natural convenient way represent certain concepts use relations link individual more just individual value. relations are called n-ary relations. example, want represent properties relation, such as certainty about severity strength relation, relevance relation, so example representing relations multiple individuals, such as buyer, seller, object was bought describing purchase book. document presents ontology patterns representing n-ary relations RDF OWL users consider choosing patterns. Status Document section status document time itspublication. Other documents supersede document. list currentW3C publications latest revision technical report befound W3C technical reports indexat document aWorking Group Note, produced theSemantic WebBest Practices Deployment Working Group, part theW3C Semantic Web Activity.This document set documents providingan introduction overview ontology design patterns produced SWBPD Working Group'sOntology Engineeringand Patterns Task Force. publication Working Group Note SWBPDWorking Group completed work document. Changesfrom previous Working Draft are summarized anappendix.Comments document be sent mailing list public archive. Further discussion materialmay also be sent theSemantic Web Interest Groupmailing list,semantic-web@w3.org,also public archive. Publication as Working Group Note not imply endorsement W3C Membership. draft document be updated, replaced obsoleted other documents time. inappropriate cite document as other work progress. document was produced group operating February W3C Patent Policy. document informative only. W3C public list patent disclosures made connection deliverables group; page also instructions disclosing patent. individual actual knowledge patent individual Essential Claim(s) disclose information accordance section W3C Patent Policy. Table Contents General issues Use case examples Representation patterns Vocabulary n-ary relations RDF OWL Pattern Introducing new class relation Use Case additional attributes describing relation Use Case different aspects same relation Use Case N-ary relation distinguished participant Considerations introducing new class relation Pattern Using lists arguments relation N-ary relations reification RDF Additional Background Note vocabulary: Relations instances relations, Properties Property instances Anonymous named instances patterns Notes References Changes Acknowledgements General issues Semantic Web languages, such as RDF OWL, property abinary relation: instances properties link individuals. Oftenwe refer second individual as individualsas note vocabulary]. Issue property instances link only individuals, do deal cases need describe instances relations, such as certainty, strength, etc? Issue instances properties link only individuals, do represent relations more individuals? relations") Issue instances properties link only individuals, do represent relations participants ordered list individuals rather single individual? solutions first problems are closely linked; third problem fundamentally different, be adapted meet issue special cases. Note don't use RDF reification patterns; reasons decision are discussed final section. Data descriptions used document data format used document Turtle used show triple explicitly. Turtle URIs be abbreviated prefixes: @prefix dc: .@prefix dc:title N-ary Relations Semantic Web" Use case examples Several common use cases fall category n-ary relations. Hereare examples: Christine breast tumor high probability. There binary relation person Christine diagnosis Breast_Tumor_Christine there qualitative probability value describing relation Steve temperature, high, falling. individual Steve values different aspects has_temperature relation: magnitude high trend falling. John Lion" book as birthday gift. There relation, individual John, entity book Lenny_the_Lion participate. relation other components as such as purpose amount United Airlines flight visits following airports: LAX, DFW, JFK. There relation individual flight cities visits, LAX, DFW, JFK. Note order airports important order flight visits airports. way think about use cases occur theevolution ontology. discover relation thought was binary, really needs further argument common origin use case discover binary properties always go together be represented as n-ary relation common origin use case beginning, realize relation really several things common origin use case nature relation such more arguments fundamentally sequence rather single individual use case Representation patterns describer earlier, Semantic Web Languages, properties are binary relations. instance property links individual individual value as shown below. have individual simple value C tobe part relation instance: now instance relation be other individuals However, simplicity, illustrate most use cases assuming single additional individual. handle more individuals exactly same way.) common solution problem represent relation as class rather property. Individual instances such classes correspond instances relation. Additional properties provide binary links argument relation. model examples above using pattern. instance, example instance new class Diagnosis_Relation represent fact Christine been diagnosed breast tumor high probability. Similarly, example instance class Purchase represent fact John bought book Lion" second solution represent several individuals participating relation as collection ordered list. use solution order arguments n-ary relation important model, as example above. Vocabulary n-ary relations RDF OWL task force plans produce suggested vocabulary describing class n-ary relation defining mappings n-ary relations RDF OWL other languages. note vocabulary forthcoming. Pattern Introducing new class relation present pattern create new class n new properties represent n-ary relation. instance relation linking n individuals then instance class. consider use cases pattern, illustrated examples above. Ontologically classes created way are often called relations". Reified relations play important roles many ontologies3 Ontoclean/DOLCE, Sowa, GALEN). However, RDF Topic Map communities have used word mean other things note below). Therefore, avoid confusion, do not use term document. Use Case additional attributes describing relation first use case, need represent additional attribute describing relation instance Christine breast tumor high probability). create individual relation instance links subject relation instance links instance participants represent additional information about instance: example above breast tumor high probability), individual Christine property has_diagnosis object instance class Diagnosis_Relation) as value: individual here single object encapsulating diagnosis specific instance Disease) probability diagnosis information held original arguments: being diagnosed, diagnosis probability use blank nodes RDF represent instances relation. arguments original n-ary relation—who being diagnosed, diagnosis probability rise true binary relationship. case, there are has_diagnosis, diagnosis_value diagnosis_probability.4 class definitions individuals pattern look as additional labels links indicate OWL restrictions properties. define diagnosis_value diagnosis_probability as functional properties, thus requiring instance Diagnosis_Relation exactly value Disease value Probability. RDFS, not have OWL restrictions functional properties, links represent rdfs:range constraints properties. example, class Diagnosis_Relation range property has_diagnosis. Here definition class Diagnosis_Relation OWL, assuming bothproperties—diagnosis_value anddiagnosis_probability—are defined as functional full code example OWL RDFS below): owl:Class rdfs:subClassOf owl:Restriction owl:someValuesFrom owl:onProperty rdfs:subClassOf owl:Restriction owl:allValuesFrom owl:onProperty definition Person class individual Christine instance), specify property has_diagnosis range restriction going Diagnosis_Relation class Diagnosis_Relation_1 instance): owl:Class rdfs:subClassOf owl:Restriction owl:allValuesFrom owl:onProperty Note discussing pattern, are not making suggestion best way represent probability pf event. simply use as example here. RDFS code example OWL code example Use Case different aspects same relation have different use case example above temperature, high, falling): example diagnosis, many view relationship were representing as fact still binary relation individual Christine diagnosis Breast_Tumor_Christine probability associated relation example individual Steve object representing different aspects temperature most intended interpretations, instance relation be viewed as instance binary relation additional attributes attached Rather, relation instance relating individual Steve complex object representing different facts about temperature. Such cases often come about course evolution ontology realize relations need be collapsed. example, initially, have had properties—has_temperature_level has_temperature_trend—both relating people. then have realized properties really are inextricably intertwined because need talk about are elevated falling." RDFS OWL patterns implement intuition are however same as previous example. class Person individual Steve instance) property has_temperature as range relation class Temperature_Observation. Instances class Temperature_Observation as figure) turn have properties temperature_value temperature_trend. RDFS code example OWL code example Use Case N-ary relation distinguished participant cases, n-ary relationship links individuals play different roles structure single individual standing out as subject relation, such as Purchase example above Lion" book as birthday gift). Here, relation explicitly more participant, many contexts, none be considered primary case, create individual represent relation instance links participants: specific example, representation look as Purchase_15 individual instance Purchase class representing instance relation:6 following diagram shows corresponding classes properties. Forthe sake example, specify purchase exactly onebuyer Person), exactly seller(a Company), exactly amount least oneobject Object). diagram OWL restrictions. RDFS arrows be treatedas rdfs:range links. class Purchase defined as OWL RDFSfile below definition RDFS): owl:Class rdfs:subClassOf owl:Restriction owl:allValuesFrom owl:onProperty rdfs:subClassOf owl:Restriction owl:cardinality owl:onProperty rdfs:subClassOf owl:Restriction owl:onProperty owl:someValuesFrom rdfs:subClassOf owl:Restriction owl:cardinality owl:onProperty rdfs:subClassOf owl:Restriction owl:onProperty owl:someValuesFrom rdfs:subClassOf owl:Restriction owl:onProperty owl:someValuesFrom Note representation OWL restrictions pattern: OWL restriction essentially ternary relation class, property, restriction value. case, instance Restriction class similar instance Purchase. RDFS code example OWL code example Considerations introducing newclass relation example, did not give meaningful names instances properties classes used represent instances n-ary relations, merely label Purchase_1, etc. most cases, individuals do not stand own merely function as auxiliaries group together other objects. Hence distinguishing name purpose. Note similar approach taken reifying statements RDF. Creating class represent n-ary relation limits use many OWL constructs maintenance problem. problem want have local range cardinality restrictions role n-ary relation depend class other role. example, want buy only instances class Book companies category Bookseller use case Expressing constraint special subclass n-ary relation class combination restrictions. instance, have create class Book_Purchase corresponding range restrictions property seller Bookseller) object Book). end up having build explicit lattice classes represent possible combinations. OWL definition inverse properties. Defining inverse properties n-ary relations, using patterns above, more work binary relations. order specify inverse properties n-ary relations, specify inverse properties participating n-ary relation proper constraints). Consider example John buying Lenny_The_Lion book. want have instance inverse relation pointing Lenny_The_Lion book person bought had simple binary relation John Lenny_The_Lion, defining inverse simple: simply define property is_bought_by as inverse owl:ObjectProperty owl:inverseOf purchase relation represented as instance, however, need add inverse relations participants relation instance relation example, definitions inverse relations buyer object purchase, look as owl:ObjectProperty owl:inverseOf owl:ObjectProperty owl:inverseOf definition class Person, include restriction property is_buyer_for, restrict values property instances class Purchase: owl:Class rdfs:subClassOf owl:Restriction owl:onProperty owl:allValuesFrom Note value inverse property is_buyer_for individual John, example, individual Purchase_1 rather object recipient purchase. Pattern Using lists arguments relation n-ary relations do not naturally fall either use cases above, are more similar list sequence arguments. example above Airlines flight visits following airports: LAX, DFW, JFK) category. example, relation flight airports visits, order arrival aircraft airport turn. relation hold many different numbers arguments, there natural way break up set distinct properties relating flight airport. same time, order arguments highly meaningful. cases participant relation do not have specific role essentially form ordered list, natural connect arguments sequence according relation, relate participant sequence first element sequence). represent example below using ordering relation instances FlightSegment class. flight segment property destination segment. Note add special subclass flight segment, FinalFlightSegment, maximum cardinality nextSegment property, indicate end sequence. RDF supplies vocabulary lists collection vocabulary, also be used cases group arguments relation have special role. do not use RDF collection vocabulary example, because less practical use generic ordering relation are representing something more specific. example, represent temporal order constituents. represent ontology example OWL. Note using rdf:List vocabulary OWL have put ontology OWL Full corresponding section OWL Guide comparison OWL Full OWL DL). following ontology OWL Lite: owl:Class owl:ObjectProperty owl:FunctionalProperty rdfs:domain rdfs:range owl:Class rdfs:subClassOf owl:Thing rdfs:subClassOf owl:Restriction owl:cardinality owl:onProperty rdfs:subClassOf owl:Restriction owl:allValuesFrom owl:onProperty owl:ObjectProperty owl:FunctionalProperty rdfs:domain rdfs:range owl:Class rdfs:comment last flight segment next_segment"; rdfs:subClassOf rdfs:subClassOf owl:Restriction owl:maxCardinality owl:onProperty owl:Class owl:ObjectProperty owl:FunctionalProperty rdfs:domain RDFS code example OWL code example N-ary relations reification RDF be natural think RDF reification representing n-ary relations. do not want use RDF reification vocabulary represent n-ary relations general following reasons. RDF reification vocabulary designed talk about statements—individuals are instances rdf:Statement. statement object, predicate, subject triple reification RDF used put additional information about triple. information include source information triple, example. n-ary relations, however, additional arguments relation do not usually characterize statement rather provide additional information about relation instance Thus, more natural talk about instances diagnosis relation purchase rather about statement. use cases discussed note, intent talk about instances relation, not about statements about such instances. Additional Background Note vocabulary: Relations instances ofrelations, Properties Property instances usually think semantic web languages as consisting triples theform have beentermed triples, do not use language herebecause conflicts RDF usage.) However, formally, interpret properties as representing relations, i.e.sets ordered pairs individuals. instance relation just oneof ordered pairs. triple fundamentallydifferent individuals triple. merely whichrelation ordered pair consisting individuals Wenormally name individuals; do not normally name ordered pairs. Anonymous named instances patterns Often cases such as use case wish regard instances relation have same argument as equivalent. capture intuition using RDF blank nodes represent relation instances. use case wish consider possibility there be distinct purchases identical arguments. case, node be named, e.g. Purchase_1. Notes relations" play important role have special status number ontologies, e.g. Sowa, J. Knowledge Representation. Morgan Kaufmann, Welty, C. Guarino, N. Supporting ontological analysis taxonomic relationships. Data Knowledge Engineering, simplicity, represent disease as individual. decision not always be appropriate, refer reader different note be written). Similarly, simplicity, OWL represent probability values as class enumeration individuals MEDIUM, LOW): owl:Class owl:equivalentClass owl:Class owl:oneOf There are other ways represent partitions values. refer note Representing Specified Values OWL Values]. RDF Schema version, represent simply as strings, also simplicity reasons. RDF property rdf:value appropriate examples such as Diagnosis example here. rdf:value meaning own, RDF specification use as vocabulary element identify component structured value property. Therefore, example, made diagnosis_value subproperty rdf:value property instead making direct instance rdf:Property indicate diagnosis_value indeed component diagnosis. Note used named individual instance class Purchase rather anonymous blank node here. example, there be distinct purchases exactly same arguments. simplicity, ignore fact amount expressed use simple number as value property. discussion represent units quantities OWL, refer different note be written) References Values] Representing Specified Values OWL: partitions" sets", Alan Rector, Editor, W3C Working Draft, August Overview] OWL Web Ontology Language Overview, Deborah L. McGuinness Frank van Harmelen, Editors, W3C Recommendation, February Latest version available Guide] OWL Web Ontology Language Guide, Michael K. Smith, Chris Welty, Deborah L. McGuinness, Editors, W3C Recommendation, February Latest version available Semantics Abstract Syntax] OWL Web Ontology Language Semantics Abstract Syntax, Peter F. Patel-Schneider, Patrick Hayes, Ian Horrocks, Editors, W3C Recommendation, February Latest version available Primer] RDF Primer, Frank Manola Eric Miller, Editors, W3C Recommendation, February Latest version available Semantics] RDF Semantics, Pat Hayes, Editor, W3C Recommendation, February Latest version available Vocabulary] RDF Vocabulary Description Language RDF Schema, Dan Brickley R. V. Guha, Editors, W3C Recommendation, February Latest version available Terse RDF Triple Language, Dave Beckett. Changes Merged patterns pattern different use cases. same use cases remain, are described as different use cases same pattern. Removed consideration bullet talking about logical equivalence patterns are single pattern now). Added more discussion General issues Use cases Added pattern rdf:Lists) Added flight example Changed wording Pattern" Use blank nodes relation instances pattern pattern Added section N-ary relations reification RDF Added section Additional background Added references Changed references instance" relation" Removed examples abstract syntax Added Acknowledgements Acknowledgements editors thank following Working Group members contributions document: Pat Hayes, Jeremy Carroll, Chris Welty, Michael Uschold, Bernard Vatant. Frank Manola, Ivan Herman, Jamie Lawrence have also contributed document. document product Ontology Engineering Patterns Task Force Semantic Web Best Practices Deployment Working Group. 