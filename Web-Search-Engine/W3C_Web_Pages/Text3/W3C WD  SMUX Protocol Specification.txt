W3C WD: SMUX Protocol Specification WD-mux-19980710 SMUX Protocol Specification W3C Working Draft version: Latest public version: Authors: Jim Gettys, Compaq Computer Corporation, Visiting Scientist, W3C, Henrik Frystyk Nielsen, W3C, Copyright W3C INRIA, Keio Rights Reserved. W3C liability, trademark, document use software licensing rules apply. Status Document W3C Working Draft review W3C members other interestedparties. draft document be updated, replaced made obsoleteby other documents time. inappropriate use W3C Working Draftsas reference material cite as other progress." Alist currentW3Cworking drafts also available. document experimental design multiplexing transport,intended not restricted use Web. SMUX been implementedas part HTTP/NG project. Use protocol EXPERIMENTALat thistime protocol change. particular, transition strategies touse SMUX have not been definitively worked out. have been warned! document part suite documents describing HTTP-NG designand prototype implementation: HTTP-NG Short- Longterm Goals, WD HTTP-NG Architectural Model, WD HTTP-NG Wire Protocol, WD Classic Web Interfaces HTTP-NG, WD MUX Protocol, WD Description HTTP-NG Testbed, Note Note: working drafts are subject frequent change, areadvised reference above URL, rather URLs working draftsthemselves. work part W3C HTTP/NG Activity current status,seehttp://www.w3.org/Protocols/HTTP-NG/Activity). send comments specification Abstract document experimental multiplexing protocol referred toas SMUX session management protocol separating underlyingtransport upper level application protocols. lightweightcommunication channel application layer multiplexing data streamson top reliable stream oriented transport. supporting coexistenceof multiple application level protocols HTTP HTTP/NG), SMUX shouldease transitions future Web protocols, communications client appletsusing private protocols servers over same TCP connection as theHTTP conversation. Contents Introduction Operation Deadlock Avoidance SMUX Header Alignment Session ID Allocation Session Establishment Protocol ID's Graceful Release Disgraceful Release Message Boundaries Flow Control Control Messages Remaining Issues Discussion Closed Issues Discussion Email Glossary References Introduction Changes Previous Version Tried clarify teminology. Moved comparison SMUX SCP(TMP) end document, extracteda goals section Key Words key words NOT", NOT", NOT", documentare be interpreted as described RFC Purpose Internet suffering effects theHTTP/1.0protocol, was designed understanding underlyingTCP transport protocol. HTTP/1.0 TCP connectionfor URI retrieved cost packetsand round trip times then TCP connection. smallHTTP requests, TCP connections have poor performance due TCP slowstart as asthe round trips required open close TCP connection. There are least) reasons multiple simultaneous TCP connectionshave come widespread use Internet apparentinefficiencies: client using multiple TCP connections gains significant advantage perceived performance end-user, as early retrieval metadata size) embedded objects page. client format page sooner suffering annoying reformatting page. Clients open multiple TCP connections parallel same server, however cause self congestion heavily congested links, since packets generated TCP are not congestion controlled. additional TCP cause performance problems network, client multiple TCP connections simultaneously same server also receive bandwidth advantage network relative clients use single TCP connection. problem not solvable application level; only network enforce such keep low bandwidth/high latency links busy dialup lines), more TCP connection been necessary since slow start cause line be partially idle. extension HTTP/1.0 form persistent TCP connectionsbut not work HTTP/1.0 proxies not take pipelining ofrequests account. Instead revised version persistent TCP connectionswas introduced HTTP/1.1 as default mode operation. HTTP/1.1 persistent connections pipelining[11] reduce network traffic theamount TCP overhead caused opening closing TCP connections. However,the serialized behavior HTTP/1.1 pipelining not adequately supportsimultaneous rendering inlined objects part most Web pages today;nor provide suitable fairness protocol flows, allow forgraceful abortion HTTP transactions closing TCP connection(quite common HTTP operation). Persistent connections pipelining, however, do not fully address therendering fairness problems described above. solutionis possible using HTTP range requests; however, approach not, forexample, allow server send just metadata contained embedded objectbefore sending object solve TCP connection abortproblem. Current TCP implementations do not share congestion information multiplesimultaneous TCP connections peers, increases theoverhead opening new TCP connections. expect Transactional TCP[5] sharing congestion information TCP controlblocks improve TCP performance using lessRTTs better congestion behavior, making more suitable HTTPtransactions. solution problems actions; either willnot entirely discourage opening multiple TCP connections same serverfrom client. Internet service providers enable Random Early Detection other active congestion control algorithms routers ensure bandwidth fairness clients network congested. RED also addresses queue length problems observed routers today. Development deployment multiplexing protocol use HTTP eventually other protocols), so multiple objects web server be fetched approximately simultaneously over single TCP connection, so metadata objects be sent clients other metadata waiting rest first object requested. document such experimental multiplexing protocol. isdesigned multiplex TCP connection underneath HTTP so HTTPitself not have change, allow coexistence multiple protocols(e.g. HTTP HTTP/NG), ease transitions future Web protocols,and communications client applets using private protocols serversover same TCP connection as HTTP conversation. Ideas design come Simon Spero's SCP descriptionand experience theX WindowSystem's protocol design Goals believe SMUX following goals:: Unconfirmed service negotiation round trips server simple design high performance deadlock-free believe), credit based flow control scheme. allow multiple protocols be multiplexed over same TCP connection allow connections be established either direction callbacks session initiator). ability build full function socket interface above protocol. low overhead alignment data stream, so easy use protocols marshal data binary form. SMUX Protocol Operation Deadlock Scenario Multiplexing multiple sessions over single transport TCP connectionintroduces potential deadlock SMUX designed avoid. Here example potential deadlock: Presume session being handled independent thread memory available SMUX implementation limited example, thin client meter reader). purposes example, presume thin client 50K bytes buffer available SMUX implementation, get more. sender data send, as part session request message), 100K bytes initial data. There are other senders, so data transmitted. thread deal message blocked, make progress. SMUX buffer 100K meg, pick favorite numbers), other session's data be blocked behind initial transmission SMUX read buffer data someplace since buffer available, deadlock Many similar possibly harder explain) deadlocks are possible. example points out deadlock possible: SMUX be able bufferdata independently consumers data. also havesome way throttle sessions consumer data not responsivein multiplexing layer example, prevent transmission morethan Kbytes data). Note deadlock independent ofthe size multiplexing fragment, strictly dependent availabilityof buffer space SMUX particular session. Deadlock Avoidance SMUX, receiver promise credit) transmitterthat certain amount buffer space available least willconsume bytes, not buffer e.g. real time audio protocol wherethe data disposed transmitter promises not send more datathan receiver promised more credit). thesepromises are met, then SMUX not deadlock. SMUX implementation maintain adhere credit system itcan deadlock. Implementations systems large amounts memory(e.g. VM systems) be quite different ones thin clients limited,non-virtual memory. reasonable VM system hand out creditsfreely virtual socket buffering found TCP implementations);but implementation be careful test credit mechanisms sothat operate limited memory systems. Credit controlmessages MAY be sent sessions are not active. Sessions have initial credit size 16KB session; there SMUX control message set initial creditto something larger default. Operation Implementation Considerations transmitter NOT transmit more data fragment availablecredit session deadlock). SMUX implementation fragment streams transmitting intofragments. max_fragment_size, variable ismaintained transport TCP connection basis, determinesthe largest possible fragment sender ever send receiver. maximum latency introduced SMUX layer above andbeyond inherent TCP latencies buffering sender receiverand delay-bandwidth product amount data be flight atany given instant). client low bandwidth link, limitedmemory buffering decide set max_fragment_size down tocontrol latency buffer space required. max_fragment_sizeis set transmitter left determine fragment size andMAY take account application protocol knowledge SMUX implementationfor HTTP send fragments metadata embedded objects, thenext phase progressive image format, only Animplementation honor max_fragment_size as transmitsdata, been set receiver. SMUX implementation not have explicit knowledge experienceof good fragment sizes use guidelines as starting point: path_MTU TCP connection, minus size TCP IP headers IPV6 have longer headers!) bytes XMUX header, information available MSS TCP connection, path_MTU not available either case, probably want subtract bytes make sure SMUX header be added forcing TCP segment. result fragmentation roughly similar TCP segmentation overmultiple TCP connections. implementation round robin sessions data send insome fashion avoid starving sessions, allowing single thread tomonopolize TCP connection. Exact details such behavior leftto implementation. achieve highest bandwidth lowest overheadSMUX behavior, credits be handed out reasonably large chunks. TCPimplementations typically send ack message other packet, andit very hard arrange piggyback acks data segments inimplementations. Therefore, SMUX have reasonably low overheadcredits be handed out significant multiple more timeslarger) bytes represented packets ethernet. outstanding credit balance active sessions also have belarger bandwidth/delay product TCP connection SMUX isnot become limit TCP transport performance. arguments indicate outstanding credits many implementationsshould be 10K bytes more. Implementations piggyback creditmessages data packets possible, avoid unneeded packets thewire. careful implementation ends TCP connectionare regularly sending payload be able avoid sending extrapackets network. necessary, add future version fragmentation control messagesto do bandwidth allocation, now, are not bothering. SMUX Header SMUX headers are always big endian byte order. people want, expand out union below control messagetype basis way C bindings X events were written out...).For draft, not doing so.  #define MUX_CONTROL       MUX_SYN           MUX_FIN           MUX_RST           MUX_PUSH          MUX_SESSION       0xFF000000 #define MUX_LONG_LENGTH   0xFF040000 #define MUX_LENGTH        0x0003FFFF  typedef unsigned int flagbit; struct w3mux_hdr union struct unsigned int session_id flagbit control flagbit syn flagbit fin flagbit rst flagbit push flagbit long_length unsigned int fragment_size int long_fragment_size only present long_length set data_hdr;         struct unsigned int session_id flagbit control unsigned int control_code flagbit long_length unsigned int fragment_size int long_fragment_size only present long_length set control_message;     contents; }; fragment_size always size bytes fragment, excludingthe SMUX header padding. Alignment SMUX headers are always least) bit aligned. find next SMUXheader, take fragment_size, round up next bit boundary. Transmitters MAY insert NoOp control messages force 64bit alignment protocol stream. Long Fragments SMUX header long_length bit set use bits followingthe SMUX header long_fragment_size field) value thefragment_size field, purpose fragment_sizefield being used Atoms Atoms are integers are used as short-hand names strings, aredefined using InternAtom control message. Atoms are onlyused as protocol ID's version SMUX, though be usedfor other purposes future versions. atom be redefinedat time, not safe use atom have defined use atoms defined other end mux connection). Atomsare therefore not unique values, only make sense context aparticular direction particular mux connection. restrictionis avoid having define protocol deallocating atoms, anyround trip overhead likely imply. Strings are defined be UTF-8 encoded UNICODE strings. thatan ascii string valid UTF-8). definition structure thesestrings outside scope document, though expect willoften be URI's, naming protocol stack protocols. Atoms alwayshave values 0x20000 0x200ff maximum atoms be defined). Strings used protocol id's be URIs Protocol ID's protocol used session identified Protocol ID, caneither be IANA port number, atom. allow higher layers stack protocols HTTP top deflate compression, top TCP). identify protocol protocol stack use so application firewall relays perform sanity checking policy enforcement multiplexed protocols simplest case, protocol ID just value range TCP port number UDP port number(0x10000-0x1ffff) protocol IANA port number registry Firewall proxies presume bytes conform thatprotocol. Protocol ID's above 0xfffff are atoms. scheme name ofthe URI protocol family being used. Session ID Allocation session allocated session identifier. Session Identifiers below0 are reserved future use. Session IDs allocated initiator ofthe transport TCP connection are even; allocated receiver ofthe transport connection odd. Proxies do not understand messages ofreserved Session ID's forward unchanged. session only be deallocated potentially reused new sessions sessionis fully closed directions. Session Establishment establish new session, initiating end SYN message, allocatinga free session number out address space. session establishedby setting SYN bit first message sent session. sessionis specified session_id field. fragment_size fieldis interpreted as theprotocolID session, as discussed above. receiver either open reverse path session SYNmessage), send FIN message indicate reverse pathis not going be used further, send RST message indicate anerror. initiator session know safeto reuse session ID. Graceful Release session ended sending fragment FIN bit set. end ofa MUX connection be closed independently. MUX uses half-close mechanism TCP[1] close data flowing eachdirection session. sending FIN fragment, sender NOTsend more payload direction. Disgraceful Release session be terminated sending message RST bit set. Allpending data session be discarded. such protocol" errorsdetected receiver new session are signaled originatoron session creation sending message RST bit set. as inTCP). payload fragment containing RST bit null terminatedstring containing URI error message content negotiationmakes message potentially multi-lingual), followed null terminatedUTF-8 string containing reason reset case URI notaccessable). Message Boundaries message boundary marked sending message PUSH bit set.The boundary set last octet message, including thatoctet, first byte subsequent message. TCP, as PUSH be reliably used as record mark. Flow Control Flow control determined simple credit scheme described above byusing AddCredits control message defined below.Fragments transmitted never exceed outstanding credit session.The initial outstanding credit session 16Kbytes. End Points major design goals SMUX allow callbacks objects inthe process initiated transport TCP connection requiringadditional TCP connections overhead machine resources andtime cause, problems TCP connection establishmentthrough firewalls). DefineEndpoint control message advertize aparticular URI's are reachable over transport TCP connection. Control Messages control bit SMUX header always set control message. Controlmessages be sent session, even sessions are not open.The control_code SYN, FIN, RST, PUSH bits SMUXheader. control_code control message controlmessage type. unused data control message be ignored. revised version SMUX means session creation costs bytes(a control message SYN set, protocol ID message). Therefore first fragment payload total overhead bytes. presuming using IANA based protocol, rather namedprotocol). same as previous version, though meanstwo messages rather individual control message types are listed below. code Name Dir Description InternAtom session_id used as Atom be defined so value defining ID fragment_size field length UTF-8 encoded string. fragment string be interned. interning strings. enough?). DefineEndpoint session_id ignored. fragment_size interpreted as protocol ID, naming endpoint actually available transport TCP connection. single transport TCP connection be used callbacks, advertise protocol endpoint be reached process other end transport TCP connection. relative URI naming be used scheme URI structure. example, firewall proxy advertize just proxy, claiming be used contact HTTP protocol object anywhere, indicate object below point URI space server be reached TCP connection. client advertize available transport TCP connection. SetMSS sets limit fragment sizes below outstanding credit limit. session_id be fragment_size field used as max_fragment_size largest fragment be sent session transport TCP connection.). max_fragment_size means there limit fragment size allowed session. AddCredit R->T session_id session. fragment_size flow control credit granted be added current outstanding credit balance). value limit much data be sent session. SetDefaultCredit R->T session_id be fragment_size field used as set initial default credit limit incoming MUX connections over transport TCP connection. short hand sending series AddCredit messages session ID). NoOp control message defined perform function. data payload be ignored. Undefined. Reserved future use. be ignored not understood, forwarded proxies. fragment_size always used length control message, data control message be payload control message allow proxies be able forward future control messages). Remaining Issues Discussion MUX be used??? are appropriate strategies determining simple multiplexing protocol be used? Name server hack? UPGRADE HTTP? Remember previous UPGRADE use MUX worked? Comparison SCP Note TIP Internet Protocol) definesa version SCP called TMP Goals: Unconfirmed service negotiation. SCP data be sent session establishment; recipient not confirm successful mux connection establishment, reject unsuccessful attempts. simplifies design protocol, latency required confirmed operation. simple design performance critical There are issues make SCP inadequate use: SCP deadlock, unlimited amounts memory available. provision multiplexing multiple protocols over same transport TCP connection, essential graceful transition dependency currently incomplete NG design, allow other uses use same multiplexed connection applet communication serverlets). SCP's byte overhead not reasonable most time. SMUX uses bytes default case. design below permits byte header care preserve bit alignment cost bytes. practice, there few data formats architectures actually require more bit alignment. form flow control, infinite buffering clients be required. Alignment preserved data stream. compact, high speed code implementations binary protocols, extra data copies, such protocols be significant overhead. SCP SYN Version second message, costs round trip. So far, SMUX similar SCP. There are important differences: deadlock-free believe), credit based flow control scheme. allow multiple protocols be multiplexed over same TCP connection available SCP). lower overhead SCP, preserving data alignment important binary protocol marshaling code) ability build full function socket interface above protocol. SMUX SYN round trip SCP V2 session ID's being allocated independent address spaces. also many state transitions SCP, simplifying protocol greatly. Other comment SCP: SCP sessions, highly excessive, future use. Closed Issues Discussion Mail comments below allude previous versions specification,and not make sense context current version. Flow control: priority vs. credit schemes Henrik have convinced there are fundamental differences betweena priority scheme credit scheme draft. interactquite differently TCP, priority schemes have way limit thetotal amount data being transmitted, though priority schemes are bettermatched Web decided, least now, todefer priority schemes higher level protocols. Stacking Protocols Transports ILU style protocol stacks are GOOD THING. There have been too manyworries about birthday problem people be comfortable BillJanssen's hashing schemes Nielsen andRobertThau's mail topic). tried putting directlyin MUX previous version, experience shows didn't reallyhelp implementer particular, Bill Janssen implementing ILU). version just name protocol, left othersto implement stacking ILU). believe name protocol necessary, SMUX ever be usedwith firewalls. Application level firewall relays need protocolinformation sanity check protocol being relayed. Application levelrelays are considered much more secure just punching holes firewallfor particular protocol families, small organizations often findsufficient, as relay sanity check protocol stream enablebetter policy decisions example, forbid certain datatypes HTTPto transit firewall). Large organizations large targets typicallyonly run application level proxies. Byte Usage Wasting bytes general, particular TCP connection establishment,for multiplexing transport be avoided. There are several reasons forthis: initial segment too long, network round trip be lost TCP slow start, so bytes near beginning conversation MAY BE much more precious bytes later conversation, once slow start overhead been paid. first segment too long, fall off cliff. Directly user perceived response; cleverness later packing batching request get time back; directly perceived latency user talks server first time. So there more usual tension generality vs. performance.Performance analysis Human perception about milliseconds; much more userperceives delay. K baud, byte uncompressed costs milliseconds modem latencies). airplane telephone today, geta munificent baud, 3X slower. Cellular modems transmittingdata as understand give around 20Kbaud, deployed. So basic multiplexing byte overhead costs milliseconds commonmodems. means basic overhead small vs. human perception, mostlow speed situations, good position be cMux onnection open, above protocol send bytes setupmessage, then open session, requiring least bytes more. 12bytes milliseconds Not bit aligned, bytes costs oforder milliseconds. Maybe setup message good idea; otheruses security) be dealt control message. Multiple protocols over SMUX want SMUX multiple protocols simultaneously over same transportTCP connection, so need know protocol use session,so demultipexor hand data person. SUNRPC andDCERCP simultaneously). There are obvious ways do Send control message session first used, indicating protocol. Disadvantage: costs probably bytes do so SMUX overhead, byte message), potential bit alignment. syn set indicating new session, then steal mux_length field indicate protocol use session. bytes SMUX header used just establish session.) Opinions? better a. Answer: adopted strategy. Priority... given stream, priority affect session handled whenmultiplexing data; sending priority block unneeded, wouldwaste bytes. There case priority be useful: anintermediate proxy relaying sessions maybe remultiplexing so, be sent only sessions are established changed. Changescan be handled control message. Opinions? priority field be hacked length field protocol fieldusing above. So question important send priority SMUXprotocol? priority control, needed, be control message? message). Answer: Not protocol. Pandora's box remultiplexors, whichcould have denial service attacks. Setup message setup message needed? don't think initial bytes areprecious performance discussion above), trivial use.If move byte order flag SMUX header, use control messagesif other information needs be sent, dispense layeris simpler. current position, someone objects withreasons, nuke next version document. Answer: Not needed. Nuked. Byte order flags higher layer protocols using host dependent byte order be performance win sending larger objects such as arrays data), overheadat layer much, not be worth bothering Worst case(naive code) be memory shift overhead/payload. Smartcode load appropriate shifts etc. Opinions? still leaning swapping bytes here, there are otherexamples byte load shift slow Alpha, not muchof issue other systems). Answer: Not sufficient performance gain SMUX level be worth doing.Defined as LE byte order SMUX headers. Error handling There are several error conditions, probably best reported control messagesfrom server: such protocol. sort serial number be reported, suppose; serial number be implicit as X bad message. combinations flag bits are not legal. Priority others? twists worry about? Answer: Only error occur such protocol, given priorityin base protocol. May still be unresolved issues here around Tree" message bits turned on). Length Field reason believe bit length field single payload isinadequate? don't think so, live Alpha. Answer: bit extended length field single fragment sufficient. Compression there need be bit saying payload compressed avoid explosionof protocol types? Answer: introduction control message allow specification transportstacks Stacks think be able multiplex TCP, UDP, IP protocol.Internet protocol numbers are bit fields. So need bits TCP, bit distinguish TCP UDP, bitmore use IP protocol numbers address space allocateprivately. bit length field allow reuse.* bit length field bit session field control bits longlength bit last bit used define control messages, reuse syn, fin,rst, push bits as control_code define control message. Thereare undefined control codes, reservation twosessions further use there needs be further extensions. specabove Alignment Back alignment. demand byte alignment, requests donot end up naturally aligned, waste bytes. bytes are wasted average.At overhead protocols do not pad up meanbe bytes rather bytes ms even distributionsof length). Note DOES NOT effect initial request latency get first URL), therefore less critical elsewhere. have related worry; sometimes be painful get padding bytesat end buffer; heard people losing having data rightup end page, so implementations are living slightly dangerously presume send padding bytes sending or3 bytes after buffer independent write OS forpadding bytes). Alternatively, buffer alignment requirement be satisfied byimplementations remembering many pad bytes have be sent, adjustingthe beginning address subsequent write many bytes before thebuffer SMUX header been put. Am being unnecessarily paranoid? Opinion: believe alignment fragments general GOOD THING, andwill simplify SMUX transport protocols higher levels theycan make presumption implementations. So believe overheadis worth cost; want do better save bytes, then startbuilding application specific compression scheme. not, makeyour case. Control bits Are bits defined Simon's flags field need? Are thereany others? Answer: More bits need. Current protocol use as many.I've ended back original bits specified, rather smaller setsuggested Bill Janssen. full emulation detailsof socket interface, not otherwise be possible. detailsaround TCP socket handling, discussed books Illustrated,"by W. Richard Stevens. Am wet? Opinion: believe do Control Messages Question: do want/need short control message? now, out forextensibility are control messages sent reserved as yet unspecified) control session. minimum bytes wire. couldsteal last available bit, allow byte short control message,that have bits payload. Opinion: Flow control needs protocol/transport stacks need Documentabove now control messages. Simplicity default Behavior above specification someone just SMUX singleprotocol entirely ignore protocol ID's. Glossary be supplied References J. Postel, Control Protocol", RFC Network Information Center, SRI International, September J. Postel, IP bake RFC September J. Mogul, S. Deering, MTU Discovery", RFC DECWRL, Stanford University, November T. Berners-Lee, Resource Identifiers WWW. Unifying Syntax Expression Names Addresses Objects Network as used World-Wide Web", RFC CERN, June R. Braden, TCP Extensions Transactions: Functional Specification", RFC USC/ISI, July R. Fielding, Uniform Resource Locators", RFC UC Irvine, June T. Berners-Lee, R. Fielding, H. Frystyk, Transfer Protocol HTTP/1.0", RFC W3C/MIT, UC Irvine, W3C/MIT, May R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, T. Berners-Lee, Transfer Protocol HTTP/1.1", RFC U.C. Irvine, DEC W3C/MIT, DEC, W3C/MIT, W3C/MIT, January S. Bradner, words use RFCs Indicate Requirement Levels", RFC Harvard University, March J. Touch, Control Block Interdependence", RFC April W. Stevens, Slow Start, Congestion Avoidance, Fast Retransmit, Fast Recovery Algorithms", RFC January V. Jacobson, Avoidance Control", Proceedings SIGCOMM H. Frystyk Nielsen, J. Gettys, A. Baird-Smith, E. Prud'hommeaux, H. W. Lie, C. Lilley, Performance Effects HTTP/1.1, CSS1, PNG", Proceedings SIGCOMM S. Floyd V. Jacobson, Early Detection Gateways Congestion Avoidance", IEEE/ACM Trans. Networking, vol. Aug. R.W.Scheifler, J. Gettys, X Window System" ACM Transactions Graphics # Special Issue User Interface Software, V. Paxson, Trends Wide-Area TCP Connections" IEEE Network, Vol. pp. July S. Spero, Control Protocol, Version S. Spero, Control Protocol, Version Keywords Port numbers are maintained IANA port-numbers registry. Keywords Protocol numbers are maintained IANA protocol-numbers registry. W. Richard Stevens, Illustrated, Volume Addison-Wesley, Berners-Lee, T., Fielding, R., Masinter, L., Resource Identifiers Generic Syntax Semantics," Work Progress IETF, November, J. Lyon, K. Evans, J. Klein, Internet Protocol Version Work Progress Transaction Internet Protocol Working Group, November, B. Janssen, M. Spreitzer, Unification"; particular manual section Protocols Transports. WD-mux-19980710.html,v frystyk Exp 