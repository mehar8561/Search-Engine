MBUI Task Models MBUI Task Models W3CWorking Group Note April version: Latest published version: Previous version: Editors: Fabio Paternò, ISTI-CNR Carmen Santoro, ISTI-CNR Lucio Davide Spano, ISTI-CNR Dave Raggett, W3C Copyright© W3C® ERCIM,Keio, Beihang), Rights Reserved.W3C liability,trademarkand documentuse rules apply. Abstract Task models are useful designing developing interactivesystems. describe logical activities have becarried out order reach user’s goals. documentcovers specification Task Models, meta-modelexpressed UML, XML Schema be used as basisfor interchange Task Models different user interfacedevelopment tools. Status Document section status document thetime publication. Other documents supersede thisdocument. list current W3C publications latestrevision technical report be found W3C technical reports index document meta-model XML serialization fortask models describing user update tothe First Public Working Draft conform policy W3C namespaceURIs, make minor changes terminology. document been published as Working Group Noteto reflect fact ModelBased UI Working Group longer progressing along theW3C Recommendation Track. record discussion relating thisspecification be found ModelBased UI Working Group's email archive. email list Publication as Working Group Note not imply endorsementby W3C Membership. draft document be updated,replaced obsoleted other documents time. isinappropriate cite document as other work progress. document was produced group operating W3C Patent Policy. W3C public list anypatent disclosures made connection deliverables ofthe group; page also instructions disclosing apatent. individual actual knowledge patent whichthe individual Essential Claim(s) disclose information accordancewith section W3C Patent Policy. Table Contents Introduction Specific requirements taskmeta-model Meta-Model Operators Task Categories Task Types Additional Task Properties Task Meta Model inUML Examples XML Schema Definition Description Complete schema Operators byLanguages References Acknowledgements Introduction Interactive systems cover wide range possibilities, e.g.the means controlling microwave oven, Web applicationswhere user interface runs Web browser coupled viaHTTP back-endservices network. Task models provide goal-oriented description interactivesystems suitable reviewing temporal relationships betweentasks, decomposition subtasks, avoiding needfor level detail required full description userinterface. easier talk user interfacedesign getting distracted details. task activity be carried out tofulfil user's goals. Tasks be represented variousabstraction levels. designers only want specifyrequirements activities be carried out, justneed consider main high-level tasks. other hand, whendesigners aim provide more precise design indications, then theactivities are represented finer granularity, example,covering temporal sequence tasks be carried out theuser system, as as preconditions task. purpose document define standard forinterchange task models, based widely adoptedConcurTaskTrees notation. CTT visual notation describing task models. Here anexample task reserving hotel room: Figure Example Task Model theCTT Notation specification meta-model XML schema forinterchange task models based CTT notation, notnormatively define such models be visualized. Specific requirements task meta-model section there are requirements have beenspecifically identified task models. Req1: Separation static aspects dynamic aspects Req2: Separation hierarchical structure otheraspects Req3: Possibility relating task performance contextof use modelling context use not scope ofthis document) Req4: Provide initial taxonomy task types requirements are not normative, rather intended give thereader sense assumptions underlay notation. Meta-Model section normative meta-model task model notation. Tasks have ahierarchical structure use set temporal operators todescribe relations are based usedin CTT. Operators operators include N-ary operators operators.They are described following list: Interleaving T2||| TN): connected tasks be performedconcurrently, specific constraint. Order independence(T1|=|T2 TN): tasks canbe performed order; Synchronisation(T1|[]|T2 TN): tasksare concurrent exchange information Parallelism tasks are performed true paralllelism. Choice case possible choose task froma set tasks once choice been made, chosen taskcan be performed Disabling(T1[>T2[> TN): theleft-hand task deactivated once right-hand task hasstarted; Suspend-Resume TN): right-hand task interruptsthe left-hand task finished, left-hand task canbe reactivated state was before interruption. Enabling(T1>>T2>> TN): Thereare cases: information passing T1completes T2, T2 itenables T3, so forth TN information passing, as before, exceptinformation passed completed task nexttask Iteration task performediteratively: execution started againfrom beginning. Optional task optionallyperformed. comparison operators are supported different taskmodelling languages given Table temporal operators areall N-ary iteration optionality, are unary.The N-ary operator relationship associated subtasks tomodel N-ary operators are associated decomposition atask subtasks. N-ary operators are associative andcommutative disabling, suspend-resume, enabling,which are associative not commutative. also worth pointing out operators have different priorities.For N-ary operators priority associated operator isexpressed order UML class diagramin Figure choice operatorwhich highest priority). key concept CTT notation) task allocation: eachtask be carried out indicated related category andis explicitly represented using different subclasses eachcategory. There are possibilities: Task Categories user task internal cognitive activity,such as selecting strategy solve problem system task performed applicationitself, such as generating results query interaction task user actions mayresult immediate system feedback, such as editing diagram abstract task task subtasksbelonging different categories, thus be allocateduniquely using previous categories Task Types Designers also classify tasks according semantics,i.e. giving task type. important notethat above categories own predefined set oftask types, thus such sets predefined task types are indicatedseparately class diagram, as defined below: System Tasks Comparison system information useful forcomparing pieces information GenerateAlerts system alert Feedback system feedback about intensivecomputational activity Grouping system pieces information aresomehow grouped Locate system information useful locatesomething Overview system overview data Interaction Tasks Single Selection user system selectone piece information Multiple Selection user system toselect multiple pieces information Edit user system change pieceof information Control user system trigger somefunctionality Zooming user system change thelevel detail presented, e.g. zooming map photograph Filtering user system filter howsome data visualised, e.g. show aspects hideothers DetailOnDemand user system ask forsome detail item User Tasks ProblemSolving user cognitive activity tosolve problem Comparing user cognitive activity comparepieces information Planning user activity plan todo Abstract Tasks Search Information user iterative search fora piece information Additional task types be used added flexibility. Inorder model task category attributes:predef_type, task type itis included predefined set tasks already identified;ext_type, task type case anew task type be defined. Additional Task Properties possible specify additional information associated witheach task number attributes. instance, ispossible specify context use supports taskconcerned, there are tasks are meaningful only somecontexts use. Modelling context use out scopeof document. addition, task possible specify domainobjects are manipulated task, areread-only be updated. Task Meta Model UML Figure shows class diagramrepresenting task meta-model. task model composed setof tasks; subtask relation defined N-aryoperators are associated subtasks task. Figure Main Aspects TaskMeta-model task be associated multiple domain objectsthat manipulate. addition, task number ofproperties/attributes: identifier, context use(indicating contexts are suitable performance),informal description, so forth. Moreover, since execution task often subject theavailability given resource value acertain variable, order express such dependencies, thelanguage Precondition Postcondition classes(pre-conditions indicate be true before task iscarried out, post-conditions indicate be true aftertask execution). precondition occur not as associated acertain task, related multiplicity Figure instance ConditionGroup class.It returns Boolean value, obtained applying thelogical operators operands. operand aConditionLiteral, be used represent values. beeither constant variable manipulated taskexecution. former case, value expressed valueattribute ValueLiteral subclass, latter isexpressed DomainObjectLiteral class, areference domain object manipulated task Anoperand also be represented turn ConditionGroup, inorder create complex Boolean expressions. operators expressthe Boolean relation operands. operator be oneof following: xor, stars, ends, greaterthan, greater less less not hierarchical structure preconditionsallows representation complex conditions. same structure also possible specifyingpostconditions associated tasks. following list classes contained Figure Class: Task Composition Task, associated N-aryOperator Association: Domain Object(cardinality: minimum maximum unbounded) Association: ConditionGroup cardinality minimum maximum Association: ConditionGroup cardinality minimum maximum Association: maximum Attribute: Identifier Attribute: Name Attribute: Frequency Attribute: ContextOfUse Attribute: Description(String) Class: User Superclass: Task Attribute: predef_type Attribute: ext_type Class: Abstract Superclass: Task Attribute: predef_type Attribute: ext_type Class: System Superclass: Task Attribute: predef_type Attribute: ext_type Class: Interaction Superclass: Task Attribute: predef_type Attribute: ext_type Class: DomainObject Enumeration Class: N-aryOperator Association: Composition SubTask(cardinality role Task: minimum maximum cardinalityrole SubTask: minimum maximum N) Constant: choice Constant: order_independence Constant: Interleaving Constant: parallelism Constant: synchronisation Constant: disabling Constant: suspend_resume Constant: enabling Enumeration Class: Association: Task Constant: optional Constant: iterative Class: ConditionGroup Aggregation ConditionGroup toConditionGroup: operand) Aggregation ConditionLiteral toConditionGroup: operand) Association: LogicOperator cardinality: Association: Task(name: precondition, cardinality: Association: Task(name: postcondition, cardinality: Class: ConditionLiteral Aggregation ConditionLiteral toConditionGroup: operand) Class: ValueLiteral Superclass: ConditionLiteral Attribute: value Class:DomainObjectLiteral Superclass: ConditionLiteral Attribute: domain_object Class: LogicOperator Association: ConditionGroup cardinality Examples example below Figure beentaken SERENOA Project. about case study carrental service, user access order reserve acar. goal, users have specify number ofcharacteristics are searching about car, alsoproviding other information about surname,address, city..). Then, user submit request theservice list results. following, specify task model as nestedlist tasks, nesting used model hierarchy betweenparent children. addition, task specify beside name- relationship(s) theconcerned task involved. also note example tasks areinteractive apart tasks Service Show results- whichare application tasks: first service) models systemtask access service doing search parametersprovided user; second system task incharge showing results user. Figure task model example modelledthrough CTT notation Make car reservation: theroot task Enter info infoDisabling Submit Request: time execution ofthe task entering information, user decide submitthe search request) Enter car info carinfo Interleaving Enter user info: tasks becarried out concurrent way) Enter Category Interleaving Enter Colour) Enter Colour Interleaving Enter colour InterleavingEnter Model) Enter Model colourInterleaving Enter model Interleaving EnterEngine) Enter Engine ModelInterleaving Enter engine Interleaving EnterColour) Enter user info carinfo Interleaving Enter user info InterleavingEnter Other Info) Enter Name NameInterleaving Enter Surname) Enter Surname nameInterleaving Enter surname Interleaving EnterAddress) Enter Address surnameInterleaving Enter address Interleaving EnterCity) Enter City addressInterleaving Enter city Interleaving Enter ZIPcode) Enter ZIP code CityInterleaving Enter ZIP code Interleaving EnterCountry) Enter Country ZIPcode Interleaving Enter country InterleavingEnter Gender) Enter Gender countryInterleaving Enter gender Interleaving EnterBirthdate) Enter Birthdate Interleaving Enter birthdate InterleavingEnter email) Enter Email Interleaving Enter Email) Enter other info userinfo Interleaving Enter Other Info InterleavingSet Preference) Enter Comments Interleaving Enter Max Budget) Enter Max Budget Interleaving Enter Max Budget) Set Preferences OtherInfo Interleaving Set Preferences) Submit request infoDisabling Submit Request Sequential Enabling withInfo Access Service): task called request” disableat moment execution task entering information.The execution submission request also thatthe parameters are passed system task carry outthe search). Access service RequestSequential Enabling withInfo Access Service SequentialEnabling Info Show Results) Show results ServiceSequential Enabling Info Show Results) XML Schema Definition Description root element schema TaskModel having complextype definition group named allocation task:user/system/interaction/abstract) containing attributefor specifying identifier Task element sub elements attributesfor specification task. Such element thefollowing elements: Description: human-readable task description Precondition: structured precondition taskexecution Postcondition: structured postcondition taskexecution UnaryOperatorGroup: unary operators associated thetask task iterative;Optional: task isoptional) N-aryOperatorGroup: list sub-tasks enclosed bya tag representing n-ary operator ContextOfUse: suitable context carrying out thetask DomainObject: list objects manipulated currenttask addition, following attributes: Identifier: unique task identifier Name: human readable task name Frequency: task execution frequency N-aryOperatorGroup definition choice amongelements representing different n-ary temporal operator. oneof elements definition sub-task list(SubTask type). Such list represented group definesthe task category System, Interaction, Abstract) itstype, according class hierarchy defined metamodel. possible task types have been indicated beforehand. ConditionGroup complex type followingelements: ConditionLiteral, literal value object(represented as different elements) ConditionGroup, expression ofConditionLiterals ConditionGroups mixed), as list ofelements. also operator attribute theboolean operator expression. possible values N-ary temporal operators are thefollowing: Choice Interleaving OrderIndependence Synchronisation Disabling SuspendResume Enabling Parallelism n-ary operators are repesented as tags include theconnected sub-tasks. instance, sequence interactionsub-tasks represented tag tree“Interaction” tags. Complete schema version="1.0" encoding="iso-8859-1"?><xs:schema xmlns="http://www.w3.org/2013/mbui-task-models" elementFormDefault="qualified" targetNamespace="http://www.w3.org/2013/mbui-task-models" xmlns:xs="http://www.w3.org/2001/XMLSchema"> name="TaskModel"> ref="categoryGroup" minOccurs="1" maxOccurs="1"/> name="taskModelID" type="xs:string" use="required" name="Task"> name="Description" type="xs:string" minOccurs="0"/> name="Precondition" type="ConditionGroup" minOccurs="0"/> name="PostCondition" type="ConditionGroup" minOccurs="0"/> ref="UnaryOperatorGroup" minOccurs="0" maxOccurs="1"/> ref="N-aryOperatorGroup" minOccurs="0" maxOccurs="unbounded"/> minOccurs="0" maxOccurs="unbounded" name="ContextOfUse" type="xs:QName" minOccurs="0" maxOccurs="unbounded" name="DomainObject" type="xs:QName" name="Identifier" type="xs:string" use="required" name="Name" type="xs:string" name="Frequency" type="xs:string"/> name="SubTask"> minOccurs="1" maxOccurs="1"> ref="categoryGroup" minOccurs="2" maxOccurs="unbounded"/> name="UnaryOperatorGroup"> name="Optional" type="UnaryOperator" name="Iterative" type="UnaryOperator"/> name="N-aryOperatorGroup"> name="Choice" type="SubTask"/> name="Interleaving" type="SubTask"/> name="OrderIndependence" type="SubTask"/> name="Synchronization" type="SubTask"/> name="Disabling" type="SubTask"/> name="SuspendResume" type="SubTask"/> name="Enabling" type="SubTask"/> name="Parallelism" type="SubTask"/> name="categoryGroup"> type="User" name="User"/> type="System" name="System" type="Interaction" name="Interaction"/> type="Abstract" name="Abstract"/> name="UnaryOperator"> name="value" type="xs:boolean" default="true"/> name="User"> base="Task"> name="predef_type" type="UserTypeEnum"/> name="ext_type" type="xs:string"/> name="System"> base="Task"> name="predef_type" type="SystemTypeEnum"/> name="ext_type" type="xs:string"/> name="Interaction"> base="Task"> name="predef_type" type="InteractionTypeEnum"/> name="ext_type" type="xs:string"/> name="Abstract"> base="Task"> name="predef_type" type="AbstractTypeEnum"/> name="ext_type" type="xs:string"/> structured precondition modeling name="ConditionGroup"> minOccurs="1" maxOccurs="unbounded"> name="ConditionGroup" type="ConditionGroup" ref="ConditionLiteral"/> name="operator" type="LogicOperator" name="ConditionLiteral"> name="ValueLiteral" type="ValueLiteral"/> name="DomainObjectLiteral" type="DomainObjectLiteral"/> name="ValueLiteral"> use="required" name="value" type="xs:string"/> name="DomainObjectLiteral"> use="required" name="domain_object" type="xs:string"/> Simple types name="UserTypeEnum"> base="xs:NMTOKEN"> value="ProblemSolving"/> value="Comparing"/> value="Planning" name="SystemTypeEnum"> base="xs:NMTOKEN"> value="Comparison"/> value="GenerateAlerts"/> value="Feedback" value="Grouping" value="Locate" value="Overview" name="InteractionTypeEnum"> base="xs:NMTOKEN"> value="SingleSelection"/> value="MultipleSelection"/> value="Edit" value="Control" value="Zooming" value="Filtering" value="DetailOnDemand" name="AbstractTypeEnum"> base="xs:NMTOKEN"> value="SearchInformation"/> name="LogicOperator"> base="xs:string"> value="and" id="and" value="or" id="or" value="xor" id="xor" value="contains" id="contains" value="starts" id="starts" value="ends" id="ends" value="gt" id="gt" value="gteq" id="gteq" value="lteq" id="lteq" value="lt" id="lt" value="eq" id="eq" value="neq" id="neq" Operators Languages following table shows operators are supported arange task modelling languages: Table operators used different modellinglanguages Order Independence Choice Concurrency Suspend Deactivation Enabling AMBOSS CPM-GOMS CTT DIANE+ GOMS GTA KMAD LOTOS MAD TADEUS TaOSpec TKS TaskMODL TOMBOLA UAN useML VTMB XUAN References Baron, M.; Lucquiaud, V.;Autard, D. et al.: K-MADe: un environement pour le noyau du modèlede description de l'activité. Proc. 18th French-speakingConference Human-Computer-Interaction, Montreal, Kanada,2006 Biere, M.; Bomsdorf, B.;Szwillus, G.: Specification Simulation Task Models withVTMB. Proc. 17th Annual CHI Conference Human Factorsin Computing Systems, New York, Card, S. K.; Moran, T. P.;Newell, A.: psychology human-computer inter-action. LawrenceErlbaum Associates, Dittmar, A.; Forbrig, P.:Higher-Order Task Models. Proc. 10th Interna-tionalWorkshop Interactive Systems: Design, Specification andVerification, Eijk, P.H.J. van, Vissers,C.A., e Díaz, M. Formal description technique Lotos: results ofthe ESPRIT/SEDOS Project. North-Holland, Gray, P.; England, D.; McGowan,S.: XUAN: enhancing UAN capture tempo-ral relationships amongactions. Proc. Conference People Computers Hix, D.; Hartson, R.: Developinguser ensuring usability product process.New York: John Wiley Sons, John, B.; Kieras, D.: GOMSfamiliy analysis techniques: Tools design evaluation.Carnegie Mellon University School Computer Science, TechnicalReport CMU-CS-94-181, Johnson, P.; Johnson, H.;Waddington, R. et al.: Task-Related Knowledge Structures: Analysis,Modeling Application. Proc. 4th Conference theBritish Computer Society People computers, Meixner, G.; Seißler, M.;Breiner, K.: Model-Driven Useware Engineering, Model-DrivenDevelopment Advanced User Interfaces, Springer, Mistrzyk, T.; Szwillus, G.:Modellierung sicherheitskritischer Kommunikation mitAufgabenmodellen. Paternò, F.: Model-baseddesign evaluation interactive applications. London:Springer, Paternò, F; Santoro, C.;Spano, L. D.; Improving Support Visual Task Modelling, Scapin, D.; Pierret-Golbreich,C.: method task description: MAD. Proc. theConference Work DisplayUnits, Schlungbaum, E.:Knowledge-based Support Task-based User Interface Design inTADEUS. Proc. 16th Annual CHI Conference Human Factors inComputing Systems, Shneiderman, B.:The Eyes Have Task byData Type Taxonomy Information Visualizations. IEEE Symposiumon Visual Languages, Boulder p336-343. Tarby, J. C.; Barthet, M. F.:The Diane+ method. Proc. 2nd Interna-tional Conferenceon Computer-Aided Design User Interfaces, Traettberg, H.:Model-based User Interface Design. PhD thesis, Norwegian Universityof Science Technology, Uhr, H.: Die Definition undAusführung von benutzerspezifischen Webprozes-sen mit TOMBOLA.Konferenz der Gesellschaft für Informatik, Van der Veer, G.; Lenting,B.; Bergevoet, B.: GTA: Groupware task analysis modelingcomplexity. Acta Psychologica, Acknowledgements acknowledge following people contributed thepreparation document: François Beuvens, Paolo Bottoni,Gaëlle Calvary, Joelle Coutaz, Gerrit Meixner, Vivian Motti. 