ILU Requestor HTTP servers WD-ilu-requestor-960307 ILU Requester: Object Services HTTP Servers W3C Informational Draft version: Latest version: Authors: Paul Everitt, Digital Creations<paul@digicool.com> Status document document information W3C members otherinterestedcommunity. document not specify W3C standard kind. Feedback be directed author. list current W3C documents be found Abstract Common Gateway Interface not scaling meet requirementsof today's dynamic, interactive webs. reason, multiple vendors haveproposed C callable APIs. APIs allow authors alleviate performancepenalty CGI, allow tighter integration add-in modules. Unfortunately,this price complexity portability. document new model extending WWW servers. First, HTTPis captured using aninterfacespecification, ambiguities interpretating standards-track document.This interface then implemented particular httpd's API. Finally,all done using standard distributed object model calledILU. Digital Creations' work ourILURequester design shows advantages. paper ILU Requester. Table Contents Introduction Requirements Requester architecture Detailed Description Current Status Implementation Examples Interfaces Performance Analysis Outstanding Issues Future Plans Alternatives References Appendices Author's Info Introduction Applications deployed over World-Wide Web often involve HTTP server integrated legacy information system, custom informationsystem. Common Gateway Interface, CGI, most widely deployedmechanism integrating HTTP servers other information systems, butstudies have shown design not scale performance demands contemporaryapplications.Microsoft states applications API arefive times fasterthan CGI applications. Moreover, CGI applications do not run httpd process. additionto performance penalty, means CGI applications modifiythe behavior httpd's internal operations, such as logging authorization.Finally, CGI viewed as asecurity issueby server operators, due connection user-level shell. current solution use httpd API, such asApache 1.x orNetscape.By using API, have performance increase load decrease running application inthe httpd process, rather starting new process request. Also,the API httpd's own behavior, allowing modify itsoperation. fact, servers Apache implement large portions theirfunctionality, such as ISMAP handling logging, asmodules. Unfortunately, API benefits come price. Running user-writtenmodule inside httpd process possible reliability concerns. instance,when developing requesters, early code regularly lead core dumpsfrom unhandled errors, as as memory leaks. Also, most current servers useeither multiple pre-forked subprocesses separate threads new request. Thus, applications change state, such as simple counter script, have dataconcurrency issues are burden programmer solve. Most importantly, API route casual CGI programmer. Ina recentsurvey, Perl beat C total votes. appearsthat possibilities language-choice C-based API mechanism arerestrictive. Finally, portability CGI applications httpd implementationto be lost API strategy. API differentsyntax, authors be forced know API beforehand. Thus, APIscould become instruments used vendors ensure market retention. elimination scripting API strategy serious issue. Webservices are usually built using scripting languages such as Perl, Python,Tcl, Visual Basic, Rexx, etc. be case because web appsare frequently: quick dirty complex data relationships short-lived written casual programmers essence, genre CGI applications are usually complex enough usetools good rapid prototyping, rarely get past prototype stageand C. address next generation server-extending, developed mechanismbased uniform interface specification HTTP. theHTTP.isl. basing extension mechanismon distributed object protocol ILU, get performance featuresof API strategy shown below), portability simplicity ofCGI. Moreover, permits httpd be extended not only out addressspace, off machine, thus capabilities available only remotenode. true client-server fashion. call extension mechanism ILU Requester. ILU Requester Nutshell Performance API Features API Portability CGI Simplicity CGI Bridge distributed objects Requirements Requester strategy have listed problems current CGI/API situation. Andwe have described ILU Requester architecture. are requirements,and are preferred possibilities? Requirements portable platforms vendors based well-understood industry standards infrastructure uses freely-available, high-quality code base active sustainable development wide choice language not language-based) significant performance win scaleable N clients N servers non-blocking threaded servers Preferences configurable servers adding methods HTTP, implementingthem erase bugs) designed eventual absorption server's code base asa common encapsulation designed also eventually-encapsulated browser objectruntime available messaging standard such as site catalogue, authorizer, logger,gatherer, broker Detailed Description have implemented ILU Requester several platforms, have extendeddevelopment include other interested parties. First, give somebackground, then description. Background December were tasked developing complex WWW service.This service necessitated dynamic language, had state. Yet, wereforced use CGI. Thus, made first implementation using long-runningprocess managed state using dynamic language(Python), asmall script message hit. Over time, found were inventing own client/server protocol.For other reasons, started looking using ILU manageinteractionsbetween processes. Thus, CGI script got surrogate reference anencapsulation stateful system. Still, had performance penalty CGI. April wrotea patch Apache 0.6.5 embedded ILU runtime. had access objects registered URL constructs. served severalproduction systems fall. point, started refer tothis embedded ILU module as requester. August, version Apache was released had API, so startedreworking requester use October had related requesterfor Netsite working Unix partially NT. December, based anew draftof HTTP spec, consolidated feature sets, wrote HTTPISL was comprehensive respect new specification. Also,we started work ILU January year, started standardizing Python creating online services. developed ISL installingobject-based Authorizers Loggers httpd. Case Study: Broadcast Also January, released first major product based architecturecalled Broadcast.This Web-based chat application had primary goal: be veryfast very highly-loaded conditions. design choices were: Perl-based CGI product was replacing started life as perl-based chat. became very popular, least popular enough many simultaneous users wouldload system up too much. suffered startup cost interpreter,the cost reading state disk, design issues multipleprocesses changing state. C-based CGI Same as above, moved C. Still faced problems stateand concurrency. CGI-based requester-daemon service choice solving problem state be have long-runningserver process managed state chat, have skinny requestersthat message chat server CGI over socket. design problemof reincarnating state request. Also, DBMS-like functionfor modifying state, since everything process. However, there still cost starting up CGI requester hit,and socket create/teardown issue. Also, have invented nice littleclient-server system protocol, other. protocol hasto be interpreted wire, using custom parser. Finally, chat daemon be equipped concurrency, else bottleneck. RPC service more elegant version chat daemon strategy be use RPC tothe chat server, either CGI requester API-based requester. Thiswould replace custom protocol, allow API-based requester keep connectionsopen. other hand, have produced system procedure-oriented,rather thanobject-oriented. chose use ILU Requester make generic calls publishedobjects represented chat site's components. allowed have verylow latency avoiding startup costs), expose OO design chat implementation. design choice was valid. Performance fantastic, andload low. Also, using requester strategy, now have many new possibilitesfor application partitioning. Finally, using APIScripting infrastructure, are able add new features very coherent fashion. Description alluded above, entire system based around ILU. get language-independence, cross-process communication, andplatform-independence. goal add abstract object interface httpd uniformway. wrote interface HTTP behaviorof HTTP transaction. then implement interface C mappingit semantics particular httpd's API. implementation iscalled requester, httpd mechanism passingcertain incoming requests ILU published object. architecture interaction browser httpd using same concepts as HTTP. instance, information contained request mapped Request type interfacespecification. requested object Resource, result operation Resource Response. Request Response are types defined interface. Fortunately, because uniform, abstract ISL, services writedo not have know anything about semantics server API.In fact, be possible skip httpd altogether, communicatedirectly published object. objects do canhave multiple representations, communicate HTTP requests, ILUrequests, other request structure. writing service, therefore, have do publish anobject based skeleton code generated interface.Pretty standard stuff here. Then, published object listed inthe httpd's configuration file, incoming requests matching certain URIform be sent requester, make ILU call tothe published object. Also, possible map requester remotely-published objects using ILU's String Binding Handle mechanism. possible bridge httpd services available other platforms. Future ILUmechanisms make process easier. Current Status Implementation writing, have solid requesters based ILU forNetsite Apache. have been tested others, reviewed foroptimizations, passed simple memory leak testers, documented.We are making distributions freely available source, binaryform. Currently, requesters are known work fine Solaris, Digital Unix,Linux, AIX, BSDI. Additionally, have preliminary support NT. Full support waiting finish up work threading ILU. Finally, ILU been reported work OS/2, there work onand Apache implementation platform. threading issue become increasingly important as build moresophisticated systems, especially want have common ORB. However, systems such as Netsite Microsoft's IIS NT, as as Spyglass' server, required requester. because platforms service incoming request as thread,rather passing request isolated process. Thread-safeing therequester thus becoming requirement. have just added support aliasing multiply-published objects inside requester. instance, make request have map" several published objects. mainlyfor performance increase read-only situations. Note be subsumed ILU work multicast. area are working making object systems easier use. have just added HTTP header returned, stating theILU version requester version. are adding support discoverableinterface, using standard built requester. objectwill return catalogue information config file directives, attemptto contact ILU servers listed config file get implemented. API Scripting Making httpd able call distributed objects only half system: have objects be called. have intended system replace CGI as server-extension mechanism. do be nearly as easy create services as CGIis currently. have been working infrastructure publishing requester-capable objects called API Scripting. creating services, are focusing Python, building up atoolset components. have made parts toolset available,and have released demonstration programs load testing modules.Based Python toolset requester, are fielding high-performanceInternet services commercial use. instance, here very simple script Python object echoes contents request: #!/usr/local/bin/python"""Every good module docstrings.This very simple script subclasses Resource, blanks, echoes incoming Requests. then object main loop."""import iluimport wwworb	# toolsetclass ILUforDummies(wwworb.Resource): def GET(self,request,connect): request wwworb.Request(request) response wwworb.Response(`request`) return response POST GET# Create ILU serverilu.CreateServer('paul.demos')# Now, create instance class, passing parameter# name published ILUforDummies('dumb')print nitwit.IluSBH()ilu.RunMainLoop() Note there are really only necessary lines above. put realm CGI ease use. next step make highly-concurrent systems available Python. do are working ILU team thread iluPrmodule. work related work threading ILU kernel. have emerging development group, infrastructurefor documentation, tutorials, bug reports, etc. Examples Interfaces Currently, have stabilized HTTP interface, feel accuratelyrepresents interaction browser client way usefulfor published objects behind httpd. Therefore, are now focusing onproblem-specific First, have discoverable interface online services.For instance, be able go requester-enabled site, senda request published object, get inventory ofthat site. contents inventory vary, support set minimumoperations, extend, change. things aninterfaceallows do over time. discoverable interface being worked There are other interfacesthat have already rolled out. Authorizer ISL Most scripting" services involve persistent Python objects receive requests ILU main loop. services needsome type Access Control List mechanism However, really don't want interface external, httpd-controlled,single-filesystem-based password file. API-based servers have modules already allow store user authentication information SQL table. Yet, already have users defined object system. Moreover, want have someinstance-based authorization mechanism. extend ACL-capabilities httpd, wrote Authorizer interface, implemented APIs support. Thus, toprotected URIs are mapped object call, operation allowed identity. Logger ISL area wanted standardize was intelligent loggingmechanism. Currently, there Common Log File format writing todisk. However, wanted something more structured more dynamic. Thus,we wrote interface logging, mapped httpd's API functions,and created installable logging facility. smart implementation couldpublish object registered successful unsuccessful requeststo document ILU-based requests. there error, decidewhether send page someone's beeper. requests, takethe incoming data structure, write parts miniSQL table. wanted extend httpd's logging facilities new interestingways. instance, wanted do processing take special actions ifan error was raised. Also, wanted investigate logging Unix httpd Windows-based personal DBMS Microsoft Access. do made interface loggging, implemented theAPIs support. mapping forces httpd run object call duringlogging events. interface very simple; just Request object LoggerObject asynchronous method. Onecould then subtype there do more interesting, platform-specific things. Stanford Digital Library Common Object Services Stanford Digital Library team produced implementationsfor CORBA-typeCommon Object Services Common Object Services are objects groupsof objects provide basic requirements most objects need orderto function distributed environment. services are designed begeneric; do not depend type client object type data passed. Note:this hard do ILU since there concept Object type. Other Interfaces There are other good candidates instance, Harvestsystem own protocol collecting indexing information, doingsearches. interface was written, perhaps be moved thisarchitecture. have started other standard such as Data Accessinterface OLE interface Python). though, are not necessarilyrelated ILU Requester, are thus outside scope paper. Performance Analysis be apparent architecture good performance.However, felt performance numbers were important, so cameup performance-testing program, regimen exercise test, used Sparc running Solaris Mb as testing client,and Alpha Mb running Digital Unix as testing server. testprogram was written Python, used httplib thread modules tomake concurrent requests. server was running Netsite, using requesterand ILU had Netsite configured use up processes. then ran series URLs below) series tests:a latency test throughput test. latency test sent series requestson thread, test response time. throughput test dispatched samenumber requests several simultaneous threads, test concurrent use. Thus, thethroughput test attempted detail load, concurrency, andaggregate response time batch requests. URIs, test merely retrieved very short HTML file. others were: simple.sh---------#!/bin/shecho text/html\n\n'echo Hello.simple.pl---------#!/usr/local/bin/perlprint text/html\n\n";print script echo dictionary back."""print text/html\n\n'print script echo dictionary back."""print text/html\n\n'import simple_libsimple_lib.py-------------#!/usr/users/paul/cgipython"""\Simple script echo dictionary back."""import cgif cgi.SvFormContentDict()print f.items()dumb.py-------# Note: echo equivalent simple.py, dumb equivalent simple1.py"""\The simplest, dumbest API script around.This Python program goal: fewest lines interactive script.The script form variables, back, very muchformatting.Note have embedded HTML class, added somecharacters. Normally class be even shorter, as use external representation. be smart, dumb."""import syssys.path.append('wwworb')sys.path.append('interfaces')import string, ilu, wwworbprint ilu.Version# Make class derived Resource class wwworb. Remember# base class parameter be# passed startup call. parameter name# published object.class EchoforDummies(wwworb.Resource): def GET(self,request,connect): return wwworb.Response('Hello.') POST GETclass ILUforDummies(wwworb.Resource): def GET(self,request,connect): request wwworb.Request(request) response wwworb.Response(`request`) return response POST GET# Create ILU serverilu.CreateServer('paul.demos')# Now, create instance class, passing parameter# name published ILUforDummies('dumb')echo EchoforDummies('echo')print nitwit.IluSBH()print echo.IluSBH()ilu.RunMainLoop() scripts were chosen reflect least be done CGI script back string) vs. very little be done incoming request data structures, echo back). Bourne shell script Perl script are thrown as reference points. comparison Python scripts relevant. Python interpreter used CGI scripts was very small. removed nearly everything Modules setup, did not link threads source startup time problems Digital Unix). used Python ILU Thus, comparison Python CGI Python Scripting". tests are simple echo string, slightly-computational parsing incoming information. Obviously, real-world application, files have read, marshals loaded, databases connected-to, tilt scales API scripting, since state always memory. following, HPS hits second, SPH seconds hit, SD standard deviation. Latency test test used runs thread, requests thread: URI Min Max Avg HPS SD Avg SPH SD Throughput test test used runs threads, requests apiece. case, Min Max refer thread completion times: URI Min Max Avg HPS SD Avg SPH SD Understand HPS SPH numbers throughput test reflect ability server service multiple requests simultaneously. Thus, hit effectively done faster. Analysis Looking latency tests, HTML simple CGI scripts are about same HPS. simple scripts don't parse environment, thus do calculation. simple1.py script parse environment imports module rise latency. Yet, API Scripting apps stay same level as HTML simple CGI, even though parsing environment. throughput test, reference point file shows request just over five-fold bump throughput. Certainly not ten-fold, enough show handling simultaneous requests However, CGI scripts start show less benefit. Yet, API Scripting applications stay URI Percent single-threaded HPS consider getting HTML file single-threaded batches be baseline, relation tests. Again, getting HTML file four-fold bump batch. simple Bash CGI script yields three-fold improvement percent) over single-thread HTML batches. simple CGI script environment, run batches, only half aggregate throughput single-threadedHTML request. Thus, concurrent CGI slower single-request HTML. Again, API Scripting applications keep pace baseline. URI % HTML % HTML % HTML rightmost column above, throughput measurement, APIScripting application over times faster equivalentCGI application. conclusion even simple state applications reading theform data, CGI API Scripting latency, significantly inconcurrent use. appear performance win increase evenmore complex applications, especially have initialize state, make connection SQL database. Getting state setup forthese more complicated, increase latency load mean pileups service. caveat testing be noted. more representative sample ofAPI scripting vs. HTML be use ILU C program API C program.This also allow testing HTML vs. CGI vs. straight API C appsvs. ILU Requester objects written C. Outstanding Issues time, movement ILU biggest issue. First,there are minor bugs current prerelease. real issue isembracing new capabilities: poor ILU support bulk data RPC limit) missing data types(soon bealleviatedin Python) investigation Stanford Digital Library's COS above) distributed concurrency threading performance surrogate object references true object inside httpd process more Future Plans have number directions intend pursue internally, asuggested direction industry adoption. Internal plans are: discoverable interface debugging cataloging better performance numbers better story concurrency Industry requirements: Use ILU Integration ILU runtime product Support basic HTTP ISL Use standard Resource, Request, Response mechanism Mapping HTTP spec's error codes HTTP exceptions Ensure safety concurrent requesters running threads orforked daemons optional support: Extensions base HTTP ISL expose advanced functionality withinthe ILU type system Support discoverable objects Connections native ILU protocol Publishing true objects inside httpd high-performance apps Agreement reference implementation suite compliance testingand performance testing Alternatives Many ideas have floated around. Press releases have discussed, instance,embedding Java inside Web servers as better fit APIs. thisdoes get many benefits architecture, language-based, andthus not have language-independent though, view asa benefit. option HORB,which Java-based remote object operation environment. theHORB FAQ: wanted have good language parallel distributed computing.For purposes, however, classic Java very poor functionality. Java becauseit's simple easy. basic idea Java not far C++. C++ also make objects,threads, sockets. Java direct support distributed object processingas C++ not. So decided make new framework parallel distributed computing. Also FAQ, comparison HORB CORBA: CORBA CORBA2 are desinged Interoperability different languagesand different systems. have write interface definitions CORBA IDL languagein addition real code. be annoying casual use. CORBA passinstances. limits programming. CORBA ORB huge comply CORBA standard.Since HORB ORB clients only 20KBytes, modem users wait dynamic loading.Current CORBA systems are very expensive. HORB free charge. stated ademopage, HORB aims CGI socket programming smart remote objectoperations HORB". Windows-based platforms, Microsoft's server-extension solution theirIIS WWW server anSDK. thesample applications API anOLEinterface. References CGI spec, ILU, Python Dan's web API thread www-talk archives releases HTTP.isl Appendices HTTP ISL interface HTTP used extend WWW server mapping thebrowser-server interaction object request. used latest HTTP specification, as mentioned comment. WD-ilu-requestor-960307.html,v jigsaw Exp Proposed HTTP interface Digital Creations Reference: following list headers guaranteed be included withthe request, regardless requester used. list probablyincomplete grow as become more familiar requestersother NetSite:In IP address remote client	"remote-name" name remote clinet, IPaddress name be determined*)INTERFACE http;TYPE field-name ilu.CString;TYPE field-value ilu.CString;TYPE optional-field-value OPTIONAL field-value;TYPE RequestURI ilu.CString;(* handle URI parsing???TYPE RequestURI RECORD	scheme ilu.CString,	net_loc ilu.CString,	path ilu.CString,	params ilu.CString,	query ilu.CString,	fragment ilu.CString END;*)TYPE Header RECORD	name field-name,	value optional-field-value END;TYPE HTTPHeader Header;TYPE HTTPHeaders SEQUENCE HTTPHeader;TYPE EntityBody SEQUENCE BYTE;TYPE OptionalEntityBody OPTIONAL EntityBody;TYPE Request RECORD	URI RequestURI,	headers HTTPHeaders,	body OptionalEntityBody END;TYPE StatusCode ENUMERATION	OK END;TYPE Response RECORD	status StatusCode,	headers HTTPHeaders,	body OptionalEntityBodyEND;TYPE ConnectionParameter Header;TYPE Connection SEQUENCE ConnectionParameter;TYPE Resource OBJECT METHODS	GET Request, connection: Connection) Response,	HEAD Request, connection: Connection) Response,	POST Request, connection: Connection) Response END;TYPE OptionalResource OPTIONAL Resource; Logger ISL WD-ilu-requestor-960307.html,v jigsaw Exp thought about just eliminating ISL using HTTP do logging, sticking now allow logging be asynchronous. Comments? following list are name-value pairs be containedin headers separate requesters include own uniqueheaders, various clients send different headers shouldbe passed along here):	"content-length" length bytes returned data	"content-type" mime type returned data	"method" method request	"remote-ip" IP address remote client	"remote-name" name remote client, IP address name be determined	"status" status code response	"uri" URI request*)	INTERFACE logger IMPORTS ilu, http END;TYPE LoggerObject OBJECT METHODS ASYNCHRONOUS LogRequest(params: http.HTTPHeaders) END; Authorizer ISL WD-ilu-requestor-960307.html,v jigsaw Exp authorize IMPORTS http END;TYPE NameType ilu.CString;TYPE GroupList SEQUENCE ilu.CString;EXCEPTION AuthenticationFailed;EXCEPTION Forbidden;EXCEPTION AuthorizationRequired: ilu.CString;TYPE AuthorizationRecord RECORD name: ilu.CString, groups: GroupListEND;TYPE OptionalAuthorizationRecord OPTIONAL AuthorizationRecord;TYPE Authenticator OBJECT METHODS AuthenticateUser(name: NameType, password: ilu.CString): AuthorizationRecord AuthenticationFailed END END;TYPE Authorizer OBJECT METHODS AuthorizeUser(authorization-record: OptionalAuthorizationRecord) Forbidden, AuthorizationRequired END END; Author Info Paul Everitt Vice President Digital Creations. email addressis 