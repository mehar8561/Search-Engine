XPath XQuery Functions Operators XPath XQuery Functions andOperators W3C Recommendation08 April version: Latest version XPath XQuery Functions Operators3.0: Previous versions XPath XQuery Functions Operators3.0: Most recent version XPath XQuery Functions Operators3: Most recent Recommendation XPath XQuery Functions andOperators: Editor: Michael Kay WG), Saxonica check errata errors issues reported sincepublication. also translations. document also available non-normative formats:XML Changemarkings relative previous edition. Copyright W3CÂ®(MIT, ERCIM,Keio, Beihang), Rights Reserved. W3Cliability,trademarkand documentuse rules apply. Abstract Change markings are relative Recommendation January2007. document constructor functions, operators, andfunctions datatypes defined Part Datatypes Second Edition] datatypesdefined XPath DataModel also functions operators onnodes node sequences as defined XPath Data Model functions operators are defined use Path Language XML Query Language] Transformations Version otherrelated XML standards. signatures summaries functionsdefined document are available third version specification functionlibrary. first version was included as intrinsic part Path Language Version published November second version waspublished title XQuery XPath Functionsand Operators January subsequently revised asecond edition published December third version isthe first carry own version number, been set align version numbering XPath, XQuery, andXSLT. Status Document section status document thetime publication. Other documents supersede thisdocument. list current W3C publications latestrevision technical report be found W3C technical reports index athttp://www.w3.org/TR/. document set documents have beenprogressed Recommendation together XQueryX Data Model Functions Operators andSerialization Recommendationof W3C. was jointly developed W3C XML Query Working Group theW3C XSLT Working Group,each part XML Activity. Recommendation XPath XQuery Functions Operators3.0 second version aprevious W3C Recommendation. specification designed be referenced normatively fromother specifications defining host language notintended be implemented outside host language. Theimplementability specification been tested thecontext normative inclusion host languages defined theXQuery XSLT3.0 specifications; implementation report future, WGs expectthat there also be possibly member-only XSLT report) details. document minor changes made theProposedRecommendation October Changes documentsince ProposedRecommendation are detailed EChanges since previous Recommendation. report errors document using W3C's public Bugzilla system(instructions be found access system not feasible, send yourcomments W3C XSLT/XPath/XQuery public comments mailing list,public-qt-comments@w3.org.It be very helpful include string thesubject line report, made Bugzilla email.Please use multiple Bugzilla entries necessary, multipleemail messages) have more comment make. Archivesof comments responses are available document been reviewed W3C Members, softwaredevelopers, other W3C groups interested parties, isendorsed Director as W3C Recommendation. stabledocument be used as reference material cited fromanother document. W3C's role making Recommendation todraw attention specification promote widespreaddeployment. functionality interoperability ofthe Web. document was produced groups operating W3C Patent Policy. W3C publiclist patent disclosures made connection thedeliverables XML Query Working Group also apubliclist patent disclosures made connection thedeliverables XSL Working Group; pages also includeinstructions disclosing patent. individual actualknowledge patent individual containsEssential Claim(s) disclose information accordancewith section W3C Patent Policy. QuickContents abs acos add-dayTimeDurations add-dayTimeDuration-to-date add-dayTimeDuration-to-dateTime add-dayTimeDuration-to-time add-yearMonthDurations add-yearMonthDuration-to-date add-yearMonthDuration-to-dateTime adjust-dateTime-to-timezone adjust-date-to-timezone adjust-time-to-timezone analyze-string asin atan atan2 available-environment-variables avg base64Binary-equal base-uri boolean boolean-equal boolean-greater-than boolean-less-than ceiling codepoint-equal codepoints-to-string collection compare concat concatenate cos count current-date current-dateTime current-time data date-equal date-greater-than date-less-than dateTime dateTime-equal dateTime-greater-than dateTime-less-than day-from-date day-from-dateTime days-from-duration dayTimeDuration-greater-than dayTimeDuration-less-than deep-equal default-collation distinct-values divide-dayTimeDuration divide-dayTimeDuration-by-dayTimeDuration divide-yearMonthDuration divide-yearMonthDuration-by-yearMonthDuration doc doc-available document-uri duration-equal element-with-id empty encode-for-uri ends-with environment-variable error escape-html-uri exactly-one exp exp10 false filter floor fold-left fold-right format-date format-dateTime format-integer format-number format-time function-arity function-lookup function-name gDay-equal generate-id gMonthDay-equal gMonth-equal gYear-equal gYearMonth-equal head hexBinary-equal hours-from-dateTime hours-from-duration hours-from-time id idref implicit-timezone index-of innermost insert-before intersect iri-to-uri lang last local-name local-name-from-QName log log10 lower-case matches max min minutes-from-dateTime minutes-from-duration minutes-from-time month-from-date month-from-dateTime months-from-duration multiply-dayTimeDuration multiply-yearMonthDuration name namespace-uri namespace-uri-for-prefix namespace-uri-from-QName nilled node-after node-before node-name normalize-space normalize-unicode not NOTATION-equal number numeric-add numeric-divide numeric-equal numeric-greater-than numeric-integer-divide numeric-less-than numeric-mod numeric-multiply numeric-subtract numeric-unary-minus numeric-unary-plus outermost parse-xml parse-xml-fragment path pi position pow prefix-from-QName QName QName-equal remove replace resolve-QName resolve-uri reverse root round round-half-to-even seconds-from-dateTime seconds-from-duration seconds-from-time serialize sin sqrt starts-with static-base-uri string string-join string-length string-to-codepoints subsequence substring substring-after substring-before subtract-dates subtract-dateTimes subtract-dayTimeDuration-from-date subtract-dayTimeDuration-from-dateTime subtract-dayTimeDuration-from-time subtract-dayTimeDurations subtract-times subtract-yearMonthDuration-from-date subtract-yearMonthDuration-from-dateTime subtract-yearMonthDurations sum tail tan time-equal time-greater-than time-less-than timezone-from-date timezone-from-dateTime timezone-from-time tokenize trace translate true union unordered unparsed-text unparsed-text-available unparsed-text-lines upper-case uri-collection year-from-date year-from-dateTime yearMonthDuration-greater-than yearMonthDuration-less-than years-from-duration Table Contents Introduction Conformance Namespaces prefixes Functionoverloading Functionsignatures descriptions Typesystem Terminology Strings, characters, andcodepoints Namespaces URIs Conformance terminology Properties functions Accessors fn:node-name fn:nilled fn:string fn:data fn:base-uri fn:document-uri Errors anddiagnostics Raisingerrors fn:error Diagnostictracing fn:trace Functions operators onnumerics Numerictypes Arithmeticoperators numeric values op:numeric-add op:numeric-subtract op:numeric-multiply op:numeric-divide op:numeric-integer-divide op:numeric-mod op:numeric-unary-plus op:numeric-unary-minus Comparisonoperators numeric values op:numeric-equal op:numeric-less-than op:numeric-greater-than Functions numeric values fn:abs fn:ceiling fn:floor fn:round fn:round-half-to-even Parsingnumbers fn:number Formatting integers fn:format-integer Formatting numbers Defining decimal format fn:format-number Syntax picture string Analysing picture string Formatting number Trigonometricand exponential functions math:pi math:exp math:exp10 math:log math:log10 math:pow math:sqrt math:sin math:cos math:tan math:asin math:acos math:atan math:atan2 Functions strings Stringtypes Functions assemble anddisassemble strings fn:codepoints-to-string fn:string-to-codepoints Comparison ofstrings Collations Unicode Codepoint Collation Choosing collation fn:compare fn:codepoint-equal Functions string values fn:concat fn:string-join fn:substring fn:string-length fn:normalize-space fn:normalize-unicode fn:upper-case fn:lower-case fn:translate Functions based substringmatching fn:contains fn:starts-with fn:ends-with fn:substring-before fn:substring-after Stringfunctions use regular expressions Regular expression syntax fn:matches fn:replace fn:tokenize fn:analyze-string Functions manipulateURIs fn:resolve-uri fn:encode-for-uri fn:iri-to-uri fn:escape-html-uri Functions operators Booleanvalues Booleanconstant functions fn:true fn:false Operators onBoolean values op:boolean-equal op:boolean-less-than op:boolean-greater-than Functions Boolean values fn:boolean fn:not Functions operators ondurations Twototally ordered subtypes duration xs:yearMonthDuration xs:dayTimeDuration Comparisonoperators durations op:yearMonthDuration-less-than op:yearMonthDuration-greater-than op:dayTimeDuration-less-than op:dayTimeDuration-greater-than op:duration-equal Component extraction functions ondurations fn:years-from-duration fn:months-from-duration fn:days-from-duration fn:hours-from-duration fn:minutes-from-duration fn:seconds-from-duration Arithmetic operators durations op:add-yearMonthDurations op:subtract-yearMonthDurations op:multiply-yearMonthDuration op:divide-yearMonthDuration op:divide-yearMonthDuration-by-yearMonthDuration op:add-dayTimeDurations op:subtract-dayTimeDurations op:multiply-dayTimeDuration op:divide-dayTimeDuration op:divide-dayTimeDuration-by-dayTimeDuration Functions operators dates andtimes Date andtime types Limits precision Date/timedatatype values Examples Constructing dateTime fn:dateTime Comparisonoperators duration, date time values op:dateTime-equal op:dateTime-less-than op:dateTime-greater-than op:date-equal op:date-less-than op:date-greater-than op:time-equal op:time-less-than op:time-greater-than op:gYearMonth-equal op:gYear-equal op:gMonthDay-equal op:gMonth-equal op:gDay-equal Component extraction functions ondates times fn:year-from-dateTime fn:month-from-dateTime fn:day-from-dateTime fn:hours-from-dateTime fn:minutes-from-dateTime fn:seconds-from-dateTime fn:timezone-from-dateTime fn:year-from-date fn:month-from-date fn:day-from-date fn:timezone-from-date fn:hours-from-time fn:minutes-from-time fn:seconds-from-time fn:timezone-from-time Timezoneadjustment functions dates time values fn:adjust-dateTime-to-timezone fn:adjust-date-to-timezone fn:adjust-time-to-timezone Arithmetic operators durations, dates andtimes Limits precision op:subtract-dateTimes op:subtract-dates op:subtract-times op:add-yearMonthDuration-to-dateTime op:add-dayTimeDuration-to-dateTime op:subtract-yearMonthDuration-from-dateTime op:subtract-dayTimeDuration-from-dateTime op:add-yearMonthDuration-to-date op:add-dayTimeDuration-to-date op:subtract-yearMonthDuration-from-date op:subtract-dayTimeDuration-from-date op:add-dayTimeDuration-to-time op:subtract-dayTimeDuration-from-time Formatting dates times fn:format-dateTime fn:format-date fn:format-time date/time formattingfunctions Examples date timeformatting Functions related QNames Functions create QName fn:resolve-QName fn:QName Functionsand operators related QNames op:QName-equal fn:prefix-from-QName fn:local-name-from-QName fn:namespace-uri-from-QName fn:namespace-uri-for-prefix fn:in-scope-prefixes Operators base64Binary andhexBinary Comparisons base64Binary andhexBinary values op:hexBinary-equal op:base64Binary-equal Operators NOTATION op:NOTATION-equal Functions operators onnodes fn:name fn:local-name fn:namespace-uri fn:lang op:is-same-node op:node-before op:node-after fn:root fn:path fn:has-children fn:innermost fn:outermost Functions operators onsequences Generalfunctions operators sequences op:concatenate fn:empty fn:exists fn:head fn:tail fn:insert-before fn:remove fn:reverse fn:subsequence fn:unordered Functions compare values insequences fn:distinct-values fn:index-of fn:deep-equal Functions test cardinality ofsequences fn:zero-or-one fn:one-or-more fn:exactly-one Union, intersection anddifference op:union op:intersect op:except Aggregate functions fn:count fn:avg fn:max fn:min fn:sum Functions operators thatgenerate sequences op:to Functions node identifiers fn:id fn:element-with-id fn:idref fn:generate-id Functionsgiving access external information fn:doc fn:doc-available fn:collection fn:uri-collection fn:unparsed-text fn:unparsed-text-lines fn:unparsed-text-available fn:environment-variable fn:available-environment-variables Parsing serializing fn:parse-xml fn:parse-xml-fragment fn:serialize Context functions fn:position fn:last fn:current-dateTime fn:current-date fn:current-time fn:implicit-timezone fn:default-collation fn:static-base-uri Higher-orderfunctions Functions functions fn:function-lookup fn:function-name fn:function-arity Basichigher-order functions fn:for-each fn:filter fn:fold-left fn:fold-right fn:for-each-pair Constructor functions Constructor functions forXML Schema built-in atomic types Constructor functions xs:QNameand xs:NOTATION Constructor functionsfor XML Schema built-in list types Constructor functionsfor XML Schema built-in union types Constructorfunctions user-defined types Casting Casting primitive typesto primitive types Casting xs:string andxs:untypedAtomic Casting numeric types Casting duration types Casting date time types Casting xs:boolean Casting xs:base64Binary andxs:hexBinary Casting xs:anyURI Casting xs:QName andxs:NOTATION Casting xs:ENTITY Casting xs:string andxs:untypedAtomic Casting involving non-primitivetypes Casting derived types Casting derived types toparent types Casting branch typehierarchy Casting typehierarchy Casting union types Casting list types Appendices References A.1 Normativereferences A.2 Non-normative references B Error summary C Illustrative user-written functions(Non-Normative) C.1 eg:if-empty eg:if-absent C.1.1 eg:if-empty C.1.2 eg:if-absent C.2 Union, intersection anddifference sequences values C.2.1 eg:value-union C.2.2 eg:value-intersect C.2.3 eg:value-except C.3 eg:index-of-node C.4 eg:string-pad C.5 eg:distinct-nodes-stable C.6 Findingminima maxima C.6.1 eg:highest C.6.2 eg:lowest C.7 Sorting D Checklist implementation-definedfeatures E Changes since previous Recommendation(Non-Normative) E.1 Substantive changes December2009) E.2 Substantive changes June2012) E.3 Substantive changes E.4 Substantive changes CandidateRecommendation) E.5 Editorialchanges E.6 Changessince Proposed Recommendation F Compatibility PreviousVersions F.1 Compatibility XPath XPath1.0 F.2 Compatibility XPath Introduction purpose document catalog functions andoperators required XPath XQuery XSLT Theexact syntax used call functions operators isspecified Path Language XML QueryLanguage] Transformations document constructor functions functions thattake typed values as arguments. functions specify thesemantics operators defined PathLanguage AnXML Query Language]. Schema Part Datatypes SecondEdition] number primitive derived datatypes,collectively known as built-in datatypes. document definesfunctions operations datatypes as as thedatatypes defined Section SchemaInformation DM30 XPath Data Model functions operations are defined use Path Language XML Query Language] Transformations Version relatedXML standards. document also functions operatorson nodes node sequences as defined XPath Data Model use Path Language XML Query Language] Transformations Version andother related XML standards. Part thedata types defined Schema Part Second Edition]. new derived typexs:dateTimeStamp, as built-intypes types xs:yearMonthDuration andxs:dayTimeDuration were previously XDM additionsto type system. addition, XSD updates manyaspects definitions existing data types: example,it value space xs:double allow bothpositive negative lexical space allow+INF; value space ofxs:Name permit additional Unicode characters; itallows year leap seconds inxs:dateTime values; character stringto appear as value xs:anyURI item.Implementations specification supporteither XSD XSD References specific sections above documentsare indicated cross-document links document. suchlink pointer specific section followed asuperscript specifying linked document. superscripts havethe following meanings: AnXML Query Language], Version Path Language XPath Data Model Conformance Functions Operators specification intended primarilyas component be used other specifications. Therefore,Functions Operators specifications use Path Language Transformations Version XML Query Language]) tospecify conformance criteria respective environments. Authors conformance criteria use Functions andOperators pay particular attention followingfeatures: version Unicode supported, itis recommended most recent version Unicode be used. type system based XML Schema1.0 XML Schema Support XML XML datatypes used inFunctions Operators. Note: XML Schema recommendation new concretedata type: xs:dateTimeStamp; also thetypes xs:dayTimeDuration,xs:yearMonthDuration, andxs:anyAtomicType were previously defined as partof XPath Data Model Furthermore, XSD option supportingrevised definitions types such as xs:NCName basedon rules XML rather document, text labeled as example as Note isprovided explanatory purposes not normative. prefixes functions operators defined document arecontained several namespaces XML]) referenced using anxs:QName. document uses conventional prefixes refer thesenamespaces. User-written applications choose different prefixto refer namespace, so long as bound correctURI. host language also define default namespace forfunction calls, case function names namespace neednot be prefixed many cases default namespace behttp://www.w3.org/2005/xpath-functions, allowing acall fn:name function(for example) be written as name() rather thanfn:name(); document,however, example function calls are explicitly prefixed. URIs namespaces conventional prefixesassociated are: constructors xs. section Constructorfunctions constructor functions built-indatatypes defined Schema Part Second Edition] Section SchemaInformation DM30 XPath Data Model datatypes corresponding constructor functions are inthe XML Schema namespace,http://www.w3.org/2001/XMLSchema, are named inthis document using xs prefix. forfunctions associated fn. namespace prefix used document most functionsthat are available users fn. forfunctions associated math. namespace used mathematical functions. Thenamespace prefix used document functions ismath. functions are available users inexactly same way as fn namespace. associated witherr. There are functions namespace; used errorcodes. document uses prefix err represent thenamespace URI whichis namespace XPath XQuery error codes messages.This namespace prefix not predeclared use thisdocument not normative. Note: namespace URI associated err prefix isnot expected change version document toanother. contents namespace be extended allowadditional errors be returned. output. There are functions namespace: used forserialization parameters, as described XQuery Serialization3.0] Functions defined op prefix are describedhere underpin definitions operators Path Language XML Query Language] Transformations Version Thesefunctions are not available directly users, there norequirement implementations actually provide thesefunctions. reason, namespace associated theop prefix. example, multiplication generallyassociated operator, described asa function document: fn:numeric-multiply($arg1 as numeric,$arg2 as numeric) as numeric overloading general, specifications named above do not supportfunction overloading sense functions have multiplesignatures same name same number parameters arenot supported. Consequently, there are such overloaded functionsin document legacy PathLanguage Version functions such as fn:string, singleparameter variety types. addition, be notedthat functions defined 4Functions operators numerics acceptnumeric parameters accept arguments typexs:integer, xs:decimal,xs:float xs:double. Function signatures anddescriptions. Operators such as be overloaded. Thisdocument define functions more signaturewith same name different number parameters. User-definedfunctions more signature same name anddifferent number parameters are also supported. Functionsignatures descriptions function defined specifying signature, adescription return type parameters itssemantics. many functions, examples are included illustratetheir use. function's signature presented form fn:function-name($parameter-name as parameter-type,...) as return-type notation, function-name, bold-face, thename function signature being specified. thefunction parameters, then name followed emptyparameter list: otherwise, name followedby parenthesized list parameter declarations, declarationspecifies static type parameter, italics, adescriptive, non-normative, name. there are moreparameter declarations, are separated comma. Thereturn-type also italics, thestatic type value returned function. dynamic typeof value returned function same as statictype derived static type. parameter types andreturn types are specified using SequenceType notation definedin Section2.5.4 SequenceType Syntax XP30. function, fn:concat,has variable number arguments more). More strictly,there infinite set functions having name fn:concat, arity ranging from2 infinity. special case, single function signatureis given, ellipsis indicating indefinite number ofarguments. cases word numeric used infunction signatures as shorthand indicate numerictypes: xs:integer, xs:decimal,xs:float xs:double. example, afunction signature: fn:numeric-function($arg as numeric) as following function signatures: fn:numeric-function($arg as xs:integer) as fn:numeric-function($arg as xs:decimal) as fn:numeric-function($arg as xs:float) as fn:numeric-function($arg as xs:double) as most functions there initial paragraph describing whatthe function followed semantic rules. rules are meantto be followed order appear document. function name QName as defined Schema Part Datatypes Second Edition]and adhere syntactic conventions. Following theprecedent set Path Language function names are generally composed Englishwords separated hyphens function name Schema Part Datatypes SecondEdition] datatype name, have intercapitalized spellingand used function name as such. example, fn:timezone-from-dateTime. Rules passing parameters operators are described therelevant sections XML QueryLanguage] Path Language example, rules passing parameters toarithmetic operators are described Section Expressions XP30.Specifically, rules parameters typexs:untypedAtomic empty sequence are specifiedin section. customary, parameter type name thefunction operator arguments type, typesderived position. called subtypesubstitution Section2.5.5 SequenceType Matching XP30). Inaddition, numeric type instances instances typexs:anyURI be promoted produce argument ofthe required type. Section B.1 TypePromotion XP30). Subtype Substitution: derived type substitute forits base type. particular, xs:integer be usedwhere xs:decimal expected. Numeric Type Promotion: xs:decimal bepromoted xs:float xs:double.Promotion xs:double be done directly, notvia xs:float, avoid loss precision. anyURI Type Promotion: value typexs:anyURI be promoted typexs:string. functions accept single value empty sequence as anargument return single value empty sequence.This indicated function signature following theparameter return type name question mark:"?", indicating either single value theempty sequence appear. below. fn:function-name($parameter-name as parameter-type?) as return-type? Note function signature different signaturein parameter omitted. example, twosignatures fn:string.In first signature, parameter omitted argumentdefaults context item, referred as secondsignature, argument be present be emptysequence, written as functions accept sequence more values as anargument. indicated following name type ofthe items sequence sequence maycontain more items named type. example, thefunction below sequence xs:double andreturns xs:double empty sequence. fn:median($arg as xs:double*) as xs:double? Type system diagrams below show nodes, function items, primitivesimple types, user defined types fit together typesystem. type system distinct hierarchies thatboth include primitive simple types. diagrams,connecting lines represent relationships derived types andthe types are derived; arrowheads point towardthe type are derived. dashed line representsrelationships not present diagram, appear oneof other diagrams. Dotted lines represent additionalrelationships follow evident pattern. information thatappears diagram recapitulated tabular form. xs:IDREFS, xs:NMTOKENS, andxs:ENTITIES types user-defined list andunion types are special types types are listsor unions rather types derived extension orrestriction. first diagram corresponding table illustrate therelationship various item types. Item types data modelform lattice rather hierarchy: relationship definedby derived-from(A, B) function, types arederived more other type. Examples include functions(function(xs:string) as xs:int substitutable forfunction(xs:NCName) as xs:int also forfunction(xs:string) as xs:decimal), union types(A substitutable union(A, B) andalso union(A, C). XDM, item types include nodetypes, function types, built-in atomic types. diagram,which shows only hierarchic relationships, therefore asimplification full model. table, type name indented derived fromthe type name nearest above less level ofindentation. item xs:anyAtomicType function(*) function(item()*) as item()* function(item()*) as item() function(item()*) as item()? function(item()*, item()*) as item()* node attribute user-definedattribute types comment document user-defineddocument types element user-definedelement types namespace processing-instruction text next diagram table illustrate type" typehierarchy, types are derived distinguished typexs:anyType. table, type name indented derived fromthe type name nearest above less level ofindentation. xs:anyType user-definedcomplex types xs:untyped xs:anySimpleType user-definedlist union types xs:IDREFS xs:NMTOKENS xs:ENTITIES xs:anyAtomicType final diagram table show atomic types,including primitive simple types built-in types derivedfrom primitive simple types. built-indatatypes defined Schema Part Second Edition] as as totally orderedsubtypes duration defined totally ordered subtypes duration. table, type name indented derived fromthe type name nearest above less level ofindentation. xs:untypedAtomic xs:dateTime xs:dateTimeStamp xs:date xs:time xs:duration xs:yearMonthDuration xs:dayTimeDuration xs:float xs:double xs:decimal xs:integer xs:nonPositiveInteger xs:negativeInteger xs:long xs:int xs:short xs:byte xs:nonNegativeInteger xs:unsignedLong xs:unsignedInt xs:unsignedShort xs:unsignedByte xs:positiveInteger xs:gYearMonth xs:gYear xs:gMonthDay xs:gDay xs:gMonth xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY xs:boolean xs:base64Binary xs:hexBinary xs:anyURI xs:QName xs:NOTATION Terminology terminology used describe functions operators Schema Part Datatypes SecondEdition] defined body specification. Theterms defined section are used building thosedefinitions Strings, characters, andcodepoints document uses terms string,character, codepoint thefollowing meanings: character instance ofthe CharXMLproduction Markup Language Edition)]. Note: definition Unicode characters surrogateblocks as as xFFFE xFFFF, including characters withcodepoints greater xFFFF programming languagestreat as characters. valid characters are defined theircodepoints, include codepoints have not beenassigned Unicode consortium character. string sequence ormore equivalently, value value spaceof xs:string data type. codepoint non-negativeinteger assigned Unicode consortium, reserved forfuture assignment character. Note: set codepoints thus wider set ofcharacters. specification spells as word; Unicodespecification spells as point". Equivalent terms found inother specifications are number" position". See[Character Model World Wide Web terms appear so frequently, are hyperlinkedto definition only there particular desire drawthe reader's attention definition; absence ahyperlink not mean term being used othersense. version Standard] supported, recommended themost recent version Unicode be used. explicitly stated, xs:string valuesreturned functions document are not normalized inthe sense Model World WideWeb Fundamentals]. Notes: functions involve character counting such as fn:substring, fn:string-length andfn:translate, iscounted number XML thestring equivalently, number Unicode codepoints). Someimplementations represent codepoint above xFFFF using two16-bit values known as surrogate pair. surrogate pair counts asone character, not Namespaces URIs document uses phrase URI" identify theconcept identified XML]as name", phrase name" identify theconcept identified XML]as part". also uses term defined below. expanded-QName pairof values consisting namespace URI local name. Theybelong value space SchemaPart Datatypes Second Edition] datatypexs:QName. document toxs:QName always mean value space, i.e. anamespace URI, local name pair not lexical space referringto constructs form prefix:local-name). term URI used as specification, termURI Universal Resource Identifiers as defined extended new name IRI. termURI Reference, otherwise stated, stringin lexical space xs:anyURI datatype asdefined Schema Part DatatypesSecond Edition]. Note: Note means, practice, specificationrequires Reference", IRI as defined be accepted, provided otherrelevant specifications also permit IRI. term URI beenretained preference IRI avoid introducing new names forconcepts such as URI" are defined referenced acrossthe whole family XML specifications. Note also thedefinition xs:anyURI wider definition thedefinition example itdoes not require non-ASCII characters be escaped. Conformance terminology forcompatibility feature specification included ensure thatimplementations use feature remain compatible Path Language Version Conforming documents processors are permitted neednot, behave as described. Conforming documents processors are required behave asdescribed; otherwise, are either non-conformant else inerror. Possibly differing implementations, specified anddocumented implementor particularimplementation. Possibly differing implementations, not specified bythis other W3C specification, not required be specifiedby implementor particular implementation. Properties functions section concerned question callson function, same arguments, produce differentresults. function calls are said tobe same execution scope host environmentdefines as such. XSLT, calls executed thesame transformation are same execution scope. XQuery, anytwo calls executed evaluation top-level expressionare same execution scope. other contexts, executionscope specified host environment thefunction library. following definition more precisely meansfor function calls return same result: values are defined beidentical contain same number items theitems are pairwise identical. items are identical onlyif following conditions items are atomic values, precisely same type, andthe values are equal as defined using eq operator,using Unicode codepoint collation comparing strings items are nodes, represent same node items are function items, have same name name), arity, function signature, closure. there function operator defined specificationthat tests function items are identical.) functions produce results depend not only theirexplicit arguments, also static dynamic context. function have theproperty being context-dependent: result such afunction values properties static anddynamic evaluation context as as actual suppliedarguments function notÂ·context-dependentÂ·is called context-independent. function context-dependent be used as namedfunction reference, be partially applied, be foundusing fn:function-lookup. Theprinciple such cases static context used thefunction evaluation taken static context namedfunction reference, partial function application, call onfn:function-lookup; andthe dynamic context function evaluation taken thedynamic context evaluation named function reference,partial function application, call fn:function-lookup. Ineffect, static dynamic part context thus act as partof closure function item. Context-dependent functions fall number ofcategories: functions fn:current-date, fn:current-dateTime,fn:current-time,fn:implicit-timezone,fn:adjust-date-to-timezone,fn:adjust-dateTime-to-timezone,and fn:adjust-time-to-timezonedepend properties dynamic context are fixed withinthe same numberof functions op: namespace manipulatedates times make use implicit timezone. Thesefunctions return same result called repeatedly asingle number functions including fn:base-uri#0, fn:data#0, fn:document-uri#0, fn:position, fn:last, fn:id#1, fn:idref#1, fn:element-with-id#1,fn:lang#1, fn:local-name#0, fn:name#0, fn:namespace-uri#0, fn:normalize-space#0,fn:number#0, fn:root#0, fn:string#0, fn:string-length#0, andfn:path#0 depend thefocus. functions general return different results ondifferent calls focus different. function isfocus-dependent result focus context item, position, size). function notÂ·focus-dependentÂ· iscalled focus-independent function fn:default-collation andmany string-handling operators functions depend defaultcollation collations, are properties ofthe static context. particular call functionsis evaluated twice same arguments then return thesame result time static context, definition,does not change run time). However, distinct calls calls function appearing different places thesource code) produce different results even explicitarguments are same. Functions such as fn:static-base-uri,fn:doc, fn:collection depend otheraspects static context. functions depend oncollations, single call produce same results eachcall explicit arguments are same, callsappearing different places source code producedifferent results. fn:function-lookupfunction special case because potentially dependent oneverything static dynamic context. because thestatic dynamic context call fn:function-lookup areused as static dynamic context function thatfn:function-lookupreturns. parts context are referredto as implicit arguments. function guaranteedto produce results repeated calls asingle explicit andimplicit arguments are identical referred asdeterministic. function notÂ·deterministicÂ· isreferred as nondeterministic. functions defined specification are otherwise stated. Exceptions include following: functions as fn:distinct-values andfn:unordered) produceresults order. such cases there guaranteethat order results different calls be same.These functions are said be non-deterministic respect toordering. function fn:analyze-stringconstructs element node represent results. There noguarantee repeated calls same arguments returnthe same identical node sense isoperator). However, non-identical nodes are returned, theircontent be same sense fn:deep-equal function. Such afunction said be non-deterministic respect nodeidentity. functions as fn:doc fn:collection) create new nodesby reading external documents. Such functions are guaranteed beÂ·deterministicÂ· withthe exception implementation allowed make themnon-deterministic as user option. results function are described as being agreater lesser extent) not remove therequirement results be deterministic: thatrepeated calls same explicit implicit argumentsmust return identical results. Accessors Accessors semantics are described XPath Data Model accessors are exposed user thefunctions described below. Function Accessor Returns fn:node-name node-name optional node xs:QName fn:nilled nilled node optional xs:boolean fn:string string-value optional item argument xs:string fn:data typed-value more items sequence atomic values fn:base-uri base-uri optional node argument xs:anyURI fn:document-uri document-uri optional node xs:anyURI Summary Returns name node, as xs:QName. Signatures fn:node-name() as xs:QName? fn:node-name($arg as node()?) as xs:QName? Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. empty sequence, empty sequenceis returned. Otherwise, function returns result thedm:node-name accessor as defined XPath Data Model Section5.11 node-name Accessor DM30). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes element attribute nodes, name node isreturned as xs:QName, retaining prefix,namespace URI, local part. processing instructions, name node returned asan xs:QName prefix namespace URI areabsentDM30. namespace node, function returns empty sequence ifthe node default namespace; otherwise returns anxs:QName prefix namespace URI areabsentDM30and local part namespace prefix being bound). other kinds node, function returns emptysequence. fn:nilled Summary Returns true element nilled. Signatures fn:nilled() as xs:boolean fn:nilled($arg as node()?) as xs:boolean? Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. empty sequence, function returnsthe empty sequence. Otherwise function returns result thedm:nilled accessor as defined XPath Data Model Section Accessor DM30). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes not element node, functionreturns empty sequence. untyped element node, functionreturns false. practice, function returns true only anelement node attribute xsi:nil="true" andthat successfully validated schema theelement be nillable; detailed rules, however, are defined XPath Data Model fn:string Summary Returns value represented as anxs:string. Signatures fn:string() as xs:string fn:string($arg as item()?) as xs:string Properties form function form function Rules version function, context item. callingfn:string() equivalent callingfn:string(.). empty sequence, function returnsthe string. node, function returns thestring-value node, as obtained using thedm:string-value accessor defined XPath Data Model Section5.13 string-value Accessor DM30). atomic value, function returnsthe result expression cast as xs:string(see Casting). Error Conditions dynamic error raised bythe version function context item isabsentDM30. type error raised afunction item. Examples expression string(23) returns"23". expression string(false()) returns"false". expression string("Paris") returns"Paris". expression string(abs#1) errorFOTY0014. let hole ground there lived author="Tolkein">hobbit</term>.</para> expression string($para) returns ahole ground there lived hobbit.". fn:data Summary Returns result atomizing sequence, replacingall nodes sequence typed values. Signatures fn:data() as xs:anyAtomicType* fn:data($arg as item()*) as xs:anyAtomicType* Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. result fn:data sequence atomicvalues produced applying following rules item item atomic value, appended resultsequence. item node, typed value node appendedto result sequence. typed value sequence ormore atomic values: specifically, result thedm:typed-value accessor as defined XPath Data Model Section5.15 typed-value Accessor DM30). Error Conditions type error raised item sequence$arg node not have typed value. type error raised item sequence$arg function item. dynamic error raised isomitted context item absentDM30. Notes process applying fn:data function asequence referred as atomization. many casesan explicit call fn:data not required, becauseatomization invoked implicitly node sequence nodesis supplied context atomic value sequence ofatomic values required. Examples expression data(123) returns123. let hole ground there lived author="Tolkein">hobbit</term>.</para> expression data($para) returnsxs:untypedAtomic("In hole ground there lived ahobbit."). expression data($para/term/@author) returnsxs:untypedAtomic("Tolkein"). expression data(abs#1) errorFOTY0013. Summary Returns base URI node. Signatures fn:base-uri() as xs:anyURI? fn:base-uri($arg as node()?) as xs:anyURI? Properties form function form function Rules version function returns base URIof context node: equivalent callingfn:base-uri(.). single-argument version function asfollows: empty sequence, functionreturns empty sequence. Otherwise, function returns value thedm:base-uri accessor applied node$arg. accessor defined, kind node,in XDM specification Section 5.2base-uri Accessor DM30). Note: explained XDM, document, element processing-instructionnodes have base-uri property be empty. base-uriproperty other node kinds empty sequence. Thedm:base-uri accessor returns base-uri property node itexists non-empty; otherwise returns result ofapplying dm:base-uri accessor parent, recursively. Ifthe node not have parent, recursive ascent up theancestor chain encounters parentless node base-uri propertyis empty, empty sequence returned. case namespacenodes, however, result always empty sequence doesnot depend base URI parent element. also fn:static-base-uri. Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Summary Returns URI resource document be found, ifavailable. Signatures fn:document-uri() as xs:anyURI? fn:document-uri($arg as node()?) as xs:anyURI? Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. empty sequence, function returnsthe empty sequence. not document node, functionreturns empty sequence. Otherwise, function returns value thedocument-uri accessor applied asdefined XPath DataModel Section6.1.2 Accessors DM30). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes case document node returned thefn:doc function, documentnode root tree containing node returned thefn:collection function,it always be true either fn:document-uri($D)returns empty sequence, following expression istrue: fn:doc(fn:document-uri($D)) guarantee also documentnodes obtained other means, example document node passedas initial context node query transformation. Errors diagnostics Raising errors document, as as XML Query Language] PathLanguage phrase error raised" used.Raising error equivalent calling fn:error function defined thissection provided error code. above phrase normally accompanied specification aspecific error, wit: error raised code]".Each error defined document identified anxs:QName thehttp://www.w3.org/2005/xqt-errors namespace,represented document err prefix. isthis xs:QName actually passed as argumentto fn:error function.Calling function error. more detailedtreatment error handing, Section Dynamic Errors XP30. fn:error function isa general function be called as above also becalled XML QueryLanguage] Path Language applications example, xs:QNameargument. fn:error Summary Calling fn:error function anapplication-defined error. Signatures fn:error() as none fn:error($code as xs:QName) as none fn:error($code as xs:QName?,$description as xs:string) as none fn:error( as xs:QName?, as xs:string, as item()*) as none Properties function Rules function never returns value. Instead always anerror. effect error identical effect ofdynamic errors raised implicitly, example incorrectargument supplied function. parameters fn:error function supplyinformation associated error condition ismade available caller information about theerror. error be caught either host language atry/catch construct XSLT XQuery, example), thecalling application external processing environment. way inwhich error information returned external processingenvironment dependentÂ· fn:error called arguments, then itsbehavior same as function call: fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', empty sequence then effectivevalue xs:QName constructed fn:QName('http://www.w3.org/2005/xqt-errors', There are pieces information be associatedwith error: error code thiserror others. xs:QName; namespaceURI conventionally component, subsystem, orauthority responsible defining meaning error code,while local part specific error condition. Thenamespace URI isused errors defined specification; other namespace URIsmay be used errors defined application. external processing environment error code tobe returned as URI string rather as anxs:QName, then error code namespace URINS local part LP be returned inthe form NS#LP. namespace URI part errorcode therefore not include fragment identifier. natural-language descriptionof error condition. arbitrary value used toconvey additional information about error, be used inany way application Error Conditions function always dynamic error. Bydefault, Notes value parameter need tobe localized. type special type defined XPath Formal Semantics]and not available user. functionnever returns correct static type. QName be used as error code; there are reservednames namespaces. error always classified as dynamicerror, even error code used normally used forstatic errors type errors. Examples expression fn:error() errorFOER0000. returns URIhttp://www.w3.org/2005/xqt-errors#FOER0000 thecorresponding xs:QName) external processingenvironment, error caught using try/catch constructin host language.). expressionfn:error(fn:QName('http://www.example.com/HR','myerr:toohighsal'), not apply because salary toohigh') error myerr:toohighsal. thexs:string not apply because salary toohigh" corresponding xs:QName) theexternal processing environment, error caught using atry/catch construct host language.). Diagnostictracing fn:trace Summary execution trace intended be used debuggingqueries. Signature fn:trace($value as item()*,$label as xs:string) as item()* Properties function Rules function returns value addition, values converted anxs:string, be directed trace data set. Thedestination trace output format trace output dependentÂ·. ordering output calls thefn:trace function dependentÂ·. Examples Consider situation user investigate theactual value passed function. Assume particularexecution, xs:decimal value124.84. Writing fn:trace($v, value put strings value trace data set inimplementation dependent order. 4Functions operators numerics section arithmetic operators numericdatatypes defined Schema Part Second Edition]. uses approach permitslightweight implementation possible. Numerictypes operators described section are defined thefollowing numeric types. type name indented isderived type name nearest above oneless level indentation. xs:decimal xs:integer xs:float xs:double also apply types derived restriction abovetypes. Note: specification uses arithmetic xs:float andxs:double values. consequence isthat operations result value NaN unusual property not equal toitself. consequence operations return thevalue negative Schema Part Datatypes Second Edition]which NaN as being equal definesonly single value space. text accompanyingseveral functions behavior positive negativezero inputs outputs interest alignment conformantimplementation respect semantics. consequence, theexpression -0.0e0 actually unary minusoperator applied xs:double value) alwaysreturn negative concession implementationsthat rely implementations XSD however, casting fromstring double lexical form -0may be converted positive though negativezero recommended. XML Schema support positive negative zeroas distinct values, also uses semantics comparisons involvingNaN. Arithmeticoperators numeric values following functions define semantics arithmeticoperators defined XML QueryLanguage] Path Language numeric types. Operators Meaning op:numeric-add Addition op:numeric-subtract Subtraction op:numeric-multiply Multiplication op:numeric-divide Division op:numeric-integer-divide Integer division op:numeric-mod Modulus op:numeric-unary-plus Unary op:numeric-unary-minus Unary minus parameters return types above operators are thebasic numeric types: xs:integer,xs:decimal, xs:float andxs:double, types derived word function signatures fourtypes. simplicity, operator defined operate onoperands same type return same type. exceptionsare op:numeric-divide, whichreturns xs:decimal called twoxs:integer operands op:numeric-integer-dividewhich always returns xs:integer. operands are not same type, subtypesubstitution numeric type promotion are used toobtain operands same type. Section B.1 TypePromotion XP30 Section B.2 OperatorMapping XP30 describe semanticsof operations detail. result type operations argumentdatatypes defined following table: Operator Returns op:operation(xs:integer, xs:integer) xs:integer op:numeric-divide(integer,integer), returns xs:decimal) op:operation(xs:decimal, xs:decimal) xs:decimal op:operation(xs:float, xs:float) xs:float op:operation(xs:double, xs:double) xs:double op:operation(xs:integer) xs:integer op:operation(xs:decimal) xs:decimal op:operation(xs:float) xs:float op:operation(xs:double) xs:double rules define operation pair arithmetictypes. Consider following example: op:operation(xs:int, xs:double) op:operation(xs:double, xs:double) operation, xs:int be converted toxs:double. be done, since rules above:xs:int be substituted xs:integer,xs:integer be substituted forxs:decimal, xs:decimal be promoted toxs:double. far as possible, promotions shouldbe done single step. Specifically, anxs:decimal promoted xs:double,it not be converted xs:float then toxs:double, as risks loss precision. example, user define height as aderived type xs:integer minimum value 20and maximum value then derivefenceHeight using enumeration restrict thepermitted set values op:operation(fenceHeight, xs:integer) op:operation(xs:integer, xs:integer) fenceHeight be substituted base typeheight height be substituted forits base type xs:integer. basic rules addition, subtraction, multiplication ofordinary numbers are not set out specification; aretaken as given. case xs:double andxs:float rules are as defined rules handlingdivision modulus operations, as as rules handlingspecial values such as infinity NaN, exceptionconditions such as overflow underflow, are described moreexplicitly since are not necessarily obvious. overflow underflow situations arithmeticoperations conforming implementations behave as xs:float xs:double operations,overflow behavior be conformant specification thefollowing options: Raising dynamic error overflow trap. Returning INF Returning largest negative) non-infinitenumber. xs:float xs:double operations,underflow behavior be conformant specification thefollowing options: Raising dynamic error underflow trap. Returning adenormalized value; Emin smallestpossible xs:float xs:doubleexponent. xs:decimal operations, overflow behaviorÂ·mustÂ· raise adynamic error underflow, 0.0must be returned. xs:integer operations, implementations thatsupport limited-precision integer operations select following options: choose toalways raise dynamic error provide mechanism users choose betweenraising error returning result modulo largestrepresentable integer value. functions op:numeric-add, op:numeric-subtract,op:numeric-multiply,op:numeric-divide,op:numeric-integer-divideand op:numeric-mod areeach defined pairs numeric operands, thesame type:xs:integer, xs:decimal,xs:float, xs:double. functionsop:numeric-unary-plusand op:numeric-unary-minusare defined single operand type samenumeric types. xs:float xs:double arguments,if either argument NaN, result isNaN. xs:decimal values number digits ofprecision returned numeric operators number digits result exceedsthe number digits implementation supports, resultis truncated rounded manner. specificationalso handling exception conditions calleddivideByZero invalidOperation. TheIEEE divideByZero exception raised not only adirect attempt divide also operations such aslog(0). IEEE invalidOperationexception raised attempts call function argumentthat outside function's domain example,sqrt(-1) log(-1). IEEEexceptions do not cause dynamic error application level;rather result relevant function operator returningNaN. underlying IEEE exceptionmay be notified application userby warning condition, observable effecton application using functions operators defined thisspecification simply return NaN noerror. specificationdistinguishes NaN values, quiet NaN signaling NaN.These values are not distinguishable XDM model: thevalue spaces xs:float xs:doubleeach include only single NaN value. notprevent implementation distinguishing internally, andtriggering different warning conditions, such distinctions donot affect observable behavior application using thefunctions operators defined specification. Summary Returns arithmetic sum operands: Operator Mapping semantics operator applied twonumeric values Signature op:numeric-add($arg1 as numeric,$arg2 as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. Notes xs:float xs:double values, ifone operands finite number other isINF INF returned. operands areINF, INF returned. operandsare returned. theoperands INF other returned. op:numeric-subtract Summary Returns arithmetic difference operands: Operator Mapping semantics operator applied twonumeric values. Signature op:numeric-subtract($arg1 as numeric,$arg2 as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. Notes xs:float xs:double values, ifone operands finite number other isINF infinity theappropriate sign returned. operands are INFor NaN returned. theoperands INF other aninfinity appropriate sign returned. op:numeric-multiply Summary Returns arithmetic product operands: Operator Mapping semantics operator applied twonumeric values. Signature op:numeric-multiply($arg1 as numeric,$arg2 as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. Notes xs:float xs:double values, ifone operands other infinity,NaN returned. operands non-zeronumber other infinity, infinity theappropriate sign returned. op:numeric-divide Summary Returns arithmetic quotient operands: Operator Mapping semantics operator applied twonumeric values. Signature op:numeric-divide($arg1 as numeric,$arg2 as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. special case, types are xs:integer, then returntype xs:decimal. Error Conditions dynamic error raised xs:decimaland xs:integer operands, divisor negative) Notes xs:float xs:double operands,floating point division performed as specified positive number divided bypositive returns INF. negative number dividedby positive returns Division negativezero returns INF, respectively.Positive negative divided positive negative zeroreturns NaN. Also, INF divided INF NaN. Summary integer division. Operator Mapping semantics operator applied twonumeric values. Signature op:numeric-integer-divide($arg1 as numeric,$arg2 as numeric) as xs:integer Rules General rules: Arithmeticoperators numeric values. INF not INF then result Otherwise, subject limits precision overflow/underflowconditions, result largest value such fn:abs($N le fn:abs($arg1) andfn:compare($N eq fn:compare($arg1, Note: second term condition result hasthe correct sign. implementation adopt different algorithm provided thatit equivalent formulation cases behavior not affect outcome, forexample, implementation-defined precision result ofxs:decimal division. Error Conditions dynamic error raised divisor negative) dynamic error raised either operand isNaN INF Notes situations involving errors, loss precision, oroverflow/underflow, result idiv thesame as div cast as xs:integer. semantics function are different integerdivision as defined programming languages such as Java andC++. Examples expression op:numeric-integer-divide(10,3)returns expression op:numeric-integer-divide(3,-2)returns -1. expression op:numeric-integer-divide(-3,2)returns -1. expression op:numeric-integer-divide(-3,-2)returns expression op:numeric-integer-divide(9.0,3)returns expression op:numeric-integer-divide(-3.5,3)returns -1. expression op:numeric-integer-divide(3.0,4)returns expression op:numeric-integer-divide(3.1E1,6)returns expression op:numeric-integer-divide(3.1E1,7)returns Summary Returns remainder resulting dividing$arg1, dividend, thedivisor. Operator Mapping semantics operator applied twonumeric values. Signature op:numeric-mod($arg1 as numeric,$arg2 as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. operation mod b operands arexs:integer xs:decimal, typesderived result such idivb)*b+(a mod equal magnitudeof result always less magnitude b.This identity even special case dividend isthe negative integer largest possible magnitude type andthe divisor -1 remainder rulethat sign result sign dividend. xs:float xs:double operandsthe following rules apply: either operand NaN, result isNaN. dividend positive negative infinity, divisoris positive negative result isNaN. dividend finite divisor infinity, theresult dividend. dividend positive negative divisor isfinite, result same as dividend. remaining cases, positive negativeinfinity, positive negative NaN isinvolved, result idiv mod Division truncating division, analogous tointeger division, not division i.e. additional digits are truncated, not roundedto required precision. Error Conditions dynamic error raised xs:integerand xs:decimal operands, iszero. Examples expression op:numeric-mod(10,3) returns1. expression op:numeric-mod(6,-2) returns0. expression op:numeric-mod(4.5,1.2) returns0.9. expression op:numeric-mod(1.23E2, op:numeric-unary-plus Summary Returns operand sign unchanged: Operator Mapping semantics unary operator applied anumeric value. Signature op:numeric-unary-plus($arg as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. returned value equal aninstance xs:integer, xs:decimal,xs:double, xs:float depending thetype Notes function conversion rules are applied normal way,the unary operator be used force conversionof untyped node number: result +@priceis same as xs:double(@price) type xs:untypedAtomic. op:numeric-unary-minus Summary Returns operand sign reversed: Operator Mapping semantics unary operator applied toa numeric value. Signature op:numeric-unary-minus($arg as numeric) as numeric Rules General rules: Arithmeticoperators numeric values. returned value instance xs:integer,xs:decimal, xs:double, orxs:float depending type xs:integer xs:decimalarguments, return0 respectively. Forxs:float xs:double arguments,NaN returns NaN, -0.0E0 vice versa. INFreturns returnsINF. Comparisonoperators numeric values specification following comparison operators onnumeric values. Comparisons take arguments same type. Ifthe arguments are different types, argument promoted tothe type other as described above Arithmetic operators numericvalues. comparison operator returns boolean value.If operands are NaN,false returned. Function Meaning op:numeric-equal Returns true only value isequal value op:numeric-less-than Returns true only isnumerically less op:numeric-greater-than Returns true only isnumerically greater Summary Returns true only value isequal value Operator Mapping semantics operator applied twonumeric values, also used defining semantics Signature op:numeric-equal($arg1 as numeric,$arg2 as numeric) as xs:boolean Rules General rules: Arithmeticoperators numeric values Comparison operators numericvalues. xs:float xs:double values,positive negative compare equal. INFequals INF, NaN not equal op:numeric-less-than Summary Returns true only isnumerically less Operator Mapping semantics operator applied twonumeric values, also used defining semantics Signature op:numeric-less-than($arg1 as numeric,$arg2 as numeric) as xs:boolean Rules General rules: Arithmeticoperators numeric values Comparison operators numericvalues. xs:float xs:double values,positive infinity greater other non-NaNvalues; negative infinity less othernon-NaN values. NaN, function returnsfalse. op:numeric-greater-than Summary Returns true only isnumerically greater Operator Mapping semantics operator applied twonumeric values, also used defining semantics Signature op:numeric-greater-than($arg1 as numeric,$arg2 as numeric) as xs:boolean Rules function call op:numeric-greater-than($A, defined return same result as op:numeric-less-than($B,$A) Functions numeric values following functions are defined numeric types. Eachfunction returns value same type as type itsargument. argument empty sequence, empty sequence isreturned. xs:float xs:double arguments,if argument returned. fn:abs, forxs:float xs:double arguments, theargument positive negative infinity, positive negativeinfinity returned. Function Meaning fn:abs Returns absolute value fn:ceiling Rounds upwards whole number. fn:floor Rounds downwards whole number. fn:round Rounds value specified number decimal places,rounding upwards such values are equally near. fn:round-half-to-even Rounds value specified number decimal places,rounding make last digit even such values are equallynear. Note: fn:round fn:round-half-to-evenproduce same result cases argument isexactly midway values required precision. Other ways rounding midway values be achieved asfollows: negative infinity: Away fn:round(fn:abs($x))*fn:compare($x,0) fn:abs(fn:round(-$x))*-fn:compare($x,0) fn:abs Summary Returns absolute value Signature fn:abs($arg as numeric?) as numeric? Properties function Rules General rules: numeric values. negative function returns-$arg, otherwise returns type numerictypes xs:float, xs:double,xs:decimal xs:integer type theresult same as type type type derived numeric types,the result instance base numeric type. xs:float xs:double arguments,if argument positive negative then positivezero returned. argument positive negative infinity,positive infinity returned. Examples expression fn:abs(10.5) returns10.5. expression fn:abs(-10.5) returns10.5. Summary Rounds upwards whole number. Signature fn:ceiling($arg as numeric?) as numeric? Properties function Rules General rules: numeric values. function returns smallest negative infinity)number fractional part not less value type numerictypes xs:float, xs:double,xs:decimal xs:integer type theresult same as type type type derived numeric types,the result instance base numeric type. xs:float xs:double arguments,if argument positive then positive returned.If argument negative then negative returned.If argument less greater -1, negativezero returned. Examples expression fn:ceiling(10.5) returns11. expression fn:ceiling(-10.5) returns-10. fn:floor Summary Rounds downwards whole number. Signature fn:floor($arg as numeric?) as numeric? Properties function Rules General rules: numeric values. function returns largest positive infinity)number fractional part not greater valueof type numerictypes xs:float, xs:double,xs:decimal xs:integer type theresult same as type type type derived numeric types,the result instance base numeric type. xs:float xs:double arguments,if argument positive then positive returned.If argument negative then negative isreturned. Examples expression fn:floor(10.5) returns10. expression fn:floor(-10.5) returns-11. fn:round Summary Rounds value specified number decimal places, roundingupwards such values are equally near. Signatures fn:round($arg as numeric?) as numeric? fn:round($arg as numeric?, as xs:integer) as numeric? Properties function Rules General rules: numeric values. function returns nearest numerically closest)value multiple powerof minus such values are equallynear example, fractional part isexactly function returns closest topositive infinity. type numerictypes xs:float, xs:double,xs:decimal xs:integer type theresult same as type type type derived numeric types,the result instance base numeric type. single-argument version function sameresult as version rounds whole number). type xs:float andxs:double: NaN, positive negative orpositive negative infinity, then result same as theargument. other values, argument cast toxs:decimal using implementation ofxs:decimal limits number ofdigits be represented. function applied thisxs:decimal value, resultingxs:decimal cast back xs:float orxs:double as appropriate form function result.If resulting xs:decimal value thenpositive negative returned according sign Notes function typically used non-zero$precision financial applications theargument type xs:decimal. arguments typexs:float xs:double results becounter-intuitive. example, consider round(35.425e0,2). result not as be expected, but35.42. because xs:double written exact value equal iscloser Examples expression fn:round(2.5) returns3.0. expression fn:round(2.4999) returns2.0. expression fn:round(-2.5) returns-2.0. possible alternative,-3). expression fn:round(1.125, returns1.13. expression fn:round(8452, returns8500. expression fn:round(3.1415e0, returns3.14e0. fn:round-half-to-even Summary Rounds value specified number decimal places, roundingto make last digit even such values are equallynear. Signatures fn:round-half-to-even($arg as numeric?) as numeric? fn:round-half-to-even($arg as numeric?, as xs:integer) as numeric? Properties function Rules General rules: numeric values. function returns nearest numerically closest)value multiple powerof minus such values are equallynear fractional part exactly.500...), function returns least significantdigit even. type numerictypes xs:float, xs:double,xs:decimal xs:integer type theresult same as type type type derived numeric types,the result instance base numeric type. first signature function same result asthe second signature arguments type xs:float andxs:double: argument NaN, positive negative positive negative infinity, then result same asthe argument. other cases, argument cast toxs:decimal using implementation xs:decimalthat limits number digits berepresented. function applied thisxs:decimal value, resultingxs:decimal cast back xs:float orxs:double as appropriate form function result.If resulting xs:decimal value thenpositive negative returned according sign theoriginal argument. Notes function typically used financial applications wherethe argument type xs:decimal. arguments oftype xs:float xs:double resultsmay be counter-intuitive. example, considerround-half-to-even(xs:float(150.015), resultis not as be expected, because theconversion xs:float value represented theliteral xs:decimal thexs:decimal value closer Examples expression fn:round-half-to-even(0.5) returns0.0. expression fn:round-half-to-even(1.5) returns2.0. expression fn:round-half-to-even(2.5) returns2.0. expression fn:round-half-to-even(3.567812e+3,2) returns expression fn:round-half-to-even(4.7564e-3, expression fn:round-half-to-even(35612.25, Parsingnumbers possible convert strings values typexs:integer, xs:float,xs:decimal, xs:double using theconstructor functions described Constructor functions orusing cast expressions as described Casting. addition fn:number function available toconvert strings values type xs:double. Itdiffers xs:double constructor function inthat value outside lexical space thexs:double datatype converted thexs:double value NaN. fn:number Summary Returns value indicated not specified, context item afteratomization, converted xs:double. Signatures fn:number() as xs:double fn:number($arg as xs:anyAtomicType?) as xs:double Properties form function form function Rules Calling version function defined togive same result as calling single-argument version withthe context item equivalent tofn:number(.), as defined rules follow. empty sequence be converted xs:double,the xs:double value NaN returned. Otherwise, converted anxs:double following rules Casting xs:double. Ifthe conversion xs:double thexs:double value NaN returned. Error Conditions dynamic error raised omitted context item absentDM30. consequence rules given above, type error occursif context item be atomized, result ofatomizing context item sequence containing more oneatomic value. Notes XSD string as representationof positive infinity; XSD not. XSD supported. Generally fn:number returns NaN ratherthan raising dynamic error argument be converted toxs:double. However, type error raised theusual way supplied argument be atomized theresult atomization not match required argumenttype. Examples expression fn:number($item1/quantity) returns5.0e0. expression fn:number($item2/description)returns xs:double('NaN'). Assume context item xs:string value"15". Then fn:number() returns1.5e1. integers fn:format-integer Summary Formats integer according given picture string, usingthe conventions given natural language specified. Signatures fn:format-integer($value as xs:integer?,$picture as xs:string) as xs:string fn:format-integer( as xs:integer?, as xs:string, as xs:string?) as xs:string Properties form function default language. form function Rules empty sequence, functionreturns string. other cases, argument describesthe format output. rules follow describe non-negative numbers areoutput. value negative, rulesbelow are applied absolute value anda minus sign prepended result. value primary formattoken, optionally followed format modifier. primary formattoken always present not bezero-length. string more semicolons theneverything last semicolon taken as primaryformat token everything taken as formatmodifier; string semicolon then entirepicture taken as primary format token, formatmodifier taken be absent equivalent supplying azero-length string). primary format token classified as thefollowing: decimal-digit-pattern made up ofoptional-digit-signs, mandatory-digit-signs,and grouping-separator-signs. optional-digit-sign character mandatory-digit-sign inUnicode category Nd. mandatory-digit-signs withinthe format token be same digitfamily, digit family sequence consecutivecharacters Unicode category Nd, having digit values format token, digits are interchangeable: athree-digit number thus be indicated equivalently by000, grouping-separator-sign non-alphanumericcharacter, Unicode category other Nd, Nl,No, Lu, Ll, Lt, Lm primary format token least Unicode digitthen taken as decimal digit pattern, case itmust match regular expression^((\p{Nd}|#|[^\p{N}\p{L}])+?)$. digitbut not match pattern, dynamic error israised Note: semicolon be used as grouping separator, then theprimary format token as whole be followed anothersemicolon, ensure grouping separator not mistaken asa separator primary format token formatmodifier. There be least onemandatory-digit-sign. There be moreoptional-digit-signs, present) thesemust precede mandatory-digit-signs.There be more grouping-separator-signs. Agrouping-separator-sign not appearat start end decimal-digit-pattern, noradjacent grouping-separator-sign. corresponding output format decimal number, using thisdigit family, least as many digits as there aremandatory-digit-signs format token. Thus, aformat token sequence format token thesequence Aformat token digit sequence Ù¡ then Ù¢ grouping-separator-signs are handled as follows.The position grouping separators format token,counting backwards last digit, position ofgrouping separators appear formatted number, thecharacter used as grouping-separator-sign theformat token character be used as thecorresponding grouping separator formatted number. Ifgrouping-separator-signs appear regular intervalswithin format token, same grouping separatorappears positions forming sequence N,2N, 3N, integer valueN case there only number inthe list), then sequence extrapolated left, sogrouping separators be used formatted number everymultiple N. example, format token is0'000 then number be formatted as1'000'000, number be formattedas only purpose optional-digit-signs markthe position grouping-separator-signs. example,if format token #'##0 then number onemillion be formatted as thenumber be formatted as groupingseparator included formatted number only there adigit left, only be case either thenumber large enough require digit, number ofmandatory-digit-signs format token requiresinsignificant leading zeros be present. Note: Numbers never be truncated. Given thedecimal-digit-pattern number threehundred be output as absence ofany optional-digit-sign. format token sequenceA B C Z AA AB AC.... format token sequencea b c aa ab ac.... format token sequencei iv v vi vii viii ix format token sequenceI IV V VI X format token numbers writtenas lower-case words, example English, threefour format token W, numbers writtenas upper-case words, example English, THREEFOUR format token Ww, numberswritten as title-case words, example English, TwoThree other format token, numbering sequence inwhich token number notebelow). numbering sequences, additional thoselisted above, are supported. implementation not supporta numbering sequence represented given token, itmust use format token Note: traditional numbering sequences additional signs areadded denote letters be interpreted as numbers;these are not included format token. example alsothe example below) classical Greek dexia keraia(x0374, Í´) sometimes aristeri keraia isadded. format tokens other first kind above thatconsists decimal digits), there beÂ·implementation-definedÂ· lower upper bounds range numbersthat be formatted using format token; indeed, somenumbering sequences there be intrinsic limits. example, theformat token digit arange imposed Unicode character repertoire 20in Unicode versions prior increased subsequentversions. numbering sequences described above anyupper bound imposed implementation notbe less lower bound not begreater Numbers fall outside rangemust be formatted using format token1. above expansions numbering sequences format tokenssuch as are indicative notprescriptive. There are various conventions use howalphabetic sequences continue alphabet exhausted, anddiffering conventions roman numerals are written IV IIII as therepresentation number Sometimes alphabetic sequences areused omit letters such as o.This specification not prescribe detail sequenceother sequences consisting entirely decimaldigits. Many numbering sequences are language-sensitive. appliesespecially sequence selected tokens Ww. also othersequences, example different languages using Cyrillicalphabet use different sequences characters, starting withthe letter #x410 capital letter A). such cases, argument language's conventionsare be used. argument specified, valueshould be either empty sequence value thatwould be valid xml:lang attribute Markup Language Note permits identification ofsublanguages based country codes ISO as asidentification dialects regions acountry.. set languages numbering supported argument absent,or set empty sequence, invalid, not languagesupported implementation, then number formatted usingthe default language dynamic context. format modifier be string thatmatches regular expression^([co](\(.+\))?)?[at]?$. ispresent consist more thefollowing, order: either c optionally followed bya sequence characters enclosed parentheses, indicatecardinal ordinal numbering respectively, default beingcardinal numbering either t, indicate alphabeticor traditional numbering respectively, default being modifier present, arequest output ordinal numbers rather cardinal numbers. Forexample, English, used format token1, outputs sequence 1st 2nd 3rd 4th..., used format token woutputs sequence first second third fourth.... string characters parentheses, present, isused select other possible variations cardinal orordinal numbering sequences. interpretation string error implementation doesnot define interpretation defined string. example, languages, ordinal numbers vary dependingon grammatical context: have different genders maydecline noun qualify. such cases stringappearing parentheses after letter beused indicate variation ordinal number required. Theway variation indicated depend theconventions language. inflected languages vary theending word, recommended approach toindicate required ending, preceded hyphen: example inGerman, appropriate values are combinations values formattoken, language, cardinal/ordinal modifier aresupported. ordinal numbering not supported thecombination format token, language, stringappearing parentheses, request ignored cardinalnumbers are generated instead. Example: Ordinal Numbering Italian specification supported, produce thesequence: 1Âº 2Âº 3Âº 4Âº specification supported, produce thesequence: Primo Secondo Terzo Quarto Quinto use tmodifier disambiguates numbering sequences useletters. many languages there are commonly used numberingsequences use letters. numbering sequence numericvalues letters alphabetic sequence, other assignsnumeric values letter other manner traditional inthat language. English, correspond numberingsequences specified format tokens andi. languages, first member eachsequence same, so format token alone beambiguous. absence ort modifier, default Error Conditions dynamic error raised format token isinvalid, mandatory rules byan emphasized requiredkeyword above rules). example, error raised ifthe primary format token digit not match therequired regular expression. Notes Note careful distinction conditions are errorsand conditions fallback principle anerror syntax format picture be reported allprocessors, construct recognized someimplementations not others never result error, butwill instead cause fallback representation integer beused. Examples expression format-integer(123, returns"0123". format-integer(123, return expression format-integer(21, format-integer(14, return"Vierzehnte" expression format-integer(7, returns"g". expression format-integer(57, returns"LVII". expression format-integer(1234, numbers section function formatting decimal andfloating point numbers. Function Meaning fn:format-number Returns string containing number formatted according agiven picture string, taking account decimal formats specifiedin static context. Note: function be used format numeric quantity,including integer. integers, however, fn:format-integer functionoffers additional possibilities. Note also picture stringsused functions are not compatible, though theyshare options common. Defining decimal format Decimal formats are defined static context, waythey are defined therefore outside scope thisspecification. XSLT XQuery provide custom syntax forcreating decimal format. static context set decimal formats. thedecimal formats unnamed, others are identified aQName. There always unnamed decimal format available, itscontents are decimal format set namedproperties, described following table: Name Type Usage decimal-separator-sign single character used represent thedecimal point picture string theformatted number grouping-separator-sign single character used separate groups ofdigits picture string theformatted number infinity string used represent valuepositive negative infinity formatted number single character used as minus sign theformatted number there subpicture formatting negativenumbers x2D) NaN string used represent valueNaN formatted number percent-sign single character used as percent sign(typically picture string formattednumber single character used as sign(typically x2030) picture string theformatted number mandatory-digit-sign single be character Unicodecategory Nd decimal digit value characters used picture stringto represent mandatory digit: example, themandatory-digit-sign then digits maybe used picture string represent amandatory digit, formatted number characters be used represent digits optional-digit-sign single character used picture stringto represent optional digit pattern-separator-sign single character used picture stringto separate positive negative subpictures decimal digitfamily decimal format sequence digits withconsecutive Unicode starting themandatory-digit-sign. constraint named unnamed decimalformat, properties representing characters used ina have distinct values.These properties aredecimal-separator-sign,grouping-separator-sign, percent-sign,per-mille-sign, optional-digit-sign, andpattern-separator-sign. Furthermore, none theseproperties be equal familyÂ·. Summary Returns string containing number formatted according agiven picture string, taking account decimal formats specifiedin static context. Signatures fn:format-number($value as numeric?,$picture as xs:string) as xs:string fn:format-number( as numeric?, as xs:string, as xs:string?) as xs:string Properties form function form function decimal formats, namespaces. Rules effect form function isequivalent calling form emptysequence as value third argument. function formats as string using specified argument decimal-format named argument, defaultdecimal-format, there syntax picture string described Syntax picturestring. argument be numeric data type(xs:double, xs:float,xs:decimal, subtypes includingxs:integer). Note xs:decimalis supplied, not automatically promoted anxs:double, as such promotion involve loss ofprecision. supplied value argument anempty sequence, function as supplied value werethe xs:double value NaN. value presentand non-empty, be string whichafter removal leading trailing whitespace form ofan EQName as defined XPath grammar, thatis following: lexical QName, expanded using staticallyknown namespaces. default namespace not used means namespace). URIQualifiedName using syntaxQ{uri}local, URI be toindicate name namespace. decimal format used decimal format thestatic context name matches supplied, default decimal format static contextotherwise. evaluation format-number function takesplace phases, analysis phase described Analysing picturestring formatting phase described Formatting thenumber. analysis phase as inputs variables derivedfrom relevant decimal format static context, andproduces as output number variables defined values.The formatting phase as inputs number be formattedand variables produced analysis phase, asits output string containing formatted representation thenumber. result function formatted stringrepresentation supplied number. Error Conditions dynamic error raised name specified as argument validlexical QName valid URIQualifiedName, orif uses prefix not found statically knownnamespaces, static context not contain adeclaration decimal-format matching expanded QName. Ifthe processor able detect error statically example,when argument supplied as string literal), then theprocessor optionally signal as staticerror. Notes Numbers always be formatted most significant digiton left. Examples following examples assume default decimal format whichthe chosen digits are ASCII digits decimal separatoris grouping separator thepercent-sign exponent separator expression format-number(12345.6, expression format-number(12345678.9,'9,999.99') returns expression format-number(123.9, returns"0124". expression format-number(0.14, returns"14%". expression format-number(-6, returns"-006". expression format-number(12.34, expression format-number(12.34, following example existence decimal formatnamed grouping separator Ê¹ andthe decimal separator expression format-number(1234.5678, returns Syntax picturestring Note: format-number functionpreviously defined XSLT digit be used thepicture string represent mandatory digit: example thepicture strings are equivalent. Thedigits used be same decimal digit family,specifically, sequence consecutive digits starting withthe mandatory-digit-sign. change alignformat-number previously used withformat-dateTime used formatting number iscontrolled picture string. picture string asequence characters assigned theproperties decimal-separator-sign,grouping-sign, decimal-digit-family,optional-digit-sign andpattern-separator-sign are classified as activecharacters, other characters thepercent-sign areclassified as passive characters. integer part sub-picture defined as thepart left thedecimal-separator-sign there entiresub-picture otherwise. fractional part thesub-picture defined as part thedecimal-separator-sign there thepart rightmost active characterotherwise. fractional part be dynamic error raised not conform thefollowing rules. Note rules words refer characters anywhere string, are notto be read as preceded" picture-string either sub-picture, twosub-pictures separated pattern-separator-sign. Apicture-string not contain more onepattern-separator-sign. picture-string containstwo sub-pictures, first used positive values thesecond negative values. sub-picture not contain more onedecimal-separator-sign. sub-picture not contain more onepercent-sign itmust not contain sub-picture contain least onecharacter optional-digit-sign member ofthe decimal-digit-family. sub-picture not contain passivecharacter preceded active character isfollowed active character. sub-picture not contain agrouping-separator-sign adjacent adecimal-separator-sign. integer part sub-picture notcontain member decimal-digit-family isfollowed optional-digit-sign. fractional partof sub-picture not contain anoptional-digit-sign followed member thedecimal-digit-family. Analysing picturestring phase algorithm analyses theproperties selected decimal format thestatic context, effect setting values ofvarious variables, are used subsequent formattingphase. variables are listed below. shown itsinitial setting data type. Several variables are associated sub-picture. thereare sub-pictures, then rules are applied onesub-picture obtain values apply positive numbers,and other obtain values apply negativenumbers. there only sub-picture, then values bothcases are derived sub-picture. variables are as integer-part-grouping-positions sequence ofintegers representing positions grouping separators withinthe integer part sub-picture. eachgrouping-separator-sign integerpart sub-picture, sequence integer isequal total number optional-digit-sign anddecimal-digit-family characters appear theinteger part sub-picture thegrouping-separator-sign. addition, theseinteger-part-grouping-positions are regular intervals(that form sequence N, integer value N, includingthe case there only number list), then thesequence integer multiples N as far asnecessary accommodate largest possible number. minimum-integer-part-size integerindicating minimum number digits appear theleft decimal-separator-sign. normally setto number decimal-digit-family characters foundin integer part sub-picture. sub-picturecontains decimal-digit-family character nodecimal-separator-sign, set Note: There maximum integer part size. significant digits inthe integer part number be displayed, even thisexceeds number optional-digit-sign anddecimal-digit-family characters subpicture. prefix set contain passive charactersin sub-picture left leftmost active character. Ifthe picture string only sub-picture, theprefix negative sub-picture set byconcatenating character theprefix positive sub-picture thatorder. fractional-part-grouping-positions sequenceof integers representing positions grouping separatorswithin fractional part sub-picture. eachgrouping-separator-sign thefractional part sub-picture, sequence aninteger equal total number ofoptional-digit-sign decimal-digit-familycharacters appear fractional part thesub-picture left thegrouping-separator-sign. Note: There need extrapolate grouping positions thefractional side, because number digits output willnever exceed number optional-digit-sign anddecimal-digit-family fractional part thesub-picture. minimum-fractional-part-size set numberof decimal-digit-family characters found thefractional part sub-picture. maximum-fractional-part-size set totalnumber optional-digit-sign anddecimal-digit-family characters found fractionalpart sub-picture. suffix set contain passive charactersto rightmost active character thesub-picture. Note: there only sub-picture, then variables forpositive numbers negative numbers be same, forprefix: prefix negative numbers be precededby character. Formatting number section second phase processing thefn:format-numberfunction. phase as input number be formatted(referred as input number), variables setup analysing decimal format static context as described above. Theresult phase string, forms return value ofthe fn:format-numberfunction. algorithm second stage processing asfollows: input number NaN number), result thespecified NaN-symbol prefix orsuffix). rules below, positive sub-picture associatedvariables are used input number positive, thenegative sub-picture associated variables are usedotherwise. Negative taken as negative, positive aspositive. input number positive negative infinity, resultis concatenation appropriate prefix, theinfinity-symbol, appropriatesuffix. sub-picture percent-sign, thenumber multiplied sub-picture aper-mille-sign, number multiplied Theresulting number referred below as adjustednumber. adjusted number converted necessary) anxs:decimal value, using implementation ofxs:decimal limits thetotalDigits fractionDigits facets. Ifthere are several such values are numerically equal theadjusted number mind theadjusted number xs:double orxs:float, comparison be done convertingthe decimal value back xs:double orxs:float), chosenshould be smallest possible number ofdigits not counting leading trailing zeroes significantor insignificant). example, preferred preferred value then roundedso uses more thanmaximum-fractional-part-size digits fractionalpart. rounded number defined be result ofconverting adjusted number anxs:decimal value, as described above, then callingthe function fn:round-half-to-evenwith converted number as first argument themaximum-fractional-part-size as second argument,again limits totalDigits orfractionDigits result. absolute value rounded number convertedto string decimal notation, insignificant leading ortrailing zeroes, using digits thedecimal-digit-family represent decimaldigits, decimal-separator-sign separate theinteger part fractional part. value thisstage be represented decimal-separator-sign itsown.) number digits left thedecimal-separator-sign less thanminimum-integer-part-size, leadingzero-digit-sign characters are added pad out thatsize. number digits thedecimal-separator-sign less thanminimum-fractional-part-size, trailingzero-digit-sign characters are added pad out thatsize. integer N theinteger-part-grouping-positions list, agrouping-separator-sign character inserted thestring immediately after digit integerpart number N digits thedecimal-separator-sign, there such digit. integer N thefractional-part-grouping-positions list, agrouping-separator-sign character inserted thestring immediately before digit fractionalpart number N digits thedecimal-separator-sign, there such digit. there decimal-separator-sign thesub-picture, there are digits thedecimal-separator-sign character string, then thedecimal-separator-sign character removed thestring be rightmost character string). result function concatenation theappropriate prefix, string conversion numberas obtained above, appropriate suffix. Trigonometricand exponential functions functions section perform trigonometric othermathematical calculations xs:double values. Theyare provided primarily use applications performinggeometrical computation, example generating SVGgraphics. Functions are provided support most commonly usedtrigonometric calculations: sine, cosine tangent, theirinverses arc sine, arc cosine, arc tangent. Other functionssuch as secant, cosecant, cotangent are not provided becausethey are easily computed terms functions section exception math:pi) are specified byreference wherethey appear as Recommended operations section IEEEdefines functions variety floating point formats;this specification only xs:doublevalues. IEEE specification followingcaveats: IEEE states preferred quantum language-defined. Inthis specification, IEEE states certain functions raise inexactexception result inexact. specification, thisexception not result error. diagnosticinformation outside scope specification. IEEE various rounding algorithms inexact results,and states choice rounding direction, themechanisms influencing choice, are language-defined. Inthis specification, rounding direction mechanisms forinfluencing are Certain operations as taking square root negativenumber) are defined IEEE signal invalid operationexception return quiet NaN. specification, suchoperations return NaN do not raise error. Thesame policy operations as taking logarithm ofzero) raise divide-by-zero exception. diagnosticinformation outside scope specification. Operations mathematical result greater largestfinite xs:double value are defined IEEE signalthe overflow exception; operations mathematical result iscloser smallest non-zero xs:doublevalue are similarly defined IEEE signal underflowexception. treatment exceptions specificationis defined Arithmetic operators onnumeric values. Function Meaning math:pi Returns approximation mathematical constantÏ. math:exp Returns value ex. math:exp10 Returns value of10x. math:log Returns natural logarithm argument. math:log10 Returns base-ten logarithm argument. math:pow Returns result raising first argument powerof second. math:sqrt Returns non-negative square root argument. math:sin Returns sine argument, expressed radians. math:cos Returns cosine argument, expressed radians. math:tan Returns tangent argument, expressed radians. math:asin Returns arc sine argument, result being therange radians. math:acos Returns arc cosine argument, result being therange radians. math:atan Returns arc tangent argument, result being inthe range radians. math:atan2 Returns angle radians subtended origin thepoint plane coordinates y) positive x-axis,the result being range math:pi Summary Returns approximation mathematical constantÏ. Signature math:pi() as xs:double Properties function Rules function returns xs:double value whoselexical representation Examples expression returns6.283185307179586e0. expression div converts anangle degrees radians. Summary Returns value ex. Signature math:exp($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result mathematical constant eraised power as defined specification theexp function applied binary floating pointvalues. Notes treatment overflow underflow defined Arithmetic operators numericvalues. Examples expression math:exp(()) returns(). expression math:exp(0) returns1.0e0. expression math:exp(1) expression math:exp(2) returns7.38905609893065e0. expression math:exp(-1) returns0.36787944117144233e0. expression math:exp(math:pi()) returns23.140692632779267e0. expression math:exp(xs:double('NaN')) returnsxs:double('NaN'). expression math:exp(xs:double('INF')) returnsxs:double('INF'). expression math:exp(xs:double('-INF')) returns0.0e0. Summary Returns value 10x. Signature math:exp10($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result raised power as defined specification exp10 functionapplied binary floating point values. Notes treatment overflow underflow defined Arithmetic operators numericvalues. Examples expression math:exp10(()) returns(). expression math:exp10(0) returns1.0e0. expression math:exp10(1) returns1.0e1. expression math:exp10(0.5) returns3.1622776601683795e0. expression math:exp10(-1) returns1.0e-1. expression math:exp10(xs:double('NaN')) returnsxs:double('NaN'). expression math:exp10(xs:double('INF')) returnsxs:double('INF'). expression math:exp10(xs:double('-INF'))returns Summary Returns natural logarithm argument. Signature math:log($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result natural logarithm as defined specification log functionapplied binary floating point values. Notes treatment divideByZero andinvalidOperation exceptions defined Arithmetic operators numericvalues. effect argument less orequal result NaN. Examples expression math:log(()) returns(). expression math:log(0) returnsxs:double('-INF'). expression math:log(math:exp(1)) returns1.0e0. expression math:log(1.0e-3) returns-6.907755278982137e0. expression math:log(2) returns0.6931471805599453e0. expression math:log(-1) returnsxs:double('NaN'). expression math:log(xs:double('NaN')) returnsxs:double('NaN'). expression math:log(xs:double('INF')) returnsxs:double('INF'). expression math:log(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns base-ten logarithm argument. Signature math:log10($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result base-10 logarithm as defined specification log10 functionapplied binary floating point values. Notes treatment divideByZero andinvalidOperation exceptions defined Arithmetic operators numericvalues. effect argument less orequal result NaN. Examples expression math:log10(()) returns(). expression math:log10(0) returnsxs:double('-INF'). expression math:log10(1.0e3) returns3.0e0. expression math:log10(1.0e-3) returns-3.0e0. expression math:log10(2) returns0.3010299956639812e0. expression math:log10(-1) returnsxs:double('NaN'). expression math:log10(xs:double('NaN')) returnsxs:double('NaN'). expression math:log10(xs:double('INF')) returnsxs:double('INF'). expression math:log10(xs:double('-INF'))returns xs:double('NaN'). Summary Returns result raising first argument power ofthe second. Signature math:pow($x as xs:double?,$y as numeric) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. instance xs:integer,the result raised power as defined specification pown functionapplied binary floating point value integer. Otherwise converted anxs:double numeric promotion, result thevalue raised power asdefined pow function applied two64-bit binary floating point values. Notes treatment divideByZero andinvalidOperation exceptions defined Arithmetic operators numericvalues. consequences are illustrated theexamples below. Examples expression math:pow((), returns(). expression math:pow(2, expression math:pow(-2, returns-8.0e0. expression math:pow(2, -3) returns0.125e0. expression math:pow(-2, -3) returns-0.125e0. expression math:pow(2, returns1.0e0. expression math:pow(0, returns1.0e0. expression math:pow(xs:double('INF'), expression math:pow(xs:double('NaN'), expression math:pow(-math:pi(), returns1.0e0. expression math:pow(0e0, returns0.0e0. expression math:pow(0e0, returns0.0e0. expression math:pow(-0e0, returns-0.0e0. expression math:pow(0, returns0.0e0. expression math:pow(0e0, -3) returnsxs:double('INF'). expression math:pow(0e0, returnsxs:double('INF'). expression math:pow(-0e0, -3) returnsxs:double('-INF'). expression math:pow(0, returnsxs:double('INF'). expression math:pow(16, expression math:pow(16, expression math:pow(0e0, -3.0e0) returnsxs:double('INF'). expression math:pow(-0e0, -3.0e0) returnsxs:double('-INF'). whole numbers aretreated specially). expression math:pow(0e0, -3.1e0) returnsxs:double('INF'). expression math:pow(-0e0, -3.1e0) returnsxs:double('INF'). expression math:pow(0e0, returns0.0e0. expression math:pow(-0e0, returns-0.0e0. whole numbers are treatedspecially). expression math:pow(0e0, returns0.0e0. expression math:pow(-0e0, returns0.0e0. expression math:pow(-1, xs:double('INF'))returns expression math:pow(-1, xs:double('-INF'))returns expression math:pow(1, xs:double('INF'))returns expression math:pow(1, xs:double('-INF'))returns expression math:pow(1, xs:double('NaN'))returns expression math:pow(-2.5e0, returns6.25e0. expression math:pow(-2.5e0, xs:double('NaN'). Summary Returns non-negative square root argument. Signature math:sqrt($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result mathematical non-negative squareroot as defined specification thesquareRoot function applied binary floatingpoint values. Notes treatment invalidOperation exception isdefined Arithmetic operators onnumeric values. effect argument lessthan result NaN. positive negative positiveinfinity, NaN, then result only case resultcan have negative sign) Examples expression math:sqrt(()) returns(). expression math:sqrt(0.0e0) returns0.0e0. expression math:sqrt(-0.0e0) returns-0.0e0. expression math:sqrt(1.0e6) returns1.0e3. expression math:sqrt(2.0e0) returns1.4142135623730951e0. expression math:sqrt(-2.0e0) returnsxs:double('NaN'). expression math:sqrt(xs:double('NaN')) returnsxs:double('NaN'). expression math:sqrt(xs:double('INF')) returnsxs:double('INF'). expression math:sqrt(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns sine argument, expressed radians. Signature math:sin($Î¸ as xs:double?) as xs:double? Properties function Rules emptysequence, function returns empty sequence. Otherwise result sine treated as anangle radians, as defined specification sin functionapplied binary floating point values. Notes treatment invalidOperation andunderflow exceptions defined Arithmetic operators numericvalues. positive ornegative result positive ornegative infinity, NaN, then result isNaN. Otherwise result always range -1.0e0 Examples expression math:sin(()) returns(). expression math:sin(0) returns0.0e0. expression math:sin(-0.0e0) returns-0.0e0. expression math:sin(math:pi() div returns1.0e0. expression math:sin(-math:pi() div returns-1.0e0. expression math:sin(math:pi()) returns0.0e0 expression math:sin(xs:double('NaN')) returnsxs:double('NaN'). expression math:sin(xs:double('INF')) returnsxs:double('NaN'). expression math:sin(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns cosine argument, expressed radians. Signature math:cos($Î¸ as xs:double?) as xs:double? Properties function Rules emptysequence, function returns empty sequence. positive ornegative infinity, NaN, then result isNaN. Otherwise result cosine treated as anangle radians, as defined specification cos functionapplied binary floating point values. Notes treatment invalidOperation exception isdefined Arithmetic operators onnumeric values. positive ornegative result positive ornegative infinity, NaN, then result isNaN. Otherwise result always range -1.0e0 Examples expression math:cos(()) returns(). expression math:cos(0) returns1.0e0. expression math:cos(-0.0e0) returns1.0e0. expression math:cos(math:pi() div returns0.0e0 expression math:cos(-math:pi() div returns0.0e0 expression math:cos(math:pi()) returns-1.0e0. expression math:cos(xs:double('NaN')) returnsxs:double('NaN'). expression math:cos(xs:double('INF')) returnsxs:double('NaN'). expression math:cos(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns tangent argument, expressed radians. Signature math:tan($Î¸ as xs:double?) as xs:double? Properties function Rules emptysequence, function returns empty sequence. Otherwise result tangent as angle radians, as defined specification thetan function applied binary floating pointvalues. Notes treatment invalidOperation andunderflow exceptions defined Arithmetic operators numericvalues. positive ornegative infinity, NaN, then result isNaN. Examples expression math:tan(()) returns(). expression math:tan(0) returns0.0e0. expression math:tan(-0.0e0) returns-0.0e0. expression math:tan(math:pi() div returns1.0e0 expression math:tan(-math:pi() div returns-1.0e0 expression math:tan(math:pi() div returns1.633123935319537E16 expression math:tan(-math:pi() div returns-1.633123935319537E16 expression math:tan(math:pi()) returns0.0e0 expression math:tan(xs:double('NaN')) returnsxs:double('NaN'). expression math:tan(xs:double('INF')) returnsxs:double('NaN'). expression math:tan(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns arc sine argument, result being therange radians. Signature math:asin($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result arc sine treated as anangle radians, as defined specification asin functionapplied binary floating point values. Notes treatment invalidOperation andunderflow exceptions defined Arithmetic operators numericvalues. positive negative result NaN, absolutevalue greater then result NaN. other cases result xs:double valuerepresenting angle Î¸ radians therange Examples expression math:asin(()) returns(). expression math:asin(0) returns0.0e0. expression math:asin(-0.0e0) returns-0.0e0. expression math:asin(1.0e0) returns1.5707963267948966e0 expression math:asin(-1.0e0) returns-1.5707963267948966e0 expression math:asin(2.0e0) returnsxs:double('NaN'). expression math:asin(xs:double('NaN')) returnsxs:double('NaN'). expression math:asin(xs:double('INF')) returnsxs:double('NaN'). expression math:asin(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns arc cosine argument, result being therange radians. Signature math:acos($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result arc cosine treated as anangle radians, as defined specification acos functionapplied binary floating point values. Notes treatment invalidOperation exception isdefined Arithmetic operators onnumeric values. NaN, absolutevalue greater then result NaN. other cases result xs:double valuerepresenting angle Î¸ radians therange Examples expression math:acos(()) returns(). expression math:acos(0) returns1.5707963267948966e0 expression math:acos(-0.0e0) returns1.5707963267948966e0 expression math:acos(1.0e0) returns0.0e0. expression math:acos(-1.0e0) returns3.141592653589793e0 expression math:acos(2.0e0) returnsxs:double('NaN'). expression math:acos(xs:double('NaN')) returnsxs:double('NaN'). expression math:acos(xs:double('INF')) returnsxs:double('NaN'). expression math:acos(xs:double('-INF')) returnsxs:double('NaN'). Summary Returns arc tangent argument, result being therange radians. Signature math:atan($arg as xs:double?) as xs:double? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise result arc tangent treated as anangle radians, as defined specification atan functionapplied binary floating point values. Notes treatment underflow exception definedin Arithmetic operators numericvalues. positive negative result NaN then result isNaN. other cases result xs:double valuerepresenting angle Î¸ radians therange Examples expression math:atan(()) returns(). expression math:atan(0) returns0.0e0. expression math:atan(-0.0e0) returns-0.0e0. expression math:atan(1.0e0) returns0.7853981633974483e0 expression math:atan(-1.0e0) returns-0.7853981633974483e0 expression math:atan(xs:double('NaN')) returnsxs:double('NaN'). expression math:atan(xs:double('INF')) returns1.5707963267948966e0 expression math:atan(xs:double('-INF')) returns-1.5707963267948966e0 Summary Returns angle radians subtended origin thepoint plane coordinates y) positive x-axis,the result being range Signature math:atan2($y as xs:double, as xs:double) as xs:double Properties function Rules result value atan2(y, as definedin specification ofthe atan2 function applied binary floatingpoint values. Notes treatment underflow exception definedin Arithmetic operators numericvalues. either argument NaN then theresult NaN. positive positiveand finite, then rules overflow, underflow andapproximation) value atan2($y, isatan($y div positive negativeand finite, then same caveats) value ofatan2($y, Ï atan($y div$x). results special values arguments are shown inthe examples below. Examples expression math:atan2(+0.0e0, returns0.0e0. expression math:atan2(-0.0e0, returns-0.0e0. expression math:atan2(+0.0e0, -0.0e0) returnsmath:pi(). expression math:atan2(-0.0e0, -0.0e0) returns-math:pi(). expression math:atan2(-1, returns-math:pi() div expression math:atan2(+1, returns+math:pi() div expression math:atan2(-0.0e0, -1) returns-math:pi(). expression math:atan2(+0.0e0, -1) returns+math:pi(). expression math:atan2(-0.0e0, returns-0.0e0. expression math:atan2(+0.0e0, returns+0.0e0. 5Functions strings section functions operators Schema Part Datatypes Second Edition]xs:string datatype datatypes derived fromit. Stringtypes operators described section are defined thefollowing types. type name indented derived fromthe type name nearest above less level ofindentation. xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY also apply user-defined types derived above types. Functions assembleand disassemble strings Function Meaning fn:codepoints-to-string xs:string sequence fn:string-to-codepoints Returns sequence thatconstitute xs:string value. fn:codepoints-to-string Summary xs:string sequence Signature fn:codepoints-to-string($arg as xs:integer*) as xs:string Properties function Rules function returns string made up whoseUnicode are supplied willbe string emptysequence. Error Conditions dynamic error raised codepoints not permitted XML character. Examples expression fn:codepoints-to-string((66, returns expression fn:codepoints-to-string((2309, returns expression fn:codepoints-to-string(()) returns"". expression fn:codepoints-to-string(0) raiseserror FOCH0001. fn:string-to-codepoints Summary Returns sequence thatconstitute xs:string value. Signature fn:string-to-codepoints($arg as xs:string?) as xs:integer* Properties function Rules function returns sequence integers, integer beingthe Unicode corresponding string emptysequence, function returns empty sequence. Examples expression fn:string-to-codepoints("ThÃ©rÃ¨se")returns Comparisonof strings Function Meaning fn:compare Returns -1, depending before, equal according rules selectedcollation. fn:codepoint-equal Returns true strings are equal, consideredcodepoint-by-codepoint. Collations collation specification manner arecompared extension, ordered. values type isxs:string type derived fromxs:string are compared equivalently, sorted), thecomparisons are inherently performed according collation(even collation defined entirely codepoint values).The Model World Wide Web applications requiredifferent comparison ordering behaviors otherapplications. Similarly, users having particular linguisticexpectations require different behaviors other users.Consequently, collation be taken account whencomparing strings context. Several functions thefollowing section make use collation. Collations indicate different codepoints are, infact, equal comparison purposes areconsidered equivalent Swedish collations). Strings becompared codepoint-by-codepoint linguistically appropriatemanner, as defined collation. collations, especially based Collation Algorithm] be"tailored" various purposes. document not discusssuch tailoring, provide mechanism performtailoring. Instead, collation argument thevarious functions below tailored named collation. collationÂ· collationavailable implementation, sorts based codepointvalues. further details Unicode CodepointCollation ideal case, collation treat strings as equalif strings are identical after Unicode normalization. Thus,the Model WorldWide Web Normalization] strings besubjected early Unicode normalization collations willraise runtime errors encounter strings are notproperly normalized. However, not possible guarantee thatall strings XML documents are, fact, normalized, thatthey are normalized same manner. order maximizeinteroperability operations XML documents general, theremay be collations operate unnormalized strings othercollations implicitly normalize strings before comparing them.Applications choose kind collation best suited theirneeds. Note collations based Unicode collationalgorithm implicitly normalize strings before comparison andproduce equivalent results regardless string'snormalization. specification collations are named thatthe collation name be provided as argument stringfunctions. Functions allow specification collation do sowith argument type xs:string whoselexical form conform xs:anyURI. thecollation specified using relative URI reference, isresolved relative value Static Base URI property fromthe static context. specification also themanner default collation determined collationargument not specified calls functions use acollation allow be omitted. specification not define not collationURI dereferenced. collation URI be abstractidentifier, refer actual resource describing thecollation. resource, specification notdefine nature resource. possible candidate thatthe resource locale description expressed using LocaleData Markup Language: Data MarkupLanguage]. Functions such as fn:compare fn:max comparexs:string values use single collation URI toidentify aspects collation rules. means anyparameters such as strength collation be specifiedas part collation URI. example, suppose there acollation French collation basis ofbase characters. Collations use same basic rules, withhigher strengths, example, base characters accents, basecharacters, accents case, need be given differentnames, specifications use term collation refer analgorithm be parameterized, specification,each possible parameterization considered be distinctcollation. XQuery/XPath static context provision adefault collation be used string comparisons andordering operations. description static context inSection2.1.1 Static Context XP30. thedefault collation not specified user system, thedefault collation codepoint collationÂ·. Note: XML elements specify xml:langattribute indicate language associated content ofsuch element. specification not usexml:lang identify default collation becauseusing xml:lang not produce desired effects whenthe strings be compared have different xml:langvalues string multilingual. Unicode CodepointCollation collation URIhttp://www.w3.org/2005/xpath-functions/collation/codepointidentifies collation be recognized everyimplementation: referred as Unicode codepointcollation be confused Unicode collationalgorithm). Unicode codepoint collation not perform anynormalization supplied strings. collation defined as strings isconverted sequence integers using fn:string-to-codepointsfunction. sequences then compared as sequences are empty, strings are equal sequence empty other not, then stringcorresponding empty sequence less otherstring. first integer less firstinteger then string corresponding less string corresponding first integer greater thefirst integer then string corresponding greater string corresponding Otherwise first pair integers are equal), result isobtained applying same rules recursively fn:subsequence($A, andfn:subsequence($B,2) Note: Unicode codepoint collation not produce resultssuitable quality publishing printed indexes directories,it adequate many purposes restricted alphabet isused, such as sorting vehicle registrations. Choosing collation Many functions have signatures, signature includesa argument other thisargument. collation use functions determined thefollowing rules: function explicit collation, CollationA(e.g., optional collation argument specified call ofthe fn:compare function),then: CollationA supported implementation, thenCollationA used. Otherwise, dynamic error raised collation explicitly specified function thedefault collation XQuery/XPath static context CollationB,then: CollationB supported implementation, thenCollationB used. Otherwise, dynamic error raised Note: set collations are supported implementation option supportall collation URIs, case never raise thiserror. Summary Returns -1, depending before, equal according rules selectedcollation. Signatures fn:compare($comparand1 as xs:string?,$comparand2 as xs:string?) as xs:integer? fn:compare( as xs:string?, as xs:string?, as xs:string) as xs:integer? Properties form function collations. form function collations, static base uri. Rules Returns -1, depending value respectively less equal orgreater value according tothe rules collation used. collation used function determined according tothe rules Choosing acollation. either empty sequence, function returns empty sequence. function, called first signature, thesemantics operators onxs:string values. Examples expression fn:compare('abc', returns0. expression fn:compare('Strasse', default collationincludes provisions equate character Otherwise, returned value semanticsof default collation.). expression fn:compare('Strasse', returns collation identified URIhttp://example.com/deutsch provisions thatequate character Otherwise,the returned value semantics thatcollation.). expression fn:compare('Strassen', default collationincludes provisions treat differences character less strength thedifferences base characters, such as final fn:codepoint-equal Summary Returns true strings are equal, consideredcodepoint-by-codepoint. Signature fn:codepoint-equal( as xs:string?, as xs:string?) as xs:boolean? Properties function Rules either argument empty sequence, function returnsthe empty sequence. Otherwise, function returns true orfalse depending value equal value according Unicode codepointcollation(http://www.w3.org/2005/xpath-functions/collation/codepoint). Notes function xs:anyURI values becompared having specify Unicode codepointcollation. Examples expression fn:codepoint-equal("abcd", true(). expression fn:codepoint-equal("abcd", false(). expression fn:codepoint-equal("", returnstrue(). expression fn:codepoint-equal("", returns(). expression fn:codepoint-equal((), returns(). Functions string values following functions are defined values typexs:string types derived Function Meaning fn:concat Returns concatenation string values thearguments. fn:string-join Returns string created concatenating items asequence, defined separator adjacent items. fn:substring Returns portion value position indicated value continuing number value fn:string-length Returns number astring. fn:normalize-space Returns value leading andtrailing whitespace removed, sequences internal whitespacereduced single space character. fn:normalize-unicode Returns value after applying Unicodenormalization. fn:upper-case Converts string upper case. fn:lower-case Converts string lower case. fn:translate Returns value modified replacing orremoving individual characters. Notes: above operators functions are applied datatypesderived xs:string, are guaranteed returnvalues are instances xs:string, valuemight not be instance particular subtype ofxs:string were applied. strings returned fn:concat fn:string-join are notguaranteed be normalized. note fn:concat. fn:concat Summary Returns concatenation string values thearguments. Operator Mapping form function semantics ofthe operator. Signature fn:concat( as xs:anyAtomicType?, as xs:anyAtomicType?, as xs:string Properties function Rules function more xs:anyAtomicTypearguments xs:string. Thefunction returns xs:string theconcatenation values arguments after conversion. Ifany argument empty sequence, argument treated as thezero-length string. fn:concat function specified allow ormore arguments, are concatenated together. onlyfunction specified document variable numberof arguments. capability retained compatibility Path Language Version Notes mentioned Stringtypes Unicode normalization not automatically applied tothe result fn:concat. normalized result isrequired, fn:normalize-unicode canbe applied xs:string returned byfn:concat. following XQuery: let plan go Mu"let September"return concat($v1, either actual Unicode characterCOMBINING DIARESIS codepoint U+0308) return: plan go Mu?nchen September" either actual Unicode characterCOMBINING DIARESIS codepoint U+0308) Itis worth noting returned value not normalized NFC;however, normalized NFD. However, following XQuery: let plan go Mu"let September"return normalize-unicode(concat($v1, either actual Unicode characterCOMBINING DIARESIS codepoint U+0308) return: plan go MÃ¼nchen September" returned result normalized NFC. Examples expression fn:concat('un', returns"ungrateful". expression fn:concat('Thy ring', ancient',' ears.') returns"Thy old ring yet ancient ears.". expression fn:concat('Ciao!',()) returns"Ciao!". expression fn:concat('Ingratitude, fiend!') returns marble-hearted fiend!". expression fn:concat(01, true())returns expression returns"10/6". Summary Returns string created concatenating items asequence, defined separator adjacent items. Signatures fn:string-join($arg1 as xs:string*) as xs:string fn:string-join($arg1 as xs:string*,$arg2 as xs:string) as xs:string Properties function Rules effect calling single-argument version thisfunction same as calling version set string. function returns xs:string created byconcatenating items sequence inorder, using value as separator betweenadjacent items. value thezero-length string, then members areconcatenated separator. Notes value empty sequence, thefunction returns string. Examples expression fn:string-join(('Now', returns time expression fn:string-join(('Blow, returns blow, thouwinter wind!". expression fn:string-join((), Assume document: element as contextnode, Path Language fn:string-join(ancestor-or-self::*/name(), returns Summary Returns portion value position indicated value continuing number value Signatures fn:substring($sourceString as xs:string?,$start as xs:double) as xs:string fn:substring( as xs:string?, as xs:double, as xs:double) as xs:string Properties function Rules value emptysequence, function returns string. Otherwise, function returns string comprising index position greater equal value integer), specified)less sum rounded integers). characters returned do not extend ornegative, only characters positions greater arereturned. More specifically, argument version functionreturns characters position$p fn:round($start) fn:round($length) argument version function infinite thus returns position fn:round($start) above computations, rules op:numeric-less-than andop:numeric-greater-thanapply. Notes first character string located position notposition Examples expression fn:substring("motor car", returns" car". starting position theend are selected.). expression fn:substring("metadata", positions greaterthan equal less are selected.). expression fn:substring("12345", positions greaterthan equal less are selected.). expression fn:substring("12345", returns"12". positions greater orequal less are selected. first positionis are characters positions expression fn:substring("12345", -3) returns"". positions greater equalto less are selected.). expression fn:substring("12345", -3, returns"1". positions greater orequal -3 less are selected. first positionis character position expression fn:substring("12345", div 0E0, div 0E0 returnsNaN, NaN compared other numberreturns false, characters are selected.). expression fn:substring("12345", div 0E0)returns above.). expression fn:substring((), returns"". expression fn:substring("12345", -42, div0E0) returns atpositions greater equal -42 less thanINF are selected.). expression fn:substring("12345", -1 div 0E0, div0E0) returns value INF NaN, characters areselected.). Summary Returns number string. Signatures fn:string-length() as xs:integer fn:string-length($arg as xs:string?) as xs:integer Properties form function form function Rules function returns xs:integer equal thelength value Calling version function equivalentto calling fn:string-length(fn:string(.)). value empty sequence, thefunction returns xs:integer value Error Conditions not specified context item isabsentDM30,a dynamic error raised: Notes programming languages, greaterthan counts as character, not Examples expression fn:string-length("Harp not string,madam; past.") returns expression fn:string-length(()) returns0. fn:normalize-space Summary Returns value leading trailingwhitespace removed, sequences internal whitespace reduced toa single space character. Signatures fn:normalize-space() as xs:string fn:normalize-space($arg as xs:string?) as xs:string Properties form function form function Rules value empty sequence, thefunction returns string. function returns string constructed stripping leadingand trailing whitespace value andreplacing sequences more adjacent whitespace characterswith single space, #x20. whitespace characters are defined metasymbol S(Production Markup Language Edition)]. argument supplied, then defaults tothe string value using fn:string) context item(.). Error Conditions argument supplied context item dynamic error raised: Notes definition whitespace unchanged Markup Language Examples expressionfn:normalize-space(" wealthy curled darlings nation. wealthy curled darlings ournation.". expression fn:normalize-space(()) returns"". fn:normalize-unicode Summary Returns value after applying Unicodenormalization. Signatures fn:normalize-unicode($arg as xs:string?) as xs:string fn:normalize-unicode( as xs:string?, as xs:string) as xs:string Properties function Rules value empty sequence, thefunction returns string. single-argument version function used, theresult same as calling version set string Otherwise, function returns value according rules normalization formidentified value effective value thevalue expression fn:upper-case(fn:normalize-space($normalizationForm)). effective value then function returns value Unicode Normalization Form C effective value then function returns value Unicode Normalization Form D effective value then function returns value inUnicode Normalization Form KC effective value then function returns value Unicode Normalization Form KD effective value then function returns value converted fully normalized form. effective value thezero-length string, normalization performed returned. Normalization forms NFC, NFD, NFKC, NFKD, algorithmsto be used converting string forms, aredefined NormalizationForms]. motivation normalization form FULLY-NORMALIZED isexplained Model forthe World Wide Web Normalization]. However, as thatspecification did not progress working draft status, thenormative specification as string fully-normalized innormalization form NFC as defined Normalization Forms], not start composing character. composing character character thefollowing: second character canonical decomposition mapping ofsome character not listed Composition ExclusionTable defined Forms]; non-zero canonical combining class defined Unicode Standard]). string converted FULLY-NORMALIZED form as first character string composing character,prepend single space convert resulting string normalization form NFC. Conforming implementations supportnormalization form supportnormalization forms also support other normalization formswith semantics. version Unicode therefore, ofthe normalization algorithms underlying data) issupported implementation. Normalization Forms] fordetails stability policy regarding changes thenormalization rules future versions Unicode. inputstring codepoints are unassigned relevantversion Unicode, normalization rules aredefined, fn:normalize-unicode function leaves suchcodepoints unchanged. implementation supports requestednormalization form then be able handleevery input string raising error. Error Conditions dynamic error raised effective value ofthe argument not thevalues supported implementation. Summary Converts string upper case. Signature fn:upper-case($arg as xs:string?) as xs:string Properties function Rules value empty sequence, thezero-length string returned. Otherwise, function returns value translating upper-case correspondent as defined inthe appropriate case mappings section Unicode standard[The Unicode Standard]. versions ofUnicode beginning update, only locale-insensitivecase mappings be applied. Beginning version future versions) Unicode, precise mappings are describedin default case operations, are full case mappings theabsence tailoring particular languages environments.Every lower-case character not have upper-casecorrespondent, as as upper-case character, includedin returned value original form. Notes Case mappings change length string. general, thefn:upper-case fn:lower-case functions are notinverses other: fn:lower-case(fn:upper-case($arg))is not guaranteed return isfn:upper-case(fn:lower-case($arg)). Latin smallletter dotless used Turkish) perhaps most prominentlower-case letter not round-trip. Latin capitalletter dot above most prominent upper-case letterwhich not round trip; there are others, such as Latin capitalletter Sharp S introduced Unicode functions not always be linguistically appropriate(e.g. Turkish dot) appropriate application(e.g. titlecase). cases such as Turkish, simple translationshould be used first. function not sensitive locale, results willnot always match user expectations. Quebec, example, thestandard uppercase equivalent metropolitanFrance more commonly only supported bythe functions as defined. Many characters class Ll lack uppercase equivalents theUnicode case mapping tables; many characters class Lu lacklowercase equivalents. Examples expression fn:upper-case("abCd0") returns"ABCD0". Summary Converts string lower case. Signature fn:lower-case($arg as xs:string?) as xs:string Properties function Rules value empty sequence, thezero-length string returned. Otherwise, function returns value translating lower-case correspondent as defined inthe appropriate case mappings section Unicode standard[The Unicode Standard]. versions ofUnicode beginning update, only locale-insensitivecase mappings be applied. Beginning version future versions) Unicode, precise mappings are describedin default case operations, are full case mappings theabsence tailoring particular languages environments.Every upper-case character not have lower-casecorrespondent, as as lower-case character, includedin returned value original form. Notes Case mappings change length string. general, thefn:upper-case andfn:lower-case functions are not inverses eachother: fn:lower-case(fn:upper-case($arg)) notguaranteed return fn:upper-case(fn:lower-case($arg)).The Latin small letter dotless used Turkish) perhapsthe most prominent lower-case letter not round-trip. TheLatin capital letter dot above most prominentupper-case letter not round trip; there are others, suchas Latin capital letter Sharp S introduced inUnicode functions not always be linguistically appropriate(e.g. Turkish dot) appropriate application(e.g. titlecase). cases such as Turkish, simple translationshould be used first. function not sensitive locale, results willnot always match user expectations. Quebec, example, thestandard uppercase equivalent metropolitanFrance more commonly only supported bythe functions as defined. Many characters class Ll lack uppercase equivalents theUnicode case mapping tables; many characters class Lu lacklowercase equivalents. Examples expression fn:lower-case("ABc!D") returns"abc!d". Summary Returns value modified replacing orremoving individual characters. Signature fn:translate( as xs:string?, as xs:string, as xs:string) as xs:string Properties function Rules value empty sequence, thefunction returns string. Otherwise, function returns result string constructed byprocessing value order,according following rules: character not appear value then added result stringunchanged. character first value position M, thevalue M more charactersin length, then character position M added result string. character first value position M, thevalue less Mcharacters length, then character omitted resultstring. Notes string then thefunction returns unchanged. character more once first occurrence action taken. longer excess characters are ignored. Examples expression fn:translate("bar","abc","ABC")returns expression fn:translate("--aaa--","abc-","ABC")returns expression fn:translate("abcdabc", based substring matching functions described section examine string$arg1 string$arg2 as substring. result substring so,on range collationÂ· used, thissimply determining acontiguous sequence characters are thesame, codepoints characters collation specified, rules are more complex. collations support capability deciding areconsidered equal, not, strings beregarded as preceding other. functions such as fn:compare, isrequired. other functions, such as fn:contains, collation needsto support additional property: be able decompose thestring sequence collation units, unit consisting ofone more characters, such strings be compared bypairwise comparison units. unit" equivalentto element" as defined Collation Algorithm].) Thestring then considered contain$arg2 as substring sequence collationunits corresponding subsequence thesequence collation units corresponding characters matchare characters corresponding collation units. rule occasionally lead surprises. example,consider collation treats as equal. Itmight do treating as representing collation units,in case expression fn:contains("JÃ¤ger", willreturn true. Alternatively, collation treat"ae" as single collation unit, case expressionfn:contains("Jaeger","eg") return false. results ofthese functions thus depend strongly properties thecollation used. addition, collations specify collation unitsshould be ignored matching. hyphen ignoredcollation unit, then fn:contains("code-point","codepoint") be true, fn:contains("codepoint", also be true. definitions below, refer terms match andminimal match as defined definitions DS2 DS4 Collation Algorithm]. Inapplying definitions: C collation; value argument specified, otherwise thedefault collation. P substring Q containing string$arg1 boundary condition B satisfied startand end string, characters belong todifferent collation units elements" language Collation Algorithm]).It not satisfied characters belong samecollation unit. possible define collations do not have abilityto decompose string units suitable substring matching.An argument function defined section be URI thatidentifies collation able compare strings, butthat not have capability split string intocollation units. Such collation cause function fail,or give unexpected results be rejected as anunsuitable argument. ability decompose strings intocollation units property collation. Function Meaning fn:contains Returns true string as substring, taking collations intoaccount. fn:starts-with Returns true string as leading substring, taking collations intoaccount. fn:ends-with Returns true string as trailing substring, taking collations intoaccount. fn:substring-before Returns part firstoccurrence taking collations intoaccount. fn:substring-after Returns part firstoccurrence taking collations intoaccount. Summary Returns true string as substring, taking collations intoaccount. Signatures fn:contains($arg1 as xs:string?,$arg2 as xs:string?) as xs:boolean fn:contains( as xs:string?, as xs:string?, as xs:string) as xs:boolean Properties form function collations. form function collations, static base uri. Rules value theempty sequence, only ignorable collation units, isinterpreted as string. value string,then function returns true. value string,the function returns false. collation used function determined according tothe rules Choosing acollation. function returns xs:boolean indicatingwhether not value thebeginning, end, anywhere within) least sequence ofcollation units minimal match thecollation units value according tothe collation used. Note: Minimal match defined Collation Algorithm]. Error Conditions dynamic error be raised[err:FOCH0004] ifthe specified collation not support collation units. Examples collation used examples,http://example.com/CollationA collation whichboth are ignorable collation units. collation unit" equivalent collationelement" CollationAlgorithm]. expression fn:contains returnstrue(). expression fn:contains false(). expression fn:contains returnstrue(). first rule applied, followed bythe second rule.). expression fn:contains returnstrue(). expression fn:contains returnstrue(). expression fn:contains returnstrue(). expression fn:contains returnstrue(). second argument onlyignorable collation units equivalent Summary Returns true string as leading substring, taking collations intoaccount. Signatures fn:starts-with($arg1 as xs:string?,$arg2 as xs:string?) as xs:boolean fn:starts-with( as xs:string?, as xs:string?, as xs:string) as xs:boolean Properties form function collations. form function collations, static base uri. Rules value theempty sequence, only ignorable collation units, isinterpreted as string. value string,then function returns true. value string value not string, then functionreturns false. collation used function determined according tothe rules Choosing acollation. function returns xs:boolean indicatingwhether not value starts asequence collation units match thecollation units according collationthat used. Note: Match defined Collation Algorithm]. Error Conditions dynamic error be raised[err:FOCH0004] ifthe specified collation not support collation units. Examples collation used examples,http://example.com/CollationA collation whichboth are ignorable collation units. collation unit" equivalent collationelement" CollationAlgorithm]. expression fn:starts-with("tattoo", true(). expression fn:starts-with false(). expression fn:starts-with returnstrue(). expression fn:starts-with returnstrue(). expression fn:starts-with returnstrue(). expression fn:starts-with returnstrue(). expression fn:starts-with returnstrue(). second argument onlyignorable collation units equivalent expression fn:starts-with returnstrue(). Summary Returns true string as trailing substring, taking collations intoaccount. Signatures fn:ends-with($arg1 as xs:string?,$arg2 as xs:string?) as xs:boolean fn:ends-with( as xs:string?, as xs:string?, as xs:string) as xs:boolean Properties form function collations. form function collations, static base uri. Rules value theempty sequence, only ignorable collation units, isinterpreted as string. value string,then function returns true. value string value not string, then functionreturns false. collation used function determined according tothe rules Choosing acollation. function returns xs:boolean indicatingwhether not value starts asequence collation units match thecollation units according collationthat used. Note: Match defined Collation Algorithm]. Error Conditions dynamic error be raised[err:FOCH0004] ifthe specified collation not support collation units. Examples collation used examples,http://example.com/CollationA collation whichboth are ignorable collation units. collation unit" equivalent collationelement" CollationAlgorithm]. expression fn:ends-with true(). expression fn:ends-with false(). expression fn:ends-with returnstrue(). expression fn:ends-with returnstrue(). expression fn:ends-with returnstrue(). expression fn:ends-with returnstrue(). expression fn:ends-with returnstrue(). second argument onlyignorable collation units equivalent expression fn:ends-with returnstrue(). fn:substring-before Summary Returns part firstoccurrence taking collations intoaccount. Signatures fn:substring-before($arg1 as xs:string?,$arg2 as xs:string?) as xs:string fn:substring-before( as xs:string?, as xs:string?, as xs:string) as xs:string Properties form function collations. form function collations, static base uri. Rules value theempty sequence, only ignorable collation units, isinterpreted as string. value string,then function returns string. value not contain stringthat equal value then functionreturns string. collation used function determined according tothe rules Choosing acollation. function returns substring value value first occurrence sequence collation units providesa minimal match collation units collation used. Note: Minimal match defined Collation Algorithm]. Error Conditions dynamic error be raised[err:FOCH0004] ifthe specified collation not support collation units. Examples collation used examples,http://example.com/CollationA collation whichboth are ignorable collation units. collation unit" equivalent collationelement" CollationAlgorithm]. expression fn:substring-before returns expression fn:substring-before returns expression fn:substring-before returns"". expression fn:substring-before returns"abc". expression fn:substring-before returns"abc--". expression fn:substring-before returns"a*b*". expression fn:substring-before returns"". second argument only ignorablecollation units equivalent fn:substring-after Summary Returns part firstoccurrence taking collations intoaccount. Signatures fn:substring-after($arg1 as xs:string?,$arg2 as xs:string?) as xs:string fn:substring-after( as xs:string?, as xs:string?, as xs:string) as xs:string Properties form function collations. form function collations, static base uri. Rules value theempty sequence, only ignorable collation units, isinterpreted as string. value string,then function returns value value not contain stringthat equal value then functionreturns string. collation used function determined according tothe rules Choosing acollation. function returns substring value value first occurrence sequence collation units providesa minimal match collation units collation used. Note: Minimal match defined Collation Algorithm]. Error Conditions dynamic error be raised[err:FOCH0004] ifthe specified collation not support collation units. Examples collation used examples,http://example.com/CollationA collation whichboth are ignorable collation units. collation unit" equivalent collationelement" CollationAlgorithm]. expression fn:substring-after("tattoo", expression fn:substring-after("tattoo","tattoo") returns expression fn:substring-after((), returns"". expression fn:substring-after("abcdefghi", returns"fghi". expression fn:substring-after("abc--d-e-fghi","--d-e-", returns"-fghi". expression fn:substring-after returns"*f*g*h*i*". expression fn:substring-after returns"Eureka!". second argument onlyignorable collation units equivalent Stringfunctions use regular expressions functions described section make use aregular expression syntax pattern matching. describedbelow. Function Meaning fn:matches Returns true supplied string matches given regularexpression. fn:replace Returns string produced input string replacingany substrings match given regular expression asupplied replacement string. fn:tokenize Returns sequence strings constructed splitting theinput separator found; separator substringthat matches given regular expression. fn:analyze-string string using regular expression, returning XMLstructure parts input string matchedor failed match regular expression, case ofmatched substrings, substrings matched capturing groupin regular expression. Regularexpression syntax regular expression syntax used functions definedin terms regular expression syntax specified XML Schema(see Schema Part Datatypes SecondEdition]), turn based establishedconventions languages such as Perl. However, because XML Schemauses regular expressions only validity checking, somefacilities are widely-used languages such as Perl. Thissection, therefore, extensions XML Schema regularexpressions syntax reinstate capabilities. Note: recommended implementers consult Regular Expressions] informationon using regular expression processing Unicode characters. regular expression syntax semantics are identical tothose defined Schema Part Second Edition] following additions: meta-characters, areadded. default, meta-character matches thestart entire string, matches end ofthe entire string. multi-line mode, matches thestart line start entire string, theposition immediately after newline character), matches end line end theentire string, position immediately before newlinecharacter). Newline here means character #x0Aonly. means production Part Datatypes Second Edition]: Char modified read: Char XSD grammar regular expressions uses sameproduction rule, renumbered renamed affected same way. characters #x5B #x5Dcorrespond Note: definition Char Schema Part Datatypes Second Edition]has known error left brace rightbrace error corrected here. following production: charClass charClassEsc charClassExpr modified read: charClass charClassEsc charClassExpr Using XSD as baseline equivalent change theproduction: charClass SingleCharEsc charClassEsc WildCardEsc read: charClass SingleCharEsc charClassEsc WildCardEsc Reluctant quantifiers are supported. are indicatedby following quantifier. Specifically: X?? matches X, once not X*? matches X, more times X+? matches X, more times X{n}? matches X, exactly n times X{n,}? matches X, least n times X{n,m}? matches X, least n times, not morethan m times effect quantifiers regular expressionmatches shortest possible substring consistent withthe match as whole succeeding. regular expression matches longest possiblesubstring. achieve production Part Datatypes Second Edition]: quantifier quantity changed quantifier quantity XSD version regular expression grammar, thisrule unchanged, renumbered Note: Reluctant quantifiers have effect results theboolean fn:matchesfunction, since function only interested discoveringwhether match not Sub-expressions regular expression arerecognized. regular expression syntax defined Schema Part Datatypes Second Edition]allows regular expression contain parenthesizedsub-expressions, special significance them.Some operations associated regular expressions back-references, fn:replace function) allow accessto parts input string matched sub-expression(called captured substrings). sub-expressions arenumbered according position opening parenthesis inleft-to-right order top-level regular expression: thefirst opening parenthesis captured substring thesecond captured substring so thesubstring captured entire regular expression. parentheses are used part regular expressionthat matched more once constructthat repetition), then only last substring itmatched be captured. Note rule not sufficient inall cases ensure unambiguous result, especially caseswhere regular expression nested repeatingconstructs, repeating construct matches azero-length string. such cases implementation-dependentwhich substring captured. example given regularexpression input string"aaaa", implementation legitimately captureeither length string as contentof captured subgroup. Non-capturing groups are also recognized. are indicated bythe syntax production rule foratom Schema Part Second Edition] changed replace thealternative: regExp regExp new versions XSD XSD productionrules atom, below.) presence optional effect onthe set strings match regular expression, causesthe left parenthesis not be counted operations numberthe groups regular expression, example fn:replace function. Back-references are allowed outside character classexpression. back-reference additional kind atom.The construct N singledigit always recognized as back-reference; followedby further digits, digits are taken be part theback-reference only resulting numberNN such back-reference preceded byNN more unescaped opening parentheses. regularexpression invalid back-reference subexpressionthat not exist closing parenthesis afterthe back-reference. back-reference matches string was matched theNth capturing subexpression regularexpression, parenthesized subexpression openingleft parenthesis Nth unescaped left parenthesiswithin regular expression. example, regular expression('|").*\1 matches sequence characters delimitedeither apostrophe start end, quotationmark start end. string matched Nth capturingsubexpression, back-reference interpreted as matching azero-length string. Combining change introduction non-capturinggroups above), back-references change followingproduction: atom Char charClass regExp atom Char charClass regExp')' backReference backReference respect XSD version regular expressiongrammar, effect change: atom NormalChar charClass regExp')' atom NormalChar charClass backReference backReference Note: character class expression, digit invalid. other regular expressionlanguages interpret as octal characterreference. Single character are extended allow character be escaped. following production ischanged: XSD version regular expression grammar, theproduction rule SingleCharEsc unchanged, isrenumbered regular expression uses Unicode block name notdefined version(s) Unicode supported processor(for example deemed beinvalid Note: XSD not situation be handled; XSD1.1 be handled treating characters asmatching. Note: Part rulesfor interpretation hyphens square brackets aregular expression have been clarified; semantics ofregular expressions are longer tied specific version ofUnicode. Flags functions provide optional parameter,$flags, set options interpretation theregular expression. parameter xs:string,in individual letters are used set options. presenceof letter string option itsabsence option off. Letters appear anyorder be repeated. there are characters present arenot defined here as flags, then dynamic error israised following options are defined: s: present, match calls single-line mode.) sflag not specified, meta-character matchesany character newline orcarriage return character. dot-allmode, meta-character matches characterwhatsoever. Suppose input twolines. not be matched regular expression"hello.*world" dot-all mode enabled. m: present, match multi-linemode. default, meta-character matches thestart entire string, matches end entirestring. multi-line mode, matches start anyline start entire string, positionimmediately after newline character other newlinethat as last character string), matches end line theposition immediately before newline character, end theentire string there newline character end thestring). Newline here means character #x0Aonly. present, match incase-insensitive mode. detailed rules are as theserules, character C2 considered be case-variantof character C1 following XPath expression returnstrue characters are considered as stringsof length codepoint collationÂ· used: fn:lower-case(C1) eqfn:lower-case(C2) fn:upper-case(C1) eqfn:upper-case(C2) Note case-variants character definitionare always single characters. normal character used as atom,it set containing character itscase-variants. example, regular expression matchboth character range charRange inthe XSD grammar, replaced productions charRangeand singleChar XSD setcontaining characters match absence ofthe flag, together case-variants. Forexample, regular expression match lettersA-Z letters a-z. also match certain othercharacters such as #x212A SIGN), sincefn:lower-case("#x212A")is rule also character range used characterclass subtraction thus willmatch characters such as not match"I", rule also character range used as part anegative character group: thus match characterexcept being only case-variants inUnicode). back-reference compared using case-blind comparison: thatis, character either be same as correspondingcharacter previously matched string, be acase-variant character. example, strings match regular expression"([md])[aeiou]\1" flag used. other constructs are unaffected example, match upper-case lettersonly. present, whitespace characters #xA, #xDand #x20) regular expression are removed prior matchingwith exception: whitespace characters character classexpressions are not removed. flagcan be used, example, break up long regular expressions intoreadable lines. Examples: fn:matches("helloworld", returns true() fn:matches("helloworld", returns false() fn:matches("hello world", returns true() fn:matches("hello world", returns false() present, characters regularexpression are treated as representing not asmetacharacters. effect, character normally havea special meaning regular expression implicitly escaped bypreceding backslash. Furthermore, flag present, characters$ have special significance whenused replacement string supplied fn:replace function. flag be used conjunction iflag. used together m,s, flag, flag noeffect. Examples: fn:tokenize("12.3.5.6", returns fn:replace("a\b\c", returns fn:replace("a/b/c", returns fn:matches("abcd", returns false() fn:matches("Mr. B. Obama", returns true() Summary Returns true supplied string matches given regularexpression. Signatures fn:matches($input as xs:string?,$pattern as xs:string) as xs:boolean fn:matches( as xs:string?, as xs:string, as xs:string) as xs:boolean Properties function Rules effect calling first version function(omitting argument same as theeffect calling second version set string. Flags are defined Flags. empty sequence, interpretedas string. function returns true orsome substring matches regularexpression supplied as Otherwise, thefunction returns false. matching rules areinfluenced value present. Error Conditions dynamic error raised value invalid according rules describedin Regular expressionsyntax. dynamic error raised value invalid according rules described Flags. Notes metacharacters areused as anchors, string considered match pattern ifany substring matches pattern. anchors are used, theanchors match start/end string string mode), orthe start/end line multi-line mode). different behavior patterns Schema Part Datatypes Second Edition],where regular expressions are implicitly anchored. Regular expression matching defined basis Unicodecode points; account collations. Examples expression fn:matches("abracadabra", true(). expression fn:matches("abracadabra", true(). expression fn:matches("abracadabra", false(). Given source document: let author="Wilhelm Busch"> Kaum hat der Hahn gesehen, FÃ¤ngt auch schon zu krÃ¤hen: Kikeriki! Kikikerikih!! Tak, tak, tak! da kommen sie. following function calls produce following results, withthe poem element as context node: expression fn:matches($poem, false(). expression fn:matches($poem, returns true(). expression fn:matches($poem, returns true(). expression fn:matches($poem,"^Kaum.*gesehen,$") returns false(). expression fn:matches($poem, true(). Summary Returns string produced input string replacing anysubstrings match given regular expression suppliedreplacement string. Signatures fn:replace( as xs:string?, as xs:string, as xs:string) as xs:string fn:replace( as xs:string?, as xs:string, as xs:string, as xs:string) as xs:string Properties function Rules effect calling first version function(omitting argument same as theeffect calling second version set string. Flags are defined Flags. argument interpreted samemanner as fn:matches function. empty sequence, interpretedas string. function returns xs:string obtainedby replacing non-overlapping substring matches given occurrence ofthe string. overlapping substrings matchthe then only first theone first first string)is replaced. flag present, replacement string isused as Otherwise, variable be used refer thesubstring captured Nth parenthesized sub-expression theregular expression. match pattern, variablesare assigned value content matched relevantsub-expression, modified replacement string thensubstituted matched thepattern. substring captured theregular expression as whole. More specifically, rules are as whereS number parenthesized sub-expressions inthe regular expression, N decimal numberformed taking digits consecutively follow character: N=0, then variable replacedby substring matched regular expression as whole. thenthe variable replaced substring captured Nthparenthesized sub-expression. Nth parenthesizedsub-expression was not matched, then variable replaced bythe string. S<N<=9, then thevariable replaced string. Otherwise N>S andN>9), last digit Nis taken be literal character be included thereplacement string, rules are reapplied using numberN formed stripping off last digit. example, replacement string there are substrings, result value thesubstring matches second sub-expression, followed thedigit flag used, literal replacement string be written literal character bewritten as alternatives pattern match sameposition then match chosenis matched first alternative. example: fn:replace("abcd", returns Error Conditions dynamic error raised value invalid according rules describedin section Regular expressionsyntax. dynamic error raised value invalid according rules described insection Regular expressionsyntax. dynamic error raised pattern matches azero-length string, expression fn:matches("", true. not error, however, acaptured substring dynamic error raised value characterthat not immediately followed digit andnot immediately preceded dynamic error raised value characterthat not part pair, isimmediately followed character. Notes input string substring matches theregular expression, result function single stringidentical input string. Examples expression replace("abracadabra", expression replace("abracadabra", expression replace("abracadabra", expression replace("abracadabra", expression replace("abracadabra", returns expression replace("abracadabra", error, because pattern matches expression replace("AAAA", returns"b". expression replace("AAAA", returns"bbbb". expression replace("darted", returns firstd replaced.). Summary Returns sequence strings constructed splitting inputwherever separator found; separator substring thatmatches given regular expression. Signatures fn:tokenize($input as xs:string?,$pattern as xs:string) as xs:string* fn:tokenize( as xs:string?, as xs:string, as xs:string) as xs:string* Properties function Rules effect calling first version function(omitting argument same as theeffect calling second version set string. Flags are defined Flags. argument interpreted same wayas fn:matchesfunction. empty sequence, string, function returnsthe empty sequence. function returns sequence strings formed breakingthe string sequence strings, treatingany substring matches as separator.The separators are not returned. separator start result sequence start string.Zero-length strings also occur result sequence aseparator end string, orif adjacent substrings match supplied$pattern. alternatives supplied match same position string,then match chosen first. example: fn:tokenize("abracadabra", returns Error Conditions dynamic error raised value invalid according rules describedin section Regular expressionsyntax. dynamic error raised value invalid according rules described insection Regular expressionsyntax. dynamic error raised supplied$pattern matches string, iffn:matches("", returns true. Notes input string not length, separators arefound input string, result function singlestring identical input string. Examples expression fn:tokenize("The cat sat mat","\s+") returns expression fn:tokenize("1, expression fn:tokenize("1,15,,24,50,", fn:tokenize("abba", thedynamic error expression fn:tokenize("Some unparsed HTML<BR> text", returns("Some unparsed", fn:analyze-string Summary string using regular expression, returning XMLstructure parts input string matchedor failed match regular expression, case ofmatched substrings, substrings matched capturing groupin regular expression. Signatures fn:analyze-string( as xs:string?, as xs:string) as element(fn:analyze-string-result) fn:analyze-string( as xs:string?, as xs:string, as xs:string) as element(fn:analyze-string-result) Properties function Rules effect calling first version function(omitting argument same as theeffect calling second version set string. Flags are defined Flags. argument interpreted same wayas fn:matchesfunction. empty sequence functionbehaves as were string. Inthis situation result be element node nochildren. function returns element node local name isanalyze-string-result. element itsdescendant elements have namespace URIhttp://www.w3.org/2005/xpath-functions. namespaceprefix dependentÂ·. children element are sequenceof fn:match fn:non-match elements.This sequence formed breaking stringinto sequence strings, returning substring as content matchelement, intervening substring as content anon-match element. More specifically, function starts beginning theinput string attempts find first substring matchesthe regular expression. there are several matches, firstmatch defined be starting position firstin string. several alternatives regularexpression match same position input string,then match chosen first alternative thatmatches. example, input string quick brownfox jumps regular expression isjump|jumps, then match chosen isjump. Having found first match, instruction proceeds findthe second subsequent matches repeating search, startingat first was not included previousmatch. input string thus partitioned sequence ofsubstrings, match regular expression, otherswhich do not match substring contain least onecharacter. sequence represented result thesequence fn:match fn:non-matchchildren returned element node; string value thefn:match fn:non-match element bethe corresponding substring stringvalue returned element node therefore be same as$input. content fn:non-match element always asingle text node. content fn:match element, however, ingeneral sequence text nodes fn:group elementchildren. fn:group element nrattribute having integer value N thesubstring captured Nth parenthesizedsub-expression regular expression. capturingsubexpression there be most correspondingfn:group element fn:match elementin result. function called twice same arguments, dependentÂ· calls return same elementnode distinct deep equal) element nodes. respect itis base URI element nodes result dependentÂ· schema defined structure returned element,containing definitions below. returned element itsdescendants have type annotations obtained validating thereturned element schema, function usedin environment type annotations are not supported Basic XSLT Processor), case elements willall be annotated as xs:untyped attributes asxs:untypedAtomic. Note: free-standing copy schema be found analyze-string.xsd version="1.0" encoding="UTF-8"?><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.w3.org/2005/xpath-functions" xmlns:fn="http://www.w3.org/2005/xpath-functions" elementFormDefault="qualified"> name="analyze-string-result" type="fn:analyze-string-result-type"/> name="match" type="fn:match-type"/> name="non-match" type="xs:string"/> name="group" type="fn:group-type"/> name="analyze-string-result-type" mixed="true"> minOccurs="0" maxOccurs="unbounded"> ref="fn:match"/> ref="fn:non-match"/> name="match-type" mixed="true"> ref="fn:group" minOccurs="0" maxOccurs="unbounded"/> name="group-type" mixed="true"> ref="fn:group" minOccurs="0" maxOccurs="unbounded"/> name="nr" type="xs:positiveInteger"/> Error Conditions dynamic error raised value invalid according rules describedin section Regular expressionsyntax. dynamic error raised value invalid according rules described insection Regular expressionsyntax. dynamic error raised supplied$pattern matches string, iffn:matches("", returns true. Notes declarations definitions above schema are notautomatically available static context thefn:analyze-string call other expression).The contents static context are host-language defined, andin host languages are implementation-defined. Examples following examples, result document shown inserialized form, whitespace element nodes. Thiswhitespace not actually present result. expression fn:analyze-string("The cat sat themat.", returns whitespace added forlegibility): xmlns="http://www.w3.org/2005/xpath-functions"> expression fn:analyze-string("2008-12-03","^(\d+)\-(\d+)\-(\d+)$") returns whitespace added forlegibility): xmlns="http://www.w3.org/2005/xpath-functions"> nr="1">2008</group>-<group nr="2">12</group>-<group nr="3">03</group></match></analyze-string-result> expression fn:analyze-string("A1,C15,,D24, X50,","([A-Z])([0-9]+)") returns whitespace added forlegibility): xmlns="http://www.w3.org/2005/xpath-functions"> nr="1">A</group><group nr="2">1</group></match> nr="1">C</group><group nr="2">15</group></match> nr="1">D</group><group nr="2">24</group></match> nr="1">X</group><group nr="2">50</group></match> 6Functions manipulate URIs section functions manipulate URI values,either as instances xs:anyURI as strings. Function Meaning fn:resolve-uri relative IRI reference absolute IRI. fn:encode-for-uri reserved characters string intended beused path segment URI. fn:iri-to-uri Converts string containing IRI URI according therules fn:escape-html-uri URI same way HTML user agents handleattribute values expected contain URIs. Summary relative IRI reference absolute IRI. Signatures fn:resolve-uri($relative as xs:string?) as xs:anyURI? fn:resolve-uri($relative as xs:string?,$base as xs:string) as xs:anyURI? Properties form function static base uri. form function Rules second argument absent, effect same ascalling function value fn:static-base-uri() asthe second argument. function defined operate IRI references as definedin implementationmust permit arguments are valid accordingto specification. addition, implementationmay accept strings conform therules relative) Legacy Extended IRI references asdefined extended IRIs XML resourceidentification]. purposes section, termsIRI IRI reference include extensions, insofar as theimplementation support empty sequence, functionreturns empty sequence. absolute IRI defined above),then returned unchanged. Otherwise, function relative IRI reference$relative base IRI algorithm defined treating not be valid RFC3986 URI orrelative reference same way RFC3986 treats unreservedcharacters. percent-encoding place. Error Conditions first form function value base-uri property static context.A dynamic error raised base-uri property isnot initialized static context. dynamic error raised isnot valid IRI according rules RFC3987, extended animplementation-defined subset extensions permitted LEIRI,or not suitable relative reference use as input tothe RFC3986 resolution algorithm extended handle additionalunreserved characters. dynamic error raised nota valid IRI according rules RFC3987, extended animplementation-defined subset extensions permitted LEIRI,or not suitable IRI use as input chosenresolution algorithm example, relative IRIreference, non-hierarchic URI, afragment identifier). dynamic error raised chosen resolutionalgorithm other reason. Notes Resolving URI not dereference merely asyntactic operation algorithms cited RFCs include variations thatare optional recommended rather mandatory; alsodescribe common practices are not recommended, whichare permitted backwards compatibility. cited RFCspermit variations behavior, so specification. family specifications, phrase relative URI IRI) reference" be understood as usingthe rules function, otherwise stated. Summary reserved characters string intended beused path segment URI. Signature fn:encode-for-uri($uri-part as xs:string?) as xs:string Properties function Rules empty sequence, functionreturns string. function URI escaping rules defined section2 thexs:string supplied as Theeffect function escape reserved characters. suchcharacter string replaced percent-encoded formas described forconsistency, URI producers normalizers use uppercasehexadecimal digits percent-encodings, function mustalways generate hexadecimal values using upper-case lettersA-F. Notes characters are escaped identified theupper- lower-case letters A-Z, digits HYPHEN-MINUS("-"), LOW LINE FULL STOP TILDE function URI delimiters therefore beused indiscriminately encode characters pathsegment. function invertible not idempotent. becausea string containing percent character be modified byapplying function: example Examples expressionfn:encode-for-uri("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")returns"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean".(This probably not user intended because thedelimiters have been encoded.). expression concat("http://www.example.com/",encode-for-uri("~bÃ©bÃ©")) returns"http://www.example.com/~b%C3%A9b%C3%A9". expression concat("http://www.example.com/",encode-for-uri("100% organic")) returns"http://www.example.com/100%25%20organic". Summary Converts string containing IRI URI according therules Signature fn:iri-to-uri($iri as xs:string?) as xs:string Properties function Rules empty sequence, function returnsthe string. Otherwise, function converts value URI according rules given Section percent-encoding characters areallowed IRI not URI. acharacter invalid IRI, such as space character(see note below), invalid character replaced itspercent-encoded form as described before conversion performed. forconsistency, URI producers normalizers use uppercasehexadecimal digits percent-encodings, function mustalways generate hexadecimal values using upper-case lettersA-F. Notes function idempotent not invertible. inputsMy Documents beconverted output function not check avalid IRI. treats as thestring. following printable ASCII characters are invalid IRI:"<", space, characters not appear IRI,if do appear bepercent-encoded. addition, characters outside rangex20-x7E be percent-encoded because areinvalid URI. function not escape PERCENT SIGN andthis character not allowed data URI, users wishingto convert character strings as file names) include URI manually escape replacing Examples expression fn:iri-to-uri("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")returns"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean". expression fn:iri-to-uri("http://www.example.com/~bÃ©bÃ©") returns"http://www.example.com/~b%C3%A9b%C3%A9". fn:escape-html-uri Summary URI same way HTML user agents handleattribute values expected contain URIs. Signature fn:escape-html-uri($uri as xs:string?) as xs:string Properties function Rules empty sequence, function returnsthe string. Otherwise, function exceptprintable characters US-ASCII coded character set,specifically inclusive. Eachcharacter be escaped replaced anescape sequence, formed encoding character as asequence octets UTF-8, then representing theseoctets form %HH, HH hexadecimal representationof octet. function always generate hexadecimal valuesusing upper-case letters A-F. Notes behavior function recommendedhandling non-ASCII characters URI attribute values asdescribed Appendix B.2.1. Examples expression fn:escape-html-uri("http://www.example.com/00/Weather/CA/Los Angeles#ocean")returns expression fn:escape-html-uri returns"javascript:if 7Functions operators Boolean values section functions operators thexs:boolean datatype. Boolean constant functions literals are defined XPath reference constantboolean values true false, functions are provided thepurpose. Function Meaning fn:true Returns xs:boolean valuetrue. fn:false Returns xs:boolean valuefalse. fn:true Summary Returns xs:boolean value true. Signature fn:true() as xs:boolean Properties function Rules result equivalent xs:boolean("1"). Examples expression fn:true() returnsxs:boolean(1). fn:false Summary Returns xs:boolean valuefalse. Signature fn:false() as xs:boolean Properties function Rules result equivalent xs:boolean("0"). Examples expression fn:false() returnsxs:boolean(0). Operators onBoolean values following functions define semantics operators onboolean values XML QueryLanguage] Path Language Function Meaning op:boolean-equal Returns true arguments are sameboolean value. op:boolean-less-than Returns true first argument false second istrue. op:boolean-greater-than Returns true first argument true second isfalse. ordering operators op:boolean-less-than andop:boolean-greater-thanare provided application purposes compatibility Path Language Version Schema Part Datatypes SecondEdition] datatype xs:boolean not ordered. Summary Returns true arguments are sameboolean value. Operator Mapping semantics operator applied twoxs:boolean values. Signature op:boolean-equal($value1 as xs:boolean,$value2 as xs:boolean) as xs:boolean Rules function returns true arguments aretrue arguments are false. Itreturns false arguments istrue other argument false. op:boolean-less-than Summary Returns true first argument false second istrue. Operator Mapping semantics operator applied twoxs:boolean values. Also used definition operator. Signature op:boolean-less-than($arg1 as xs:boolean,$arg2 as xs:boolean) as xs:boolean Rules function returns true isfalse true.Otherwise, returns false. op:boolean-greater-than Summary Returns true first argument true second isfalse. Operator Mapping semantics operator applied twoxs:boolean values. Also used definition operator. Signature op:boolean-greater-than($arg1 as xs:boolean,$arg2 as xs:boolean) as xs:boolean Rules function call op:boolean-greater-than($A, defined return same result as op:boolean-less-than($B,$A) Functions Boolean values following functions are defined boolean values: Function Meaning fn:boolean effective boolean value sequence$arg. fn:not Returns true effective boolean value false, false ifit true. Summary effective boolean value sequence$arg. Signature fn:boolean($arg as item()*) as xs:boolean Rules function effective boolean value sequence,defined according following rules. also Section EffectiveBoolean Value XP30. empty sequence,fn:boolean returns false. sequence first item node,fn:boolean returns true. singleton value typexs:boolean derived xs:boolean,fn:boolean returns singleton value typexs:string type derived fromxs:string, xs:anyURI type derivedfrom xs:anyURI xs:untypedAtomic,fn:boolean returns false operandvalue length; otherwise returns true. singleton value numeric type ora type derived numeric type, fn:boolean returnsfalse operand value NaN isnumerically equal otherwise returnstrue. other cases, fn:boolean type error[err:FORG0006]. Notes result function not necessarily same as$arg cast as xs:boolean. example,fn:boolean("false") returns valuetrue cast as xs:boolean(which also be written xs:boolean("false"))returns false. Examples let fn:boolean($abc) type error expression fn:boolean($abc[1]) returnstrue(). expression fn:boolean($abc[0]) returnsfalse(). expression fn:boolean($abc[3]) returnsfalse(). fn:not Summary Returns true effective boolean value false, false ifit true. Signature fn:not($arg as item()*) as xs:boolean Properties function Rules value first reduced effectiveboolean value applying fn:boolean() function. Thefunction returns true effective boolean valueis false, false effectiveboolean value true. Examples expression fn:not(fn:true()) returnsfalse(). expression fn:not("false") returnsfalse(). Functions andoperators durations Operators are defined following type: xs:duration defined subtypes totally ordered subtypes ofduration): xs:yearMonthDuration xs:dayTimeDuration ordering relation defined xs:durationvalues. xs:duration values however be comparedfor equality. Operations durations equality comparison, castingto string, extraction components) treat duration asnormalized. means seconds minutes components willalways be less hours component less themonths component less Thus, example, duration 120seconds always same result as duration twominutes. Conditions such as underflow overflow occur witharithmetic durations: precision Note: means practice, information content anxs:duration value be reduced anxs:integer number months, anxs:decimal number seconds. definedsubtypes further simplified so twocomponents fixed Operations such as comparison ofdurations arithmetic durations be expressed terms ofnumeric operations applied components. Twototally ordered subtypes duration totally ordered subtypes xs:duration aredefined Section SchemaInformation DM30 specification usingthe mechanisms described Schema Part2: Datatypes Second Edition] defining user-defined types.Additional details about types given below. Note: types were not defined XSD are defined inthe current draft XSD description given here isbelieved be equivalent XSD becomenon-normative XSD reaches Recommendation status. xs:yearMonthDuration xs:yearMonthDuration derived fromxs:duration restricting lexical representationto contain only year month components. value space ofxs:yearMonthDuration set ofxs:integer month values. year month componentsof xs:yearMonthDuration correspond Gregorianyear month components defined section respectively. Lexical representation lexical representation xs:yearMonthDurationis reduced format PnYnM,where nY number years nM number ofmonths. values years months components are notrestricted allow arbitrary unsignedxs:integer. optional preceding minus sign allowed indicate anegative duration. sign omitted positive duration isindicated. indicate xs:yearMonthDuration months, write: P1Y2M. also indicate axs:yearMonthDuration minus months Reduced precision truncated representations formatare allowed provided conform following: number years months expression number corresponding designator be omitted.However, least number designator be present.For example, P1347Y P1347M are allowed; P-1347M not allowed,although allowed. P1Y2MT not allowed. Also, P24YM isnot allowed, PY43M since Y have least precedingdigit M have preceding digit. Calculating thevalue lexical representation value xs:yearMonthDuration lexical form isobtained multiplying value years component andadding value months component. value positive ornegative depending preceding sign. Canonicalrepresentation canonical representation ofxs:yearMonthDuration value monthscomponent xs:integer values bothinclusive. convert non-canonical representation thecanonical representation, lexical representation firstconverted value xs:integer months as definedabove. value then divided obtain value theyears component canonical representation. remainingnumber months value months component thecanonical representation. negative durations, canonicalform calculated using absolute value duration anegative sign prepended component value then number designator componentÂ·mustÂ· be omitted.However, value months, canonical form Order relation onxs:yearMonthDuration Let function value anxs:yearMonthDuration manner described above becalled V(d). Then xs:yearMonthDuration valuesx y, y only V(x) V(y). order relationon yearMonthDuration total order. xs:dayTimeDuration derived fromxs:duration restricting lexical representationto contain only days, hours, minutes seconds components.The value space xs:dayTimeDuration set offractional second values. components ofxs:dayTimeDuration correspond day, hour, minuteand second components defined Section respectively. Lexical representation lexical representation xs:dayTimeDurationis truncated formatPnDTnHnMnS, nD number days, T thedate/time separator, nH number hours, nM number ofminutes nS number seconds. values days, hours minutes components are notrestricted, allow arbitrary unsignedxs:integer. Similarly, value secondscomponent arbitrary unsigned xs:decimal. Anoptional minus sign allowed precede indicatinga negative duration. sign omitted, duration ispositive. also Date TimeFormats. example, indicate duration days, hours 30minutes, write: P3DT10H30M. also indicate aduration minus days Reduced precision andtruncated representations format are allowed, provided theyconform following: number days, hours, minutes, seconds anyexpression number correspondingdesignator be omitted.However, least number designator bepresent. seconds part have decimal fraction. designator be absent only time itemsare absent. designator always be present. example, P13D, PT47H, P3DT2H, P4DT251M are allallowed. P-134D not allowed location minus sign),although allowed. Calculating thevalue xs:dayTimeDuration lexical representation value xs:dayTimeDuration lexical form infractional seconds obtained converting days, hours,minutes seconds value fractional seconds using theconversion rules: hours day, minutes hour 60seconds minute. Canonicalrepresentation canonical representation xs:dayTimeDurationrestricts value hours component toxs:integer values inclusive;the value minutes component xs:integervalues inclusive; value theseconds component xs:decimal valued Schema Part DatatypesSecond Edition], Appendix convert non-canonical representation canonicalrepresentation, value lexical form fractional secondsis first calculated manner described above. value thedays component canonical form then calculated dividingthe value remainder fractionalseconds. value hours component canonical form iscalculated dividing remainder Theremainder again fractional seconds. value minutescomponent canonical form calculated dividing thisremainder remainder fractional seconds valueof seconds component canonical form. negativedurations, canonical form calculated using absolutevalue duration negative sign prepended acomponent value then number designatorfor component be omitted. However, componentsof lexical form are canonical form Order relation onxs:dayTimeDuration Let function value axs:dayTimeDuration manner described above becalled V(d). Then xs:dayTimeDurationvalues y, y only V(x)> V(y). order relation onxs:dayTimeDuration total order. Comparisonoperators durations Function Meaning op:yearMonthDuration-less-than Returns true shorter duration op:yearMonthDuration-greater-than Returns true longer duration op:dayTimeDuration-less-than Returns true shorter duration op:dayTimeDuration-greater-than Returns true longer duration op:duration-equal Returns true aredurations same length. following comparison operators are defined Schema Part Datatypes Second Edition]duration datatypes. operator operands sametype returns xs:boolean result. discussed Schema Part Datatypes SecondEdition], order relation xs:duration apartial order rather total order. reason, onlyequality defined xs:duration. full complementof comparison arithmetic functions are defined twosubtypes duration described totally ordered subtypes ofduration do have total order. Summary Returns true shorter duration Operator Mapping semantics operator applied twoxs:yearMonthDuration values. Also used thedefinition operator. Signature op:yearMonthDuration-less-than( as xs:yearMonthDuration, as xs:yearMonthDuration) as xs:boolean Rules number months value isnumerically less number months value function returns true. Otherwise, function returns false. Notes durations be negative Summary Returns true longer duration Operator Mapping semantics operator applied twoxs:yearMonthDuration values. Also used thedefinition operator. Signature op:yearMonthDuration-greater-than( as xs:yearMonthDuration, as xs:yearMonthDuration) as xs:boolean Rules function call op:yearMonthDuration-greater-than($A,$B) defined return same result as op:yearMonthDuration-less-than($B,$A) Summary Returns true shorter duration Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Also used definitionof operator. Signature op:dayTimeDuration-less-than( as xs:dayTimeDuration, as xs:dayTimeDuration) as xs:boolean Rules number seconds value isnumerically less number seconds value function returns true. Otherwise, function returns false. Notes durations be negative Summary Returns true longer duration Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Also used definitionof operator. Signature op:dayTimeDuration-greater-than( as xs:dayTimeDuration, as xs:dayTimeDuration) as xs:boolean Rules function call op:dayTimeDuration-greater-than($A,$B) defined return same result as op:dayTimeDuration-less-than($B,$A) op:duration-equal Summary Returns true aredurations same length. Operator Mapping semantics operators applied twoxs:duration values. Also used definition operator. Signature op:duration-equal($arg1 as xs:duration,$arg2 as xs:duration) as xs:boolean Rules xs:yearMonthDuration components are equal thexs:dayTimeDuration components are equal, function returnstrue. Otherwise, function returns false. semantics function are: xs:yearMonthDuration($arg1) div xs:yearMonthDuration('P1M') eqxs:yearMonthDuration($arg2) div xs:yearMonthDuration('P1M') andxs:dayTimeDuration($arg1) div xs:dayTimeDuration('PT1S') eqxs:dayTimeDuration($arg2) div xs:dayTimeDuration('PT1S') function returns true monthsand seconds values durations are equal. Notes Note function, other, be applied toarguments are derived types given functionsignature, including subtypesxs:dayTimeDuration andxs:yearMonthDuration. exception thezero-length duration, instance ofxs:dayTimeDuration ever be equal instance ofxs:yearMonthDuration. Examples expression op:duration-equal(xs:duration("P1Y"),xs:duration("P12M")) returns true(). expression op:duration-equal(xs:duration("PT24H"),xs:duration("P1D")) returns true(). expression op:duration-equal(xs:duration("P1Y"),xs:duration("P365D")) returns false(). expressionop:duration-equal(xs:yearMonthDuration("P0Y"),xs:dayTimeDuration("P0D")) returns true(). expressionop:duration-equal(xs:yearMonthDuration("P1Y"),xs:dayTimeDuration("P365D")) returnsfalse(). expressionop:duration-equal(xs:yearMonthDuration("P2Y"),xs:yearMonthDuration("P24M")) returnstrue(). expressionop:duration-equal(xs:dayTimeDuration("P10D"),xs:dayTimeDuration("PT240H")) returnstrue(). expressionop:duration-equal(xs:duration("P2Y0M0DT0H0M0S"),xs:yearMonthDuration("P24M")) returnstrue(). expression op:duration-equal(xs:duration("P0Y0M10D"),xs:dayTimeDuration("PT240H")) returnstrue(). Component extractionfunctions durations duration datatype be considered be compositedatatypes distinct properties components.The extraction functions specified below extract single componentfrom duration value. xs:duration itssubtypes, including subtypesxs:yearMonthDuration andxs:dayTimeDuration, components are normalized:this means seconds minutes components always beless hours component less monthscomponent less Function Meaning fn:years-from-duration Returns number years duration. fn:months-from-duration Returns number months duration. fn:days-from-duration Returns number days duration. fn:hours-from-duration Returns number hours duration. fn:minutes-from-duration Returns number minutes duration. fn:seconds-from-duration Returns number seconds duration. fn:years-from-duration Summary Returns number years duration. Signature fn:years-from-duration($arg as xs:duration?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting years component value result obtained casting anxs:yearMonthDuration Casting durationtypes) then computing years component as describedin Canonicalrepresentation. negative duration then result willbe negative.. xs:dayTimeDuration thefunction returns Examples expressionfn:years-from-duration(xs:yearMonthDuration("P20Y15M"))returns expressionfn:years-from-duration(xs:yearMonthDuration("-P15M"))returns -1. expressionfn:years-from-duration(xs:dayTimeDuration("-P2DT15H"))returns fn:months-from-duration Summary Returns number months duration. Signature fn:months-from-duration($arg as xs:duration?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting months component value result obtained casting$arg xs:yearMonthDuration Casting durationtypes) then computing months component as describedin Canonicalrepresentation. negative duration then result willbe negative.. xs:dayTimeDuration thefunction returns Examples expressionfn:months-from-duration(xs:yearMonthDuration("P20Y15M"))returns expressionfn:months-from-duration(xs:yearMonthDuration("-P20Y18M"))returns -6. expressionfn:months-from-duration(xs:dayTimeDuration("-P2DT15H0M0S"))returns fn:days-from-duration Summary Returns number days duration. Signature fn:days-from-duration($arg as xs:duration?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting days component value result obtained casting anxs:dayTimeDuration Casting durationtypes) then computing days component as describedin Canonicalrepresentation. negative duration then result willbe negative.. xs:yearMonthDuration thefunction returns Examples expressionfn:days-from-duration(xs:dayTimeDuration("P3DT10H"))returns expressionfn:days-from-duration(xs:dayTimeDuration("P3DT55H"))returns expressionfn:days-from-duration(xs:yearMonthDuration("P3Y5M"))returns fn:hours-from-duration Summary Returns number hours duration. Signature fn:hours-from-duration($arg as xs:duration?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting hours component value result obtained casting anxs:dayTimeDuration Casting durationtypes) then computing hours component as describedin Canonicalrepresentation. negative duration then result willbe negative.. xs:yearMonthDuration thefunction returns Examples expressionfn:hours-from-duration(xs:dayTimeDuration("P3DT10H"))returns expressionfn:hours-from-duration(xs:dayTimeDuration("P3DT12H32M12S"))returns expressionfn:hours-from-duration(xs:dayTimeDuration("PT123H"))returns expressionfn:hours-from-duration(xs:dayTimeDuration("-P3DT10H"))returns -10. Summary Returns number minutes duration. Signature fn:minutes-from-duration($arg as xs:duration?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting minutes component value result obtained casting$arg xs:dayTimeDuration Casting durationtypes) then computing minutes component asdescribed representation. negative duration then result willbe negative.. xs:yearMonthDuration thefunction returns Examples expressionfn:minutes-from-duration(xs:dayTimeDuration("P3DT10H"))returns expressionfn:minutes-from-duration(xs:dayTimeDuration("-P5DT12H30M"))returns -30. Summary Returns number seconds duration. Signature fn:seconds-from-duration($arg as xs:duration?) as xs:decimal? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:decimalrepresenting seconds component value result obtained casting$arg xs:dayTimeDuration Casting durationtypes) then computing seconds component asdescribed representation. negative duration then result willbe negative.. xs:yearMonthDuration thefunction returns Examples expressionfn:seconds-from-duration(xs:dayTimeDuration("P3DT10H12.5S"))returns expressionfn:seconds-from-duration(xs:dayTimeDuration("-PT256S"))returns -16.0. operators durations Function Meaning op:add-yearMonthDurations Returns result adding twoxs:yearMonthDuration values. op:subtract-yearMonthDurations Returns result subtracting onexs:yearMonthDuration value op:multiply-yearMonthDuration Returns result multiplying value result rounded tothe nearest month. op:divide-yearMonthDuration Returns result dividing value result rounded nearestmonth. op:divide-yearMonthDuration-by-yearMonthDuration Returns ratio xs:yearMonthDurationvalues. op:add-dayTimeDurations Returns sum xs:dayTimeDurationvalues. op:subtract-dayTimeDurations Returns result subtracting onexs:dayTimeDuration op:multiply-dayTimeDuration Returns result multiplying axs:dayTimeDuration number. op:divide-dayTimeDuration Returns result multiplying axs:dayTimeDuration number. op:divide-dayTimeDuration-by-dayTimeDuration Returns ratio xs:dayTimeDurationvalues, as decimal number. operators combine duration date/time value, see9.7 Arithmetic operators ondurations, dates times. Summary Returns result adding twoxs:yearMonthDuration values. Operator Mapping semantics operator applied twoxs:yearMonthDuration values. Signature op:add-yearMonthDurations( as xs:yearMonthDuration, as xs:yearMonthDuration) as xs:yearMonthDuration Rules function returns result adding value value resultwill be xs:yearMonthDuration length monthsis equal length months thelength months handling overflow, Limits precision. Notes duration therefore result) be negative. Examples expressionop:add-yearMonthDurations(xs:yearMonthDuration("P2Y11M"),xs:yearMonthDuration("P3Y3M")) returnsxs:yearMonthDuration("P6Y2M"). Summary Returns result subtracting onexs:yearMonthDuration value Operator Mapping semantics operator applied twoxs:yearMonthDuration values. Signature op:subtract-yearMonthDurations( as xs:yearMonthDuration, as xs:yearMonthDuration) as xs:yearMonthDuration Rules function returns result subtracting value value resultwill be xs:yearMonthDuration length monthsis equal length months minus thelength months handling overflow, Limits precision. Notes duration therefore result) be negative. Examples expressionop:subtract-yearMonthDurations(xs:yearMonthDuration("P2Y11M"),xs:yearMonthDuration("P3Y3M")) returnsxs:yearMonthDuration("-P4M"). Summary Returns result multiplying value result rounded tothe nearest month. Operator Mapping semantics operator applied anxs:yearMonthDuration numeric value. Signature op:multiply-yearMonthDuration( as xs:yearMonthDuration, as xs:double) as xs:yearMonthDuration Rules result xs:yearMonthDuration lengthin months equal result applying fn:round function valueobtained multiplying length months value positive negative resultis duration. positive ornegative infinity, result handled as discussedin Limits andprecision. handling overflow underflow, Limits precision. Error Conditions dynamic error raised isNaN. Notes duration therefore result) be negative. Examples expressionop:multiply-yearMonthDuration(xs:yearMonthDuration("P2Y11M"),2.3) returns xs:yearMonthDuration("P6Y9M"). Summary Returns result dividing value result rounded nearestmonth. Operator Mapping semantics operator applied anxs:yearMonthDuration numeric value. Signature op:divide-yearMonthDuration( as xs:yearMonthDuration, as xs:double) as xs:yearMonthDuration Rules result xs:yearMonthDuration lengthin months equal result applying fn:round function valueobtained dividing length months bythe value positive negative infinity, theresult duration. positiveor negative result handled as discussedin Limits andprecision. handling overflow underflow, Limits precision. Error Conditions dynamic error raised isNaN. Notes operand therefore result) be negative. Examples expressionop:divide-yearMonthDuration(xs:yearMonthDuration("P2Y11M"),1.5) returnsxs:yearMonthDuration("P1Y11M"). Summary Returns ratio xs:yearMonthDurationvalues. Operator Mapping semantics operator applied twoxs:yearMonthDuration values. Signature op:divide-yearMonthDuration-by-yearMonthDuration( as xs:yearMonthDuration, as xs:yearMonthDuration) as xs:decimal Rules function returns result dividing length monthsof length months according rules op:numeric-divide functionfor integer operands. handling overflow underflow, Limits precision. Notes duration therefore result) be negative. Examples expressionop:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration("P3Y4M"),xs:yearMonthDuration("-P1Y4M")) returns-2.5. following example calculate lengthof xs:yearMonthDuration value months: expressionop:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration("P3Y4M"),xs:yearMonthDuration("P1M")) returns op:add-dayTimeDurations Summary Returns sum xs:dayTimeDurationvalues. Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Signature op:add-dayTimeDurations( as xs:dayTimeDuration, as xs:dayTimeDuration) as xs:dayTimeDuration Rules function returns result adding value value resultis xs:dayTimeDuration length seconds isequal sum length seconds inputdurations. handling overflow, Limits precision. Notes duration therefore result) be negative. Examples expressionop:add-dayTimeDurations(xs:dayTimeDuration("P2DT12H5M"),xs:dayTimeDuration("P5DT12H")) returnsxs:dayTimeDuration('P8DT5M'). Summary Returns result subtracting onexs:dayTimeDuration Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Signature op:subtract-dayTimeDurations( as xs:dayTimeDuration, as xs:dayTimeDuration) as xs:dayTimeDuration Rules function returns result subtracting value value resultis xs:dayTimeDuration length seconds isequal length seconds minus thelength seconds handling overflow, Limits precision. Notes duration therefore result) be negative. Examples expressionop:subtract-dayTimeDurations(xs:dayTimeDuration("P2DT12H"),xs:dayTimeDuration("P1DT10H30M")) returnsxs:dayTimeDuration('P1DT1H30M'). Summary Returns result multiplying axs:dayTimeDuration number. Operator Mapping semantics operator applied anxs:dayTimeDuration numeric value. Signature op:multiply-dayTimeDuration( as xs:dayTimeDuration, as xs:double) as xs:dayTimeDuration Rules function returns result multiplying value result thexs:dayTimeDuration length seconds equal tothe length seconds multiplied thenumeric value positive negative resultis duration. positive ornegative infinity, result handled as discussedin Limits andprecision. handling overflow underflow, Limits precision. Error Conditions dynamic error raised isNaN. Notes operand therefore result) be negative. Examples expressionop:multiply-dayTimeDuration(xs:dayTimeDuration("PT2H10M"),2.1) returns xs:dayTimeDuration('PT4H33M'). Summary Returns result multiplying axs:dayTimeDuration number. Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Signature op:divide-dayTimeDuration( as xs:dayTimeDuration, as xs:double) as xs:dayTimeDuration Rules function returns result dividing value result thexs:dayTimeDuration length seconds equal tothe length seconds divided numericvalue positive negative infinity, theresult duration. positiveor negative result handled as discussedin Limits andprecision. handling overflow underflow, Limits precision. Error Conditions dynamic error raised isNaN. Notes operand therefore result) be negative. Examples expressionop:divide-dayTimeDuration(xs:dayTimeDuration("P1DT2H30M10.5S"),1.5) returns xs:duration("PT17H40M7S"). Summary Returns ratio xs:dayTimeDuration values,as decimal number. Operator Mapping semantics operator applied twoxs:dayTimeDuration values. Signature op:divide-dayTimeDuration-by-dayTimeDuration( as xs:dayTimeDuration, as xs:dayTimeDuration) as xs:decimal Rules function returns result dividing value result thexs:dayTimeDuration length seconds equal tothe length seconds divided lengthin seconds calculation performed byapplying op:numeric-divide thetwo xs:decimal operands. handling overflow underflow, Limits precision. Notes operand therefore result) be negative. Examples expression fn:round-half-to-even(op:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration("P2DT53M11S"), xs:dayTimeDuration("P1DT10H")),4) returns examples shows determine number seconds aduration. expressionop:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration("P2DT53M11S"),xs:dayTimeDuration("PT1S")) returns175991.0. Functions andoperators dates times section operations Schema Part Datatypes Second Edition]date time types. WithTimezones] disquisition working date timevalues timezones. Date andtime types operators described section are defined thefollowing date time types: xs:dateTime xs:date xs:time xs:gYearMonth xs:gYear xs:gMonthDay xs:gMonth xs:gDay only operations defined xs:gYearMonth,xs:gYear, xs:gMonthDay,xs:gMonth xs:gDay values are equalitycomparison component extraction. other types, furtheroperations are provided, including order comparisons, arithmetic,formatted display, timezone adjustment. Limits andprecision number above datatypes Part Datatypes Second Edition] basic[ISO lexical representations, such asYYYY-MM-DDThh:mm:ss.s dateTime, allowing preceding minussign, more digits represent year field nomaximum specified unlimited number digits forfractional seconds. Leap seconds are not supported. minimally conforming processors supportpositive year values minimum digits YYYY) aminimum fractional second precision millisecond threedigits s.sss). However, conforming processorsÂ·mayÂ· set largerÂ·implementation-definedÂ· limits maximum number digits theysupport situations. Processors also choose support year yearswith negative values. results operations dates crossthe year are processor limits number digits date timedatatype representations encounter overflow underflowconditions tries execute functions Arithmetic operators durations,dates times. situations, processorÂ·mustÂ· return00:00:00 case time underflow. raise dynamic error case ofoverflow. datatype values defined Section3.3.2 Dates Times DM30,xs:dateTime, xs:date,xs:time, xs:gYearMonth,xs:gYear, xs:gMonthDay,xs:gMonth, xs:gDay values, referred tocollectively as date/time values, are represented as sevencomponents properties: year, month,day, hour, minute,second timezone. first fivecomponents are xs:integer values. value thesecond component xs:decimal thevalue timezone component anxs:dayTimeDuration. primitive date/timedatatypes, timezone property optional mayor not be present. Depending datatype, theremaining properties be present be absentDM30.Absent, missing, properties are represented emptysequence. value referred as local value inthat value original timezone. comparing orsubtracting xs:dateTime values, local valueÂ·mustÂ· be translatedor normalized UTC. xs:time, and24:00:00 are alternate lexical forms samevalue, canonical representation Forxs:dateTime, time component following day. Examples xs:dateTime lexical represented datamodel xs:dateTime lexical represented xs:dateTime lexical represented xs:date lexical represented PT8H}. xs:time lexical representation24:00:00 represented Constructing dateTime function provided constructing axs:dateTime value xs:date valueand xs:time value. Summary Returns xs:dateTime value created combiningan xs:date xs:time. Signature fn:dateTime($arg1 as xs:date?,$arg2 as xs:time?) as xs:dateTime? Properties function Rules either emptysequence function returns empty sequence. Otherwise, function returns xs:dateTimewhose date component equal timecomponent equal timezone result computed as argument timezone, result notimezone. exactly arguments timezone, botharguments have same timezone, result timezone. Error Conditions dynamic error raised arguments bothhave timezones timezones are different. Examples expression fn:dateTime(xs:date("1999-12-31"),xs:time("12:00:00")) returnsxs:dateTime("1999-12-31T12:00:00"). expression fn:dateTime(xs:date("1999-12-31"),xs:time("24:00:00")) returnsxs:dateTime("1999-12-31T00:00:00"). isbecause alternate lexical form Comparisonoperators duration, date time values Function Meaning op:dateTime-equal Returns true supplied xs:dateTimevalues refer same instant time. op:dateTime-less-than Returns true first argument anearlier instant time second argument. op:dateTime-greater-than Returns true first argument alater instant time second argument. op:date-equal Returns true only starting instantsof supplied xs:date values are same. op:date-less-than Returns true only starting instantof less starting instant Returns false otherwise. op:date-greater-than Returns true only starting instantof greater starting instant Returns false otherwise. op:time-equal Returns true xs:timevalues represent same instant time, treated as beingtimes same date, before adjusting timezone. op:time-less-than Returns true first xs:timevalue earlier instant time second, whenboth are treated as being times same date, before adjustingthe timezone. op:time-greater-than Returns true first xs:timevalue later instant time second, bothare treated as being times same date, before adjusting thetimezone. op:gYearMonth-equal Returns true xs:gYearMonth values havethe same starting instant. op:gYear-equal Returns true xs:gYear values have thesame starting instant. op:gMonthDay-equal Returns true xs:gMonthDay values havethe same starting instant, considered as days sameyear. op:gMonth-equal Returns true xs:gMonth values have thesame starting instant, considered as months sameyear. op:gDay-equal Returns true xs:gDay values have thesame starting instant, considered as days same month ofthe same year. following comparison operators are defined Schema Part Datatypes Second Edition]date/time datatypes. operator operands sametype returns xs:boolean result. Schema Part Datatypes SecondEdition] also states order relation date timedatatypes not total order partial order because thesedatatypes not have timezone. handled asfollows. either operand comparison function date timevalues not have timezone then, purposeof operation, implicit timezone, provided dynamiccontext Section C.2 Dynamic Context ComponentsXP30, assumed be present as part ofthe value. total order date timevalues. xs:dateTime be considered consist ofseven components: year, month,day, hour, minute,second timezone. Forxs:dateTime components day, hour,minute are required andtimezone optional. other date/time values, ofthe first components, are required others beabsentDM30.Timezone always optional. example, forxs:date, year, month andday components are required hour,minute second components beabsent; xs:time hour,minute second components are requiredand year, month day aremissing; xs:gDay, day required andyear, month, hour,minute second are missing. Note: Part newexplicitTimezone facet available valuesoptional, required, orprohibited enable timezone be defined asmandatory disallowed. Values date/time datatypes xs:time,xs:gMonthDay, xs:gMonth, andxs:gDay, be considered represent sequence ofrecurring time instants time periods. xs:timeoccurs day. xs:gMonth year.Comparison operators datatypes compare startinginstants equivalent occurrences recurring series. Thesexs:dateTime values are calculated as describedbelow. Comparison operators xs:date,xs:gYearMonth xs:gYear compare theirstarting instants. xs:dateTime values arecalculated as described below. starting instant occurrence date/time value anxs:dateTime calculated filling missingcomponents local value referencexs:dateTime. example suitable referencexs:dateTime 1972-01-01T00:00:00. Then,for example, starting instant corresponding thexs:date value starting instantcorresponding xs:time value13:30:02 1972-01-01T13:30:02; thestarting instant corresponding gMonthDay value--02-29 leap year was chosen reference). Note: previous version specification, referencedate/time chosen was 1972-12-31T00:00:00. thisgives same results, instant" agMonth gMonthDay bears norelation ordinary meaning term, also requiredspecial handling short months. original choice was made toallow leap seconds; since leap seconds are not recognizedin date/time arithmetic, not actually necessary. xs:time value written be compared, filling missingcomponents 1972-01-01T00:00:00, because24:00:00 alternative representation of00:00:00 lexical value isconverted time components before missingcomponents are filled in). consequence whenordering xs:time values, isconsidered be earlier However, whenordering xs:dateTime values, time component considered equivalent to00:00:00 following day. Note reference xs:dateTime not have atimezone. timezone component never filled infrom reference xs:dateTime. cases, thedate/time value not have timezone, implicit dynamic context used as timezone. Note: specification uses reference xs:dateTime1972-01-01T00:00:00 description comparisonoperators. Implementations use other referencexs:dateTime values as long as yield sameresults. reference xs:dateTime used meet thefollowing constraints: used supply components intoxs:gMonthDay values, year allow February29 so be leap year; used supply missingcomponents xs:gDay values, month allowfor days. Different reference xs:dateTime valuesmay be used different operators. op:dateTime-equal Summary Returns true supplied xs:dateTime valuesrefer same instant time. Operator Mapping semantics operator applied twoxs:dateTime values. Also used definition operators. Signature op:dateTime-equal($arg1 as xs:dateTime,$arg2 as xs:dateTime) as xs:boolean Properties function implicit timezone. Rules either notimezone component, effective value argument obtainedby substituting implicit timezone dynamic evaluationcontext. function then returns true only theeffective value equal effectivevalue according algorithm defined insection Schema Part Second Edition] relation dateTime" forxs:dateTime values timezones. Otherwise thefunction returns false. Examples Assume dynamic context implicit timezonevalue -05:00 expressionop:dateTime-equal(xs:dateTime("2002-04-02T12:00:00-01:00"),xs:dateTime("2002-04-02T17:00:00+04:00")) returnstrue(). expressionop:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"),xs:dateTime("2002-04-02T23:00:00+06:00")) returnstrue(). expressionop:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"),xs:dateTime("2002-04-02T17:00:00")) returnsfalse(). expressionop:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"),xs:dateTime("2002-04-02T12:00:00")) returnstrue(). expressionop:dateTime-equal(xs:dateTime("2002-04-02T23:00:00-04:00"),xs:dateTime("2002-04-03T02:00:00-01:00")) returnstrue(). expressionop:dateTime-equal(xs:dateTime("1999-12-31T24:00:00"),xs:dateTime("2000-01-01T00:00:00")) returnstrue(). expressionop:dateTime-equal(xs:dateTime("2005-04-04T24:00:00"),xs:dateTime("2005-04-04T00:00:00")) returnsfalse(). op:dateTime-less-than Summary Returns true first argument anearlier instant time second argument. Operator Mapping semantics operator applied twoxs:dateTime values. Also used definition operator. Signature op:dateTime-less-than($arg1 as xs:dateTime,$arg2 as xs:dateTime) as xs:boolean Properties function implicit timezone. Rules either notimezone component, effective value argument obtainedby substituting implicit timezone dynamic evaluationcontext. function then returns true only theeffective value less effectivevalue according algorithm defined insection Schema Part Second Edition] relation dateTime" forxs:dateTime values timezones. Otherwise thefunction returns false. Summary Returns true first argument alater instant time second argument. Operator Mapping semantics operator applied twoxs:dateTime values. Also used definition operator. Signature op:dateTime-greater-than( as xs:dateTime, as xs:dateTime) as xs:boolean Properties function implicit timezone. Rules function call op:dateTime-greater-than($A, defined return same result as op:dateTime-less-than($B,$A) Summary Returns true only starting instantsof supplied xs:date values are same. Operator Mapping semantics operator applied twoxs:date values. Also used definition operators. Signature op:date-equal($arg1 as xs:date,$arg2 as xs:date) as xs:boolean Properties function implicit timezone. Rules starting instant xs:date thexs:dateTime time thatdate. function returns result expression: op:dateTime-equal(xs:dateTime($arg1), xs:dateTime($arg2)) Examples expression op:date-equal(xs:date("2004-12-25Z"),xs:date("2004-12-25+07:00")) returns false().(The starting instants arexs:dateTime("2004-12-25T00:00:00Z") andxs:dateTime("2004-12-25T00:00:00+07:00"). arenormalized xs:dateTime("2004-12-25T00:00:00Z") andxs:dateTime("2004-12-24T17:00:00Z"). expression op:date-equal(xs:date("2004-12-25-12:00"),xs:date("2004-12-26+12:00")) returnstrue(). op:date-less-than Summary Returns true only starting instant less starting instant Returns false otherwise. Operator Mapping semantics operator applied twoxs:date values. Also used definition operator. Signature op:date-less-than($arg1 as xs:date,$arg2 as xs:date) as xs:boolean Rules starting instant xs:date thexs:dateTime time thatdate. function returns result expression: op:dateTime-less-than(xs:dateTime($arg1), xs:dateTime($arg2)) Examples expression op:date-less-than(xs:date("2004-12-25Z"),xs:date("2004-12-25-05:00")) returnstrue(). expressionop:date-less-than(xs:date("2004-12-25-12:00"),xs:date("2004-12-26+12:00")) returnsfalse(). op:date-greater-than Summary Returns true only starting instant greater starting instant Returns false otherwise. Operator Mapping semantics operator applied twoxs:date values. Also used definition operator. Signature op:date-greater-than($arg1 as xs:date,$arg2 as xs:date) as xs:boolean Properties function implicit timezone. Rules function call op:date-greater-than($A, isdefined return same result as op:date-less-than($B,$A) Examples expressionop:date-greater-than(xs:date("2004-12-25Z"),xs:date("2004-12-25+07:00")) returnstrue(). expressionop:date-greater-than(xs:date("2004-12-25-12:00"),xs:date("2004-12-26+12:00")) returnsfalse(). Summary Returns true xs:time valuesrepresent same instant time, treated as being times onthe same date, before adjusting timezone. Operator Mapping semantics operator applied twoxs:time values. Also used definition operators. Signature op:time-equal($arg1 as xs:time,$arg2 as xs:time) as xs:boolean Properties function implicit timezone. Rules supplied xs:time values expanded toan xs:dateTime value associating time anarbitrary date. function returns result comparing thesetwo xs:dateTime values using op:dateTime-equal. result function thus same as value theexpression: op:dateTime-equal( fn:dateTime(xs:date('1972-12-31'), fn:dateTime(xs:date('1972-12-31'), Examples Assume date components referencexs:dateTime correspond expression op:time-equal(xs:time("08:00:00+09:00"),xs:time("17:00:00-06:00")) returns false().(The xs:dateTimes calculated using referencedate components are 1972-12-31T08:00:00+09:00 normalize expression op:time-equal(xs:time("21:30:00+10:30"),xs:time("06:00:00-05:00")) returns true(). expression op:time-equal(xs:time("24:00:00+01:00"),xs:time("00:00:00+01:00")) returns true().(This not result expect. Forxs:dateTime values, time isequivalent following day. Forxs:time, normalization before xs:time isconverted xs:dateTime purpose theequality comparison. xs:time, operation on24:00:00 same result as sameoperation because are differentlexical representations same value. op:time-less-than Summary Returns true first xs:timevalue earlier instant time second, whenboth are treated as being times same date, before adjustingthe timezone. Operator Mapping semantics operator applied twoxs:time values. Also used definition operator. Signature op:time-less-than($arg1 as xs:time,$arg2 as xs:time) as xs:boolean Properties function implicit timezone. Rules supplied xs:time values expanded toan xs:dateTime value associating time anarbitrary date. function returns result comparing thesetwo xs:dateTime values using op:dateTime-less-than. result function thus same as value theexpression: op:dateTime-less-than( fn:dateTime(xs:date('1972-12-31'), fn:dateTime(xs:date('1972-12-31'), Examples Assume dynamic context implicit timezonevalue -05:00. expression op:time-less-than(xs:time("12:00:00"),xs:time("23:00:00+06:00")) returns false(). expression op:time-less-than(xs:time("11:00:00"),xs:time("17:00:00Z")) returns true(). expression op:time-less-than(xs:time("23:59:59"),xs:time("24:00:00")) returns false(). op:time-greater-than Summary Returns true first xs:timevalue later instant time second, bothare treated as being times same date, before adjusting thetimezone. Operator Mapping semantics operator applied twoxs:time values. Also used definition operator. Signature op:time-greater-than($arg1 as xs:time,$arg2 as xs:time) as xs:boolean Properties function implicit timezone. Rules function call op:time-greater-than($A, isdefined return same result as op:time-less-than($B,$A) Examples expressionop:time-greater-than(xs:time("08:00:00+09:00"),xs:time("17:00:00-06:00")) returns false(). op:gYearMonth-equal Summary Returns true xs:gYearMonth values havethe same starting instant. Operator Mapping semantics operator applied twoxs:gYearMonth values. Also used definition ofthe operator. Signature op:gYearMonth-equal( as xs:gYearMonth, as xs:gYearMonth) as xs:boolean Properties function implicit timezone. Rules starting instants are calculated supplying missingcomponents thexs:dateTime template xxxx-xx-01T00:00:00.The function returns result comparing startinginstants using op:dateTime-equal. Examples Assume dynamic context implicit timezonevalue -05:00. op:gYearMonth-equal(xs:gYearMonth("1986-02"),xs:gYearMonth("1986-03")) returns false(). Thestarting instants are 1986-02-01T00:00:00-05:00 respectively. op:gYearMonth-equal(xs:gYearMonth("1978-03"),xs:gYearMonth("1986-03Z")) returns false(). Thestarting instants are 1978-03-01T00:00:00-05:00 respectively. Summary Returns true xs:gYear values have thesame starting instant. Operator Mapping semantics operator applied twoxs:gYear values. Also used definition operator. Signature op:gYear-equal($arg1 as xs:gYear,$arg2 as xs:gYear) as xs:boolean Properties function implicit timezone. Rules starting instants are calculated supplying missingcomponents thexs:dateTime template xxxx-01-01T00:00:00.The function returns result comparing startinginstants using op:dateTime-equal. Examples Assume dynamic context implicit timezonevalue -05:00. Assume, also, thexs:dateTime template isxxxx-01-01T00:00:00. op:gYear-equal(xs:gYear("2005-12:00"),xs:gYear("2005+12:00")) returns false(). Thestarting instants are 2005-01-01T00:00:00-12:00 and2005-01-01T00:00:00+12:00, respectively, normalizeto expression op:gYear-equal(xs:gYear("1976-05:00"),xs:gYear("1976")) returns true(). op:gMonthDay-equal Summary Returns true xs:gMonthDay values havethe same starting instant, considered as days sameyear. Operator Mapping semantics operator applied twoxs:gMonthDay values. Also used definition ofthe operator. Signature op:gMonthDay-equal($arg1 as xs:gMonthDay,$arg2 as xs:gMonthDay) as xs:boolean Properties function implicit timezone. Rules starting instants are calculated supplying missingcomponents thexs:dateTime template equivalent. function returns result comparingthese starting instants using op:dateTime-equal. Examples Assume dynamic context implicit timezonevalue -05:00. Assume purposes ofillustration xs:dateTime template used not affect theresult). expressionop:gMonthDay-equal(xs:gMonthDay("--12-25-14:00"),xs:gMonthDay("--12-26+10:00")) returns true().( starting instants respectively, normalizeto expression op:gMonthDay-equal(xs:gMonthDay("--12-25"),xs:gMonthDay("--12-26Z")) returns false(). Summary Returns true xs:gMonth values have thesame starting instant, considered as months sameyear. Operator Mapping semantics operator applied twoxs:gMonth values. Also used definition operator. Signature op:gMonth-equal($arg1 as xs:gMonth,$arg2 as xs:gMonth) as xs:boolean Properties function implicit timezone. Rules starting instants are calculated supplying missingcomponents thexs:dateTime template equivalent. function returns result comparingthese starting instants using op:dateTime-equal. Examples Assume dynamic context implicit timezonevalue -05:00. Assume, also, thexs:dateTime template chosen expression op:gMonth-equal(xs:gMonth("--12-14:00"),xs:gMonth("--12+10:00")) returns false(). starting instants are 1972-12-01T00:00:00-14:00and 1972-12-01T00:00:00+10:00, respectively, andnormalize expression op:gMonth-equal(xs:gMonth("--12"),xs:gMonth("--12Z")) returns false(). Summary Returns true xs:gDay values have thesame starting instant, considered as days same month ofthe same year. Operator Mapping semantics operator applied twoxs:gDay values. Also used definition operator. Signature op:gDay-equal($arg1 as xs:gDay,$arg2 as xs:gDay) as xs:boolean Properties function implicit timezone. Rules starting instants are calculated supplying missingcomponents thexs:dateTime template equivalent. function returns result comparingthese starting instants using op:dateTime-equal. Examples Assume dynamic context implicit timezonevalue -05:00. Assume, also, thexs:dateTime template expression op:gDay-equal(xs:gDay("---25-14:00"),xs:gDay("---25+10:00")) returns false(). starting instants are 1972-12-25T00:00:00-14:00and 1972-12-25T00:00:00+10:00, respectively, andnormalize expression op:gDay-equal(xs:gDay("---12"),xs:gDay("---12Z")) returns false(). Component extractionfunctions dates times date time datatypes be considered be compositedatatypes contain distinct properties components.The extraction functions specified below extract single componentfrom date time value. cases local value original value as written, timezone adjustment) isused. Note: time written as treated as00:00:00 following day. Function Meaning fn:year-from-dateTime Returns year component xs:dateTime. fn:month-from-dateTime Returns month component anxs:dateTime. fn:day-from-dateTime Returns day component xs:dateTime. fn:hours-from-dateTime Returns hours component anxs:dateTime. fn:minutes-from-dateTime Returns minute component anxs:dateTime. fn:seconds-from-dateTime Returns seconds component anxs:dateTime. fn:timezone-from-dateTime Returns timezone component anxs:dateTime. fn:year-from-date Returns year component xs:date. fn:month-from-date Returns month component xs:date. fn:day-from-date Returns day component xs:date. fn:timezone-from-date Returns timezone component xs:date. fn:hours-from-time Returns hours component xs:time. fn:minutes-from-time Returns minutes component xs:time. fn:seconds-from-time Returns seconds component xs:time. fn:timezone-from-time Returns timezone component xs:time. fn:year-from-dateTime Summary Returns year component xs:dateTime. Signature fn:year-from-dateTime($arg as xs:dateTime?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting year component local value result be negative. Examples expressionfn:year-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns expressionfn:year-from-dateTime(xs:dateTime("1999-05-31T21:30:00-05:00"))returns expressionfn:year-from-dateTime(xs:dateTime("1999-12-31T19:20:00"))returns expressionfn:year-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))returns fn:month-from-dateTime Summary Returns month component xs:dateTime. Signature fn:month-from-dateTime($arg as xs:dateTime?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing month componentin local value Examples expressionfn:month-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns expressionfn:month-from-dateTime(xs:dateTime("1999-12-31T19:20:00-05:00"))returns expressionfn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"),xs:dayTimeDuration("PT0S"))) returns fn:day-from-dateTime Summary Returns day component xs:dateTime. Signature fn:day-from-dateTime($arg as xs:dateTime?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing day component inthe local value Examples expressionfn:day-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns expressionfn:day-from-dateTime(xs:dateTime("1999-12-31T20:00:00-05:00"))returns expressionfn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"),xs:dayTimeDuration("PT0S"))) returns fn:hours-from-dateTime Summary Returns hours component xs:dateTime. Signature fn:hours-from-dateTime($arg as xs:dateTime?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing hours componentin local value Examples expressionfn:hours-from-dateTime(xs:dateTime("1999-05-31T08:20:00-05:00"))returns expressionfn:hours-from-dateTime(xs:dateTime("1999-12-31T21:20:00-05:00"))returns expressionfn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T21:20:00-05:00"),xs:dayTimeDuration("PT0S"))) returns expressionfn:hours-from-dateTime(xs:dateTime("1999-12-31T12:00:00"))returns expressionfn:hours-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))returns Summary Returns minute component xs:dateTime. Signature fn:minutes-from-dateTime($arg as xs:dateTime?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integer valuebetween inclusive, representing minute componentin local value Examples expressionfn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns expressionfn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:30:00+05:30"))returns Summary Returns seconds component anxs:dateTime. Signature fn:seconds-from-dateTime($arg as xs:dateTime?) as xs:decimal? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:decimal valuegreater equal less representing theseconds fractional seconds local value Examples expressionfn:seconds-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns Summary Returns timezone component anxs:dateTime. Signature fn:timezone-from-dateTime($arg as xs:dateTime?) as xs:dayTimeDuration? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns timezone component timezonecomponent, then result xs:dayTimeDurationthat deviation UTC; value range -14:00 hours, inclusive. notimezone component, result empty sequence. Examples expressionfn:timezone-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))returns xs:dayTimeDuration("-PT5H"). expressionfn:timezone-from-dateTime(xs:dateTime("2000-06-12T13:20:00Z"))returns xs:dayTimeDuration("PT0S"). expressionfn:timezone-from-dateTime(xs:dateTime("2004-08-27T00:00:00"))returns fn:year-from-date Summary Returns year component xs:date. Signature fn:year-from-date($arg as xs:date?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerrepresenting year local value Thevalue be negative. Examples expressionfn:year-from-date(xs:date("1999-05-31")) expressionfn:year-from-date(xs:date("2000-01-01+05:00")) returns2000. fn:month-from-date Summary Returns month component xs:date. Signature fn:month-from-date($arg as xs:date?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing month componentin local value Examples expressionfn:month-from-date(xs:date("1999-05-31-05:00"))returns expressionfn:month-from-date(xs:date("2000-01-01+05:00"))returns Summary Returns day component xs:date. Signature fn:day-from-date($arg as xs:date?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing day component inthe localized value Examples expressionfn:day-from-date(xs:date("1999-05-31-05:00")) returns31. expressionfn:day-from-date(xs:date("2000-01-01+05:00")) returns1. fn:timezone-from-date Summary Returns timezone component xs:date. Signature fn:timezone-from-date($arg as xs:date?) as xs:dayTimeDuration? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns timezone component timezonecomponent, then result xs:dayTimeDurationthat deviation UTC; value range -14:00 hours, inclusive. notimezone component, result empty sequence. Examples expressionfn:timezone-from-date(xs:date("1999-05-31-05:00"))returns xs:dayTimeDuration("-PT5H"). expressionfn:timezone-from-date(xs:date("2000-06-12Z")) returnsxs:dayTimeDuration("PT0S"). fn:hours-from-time Summary Returns hours component xs:time. Signature fn:hours-from-time($arg as xs:time?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integerbetween inclusive, representing value thehours component local value Examples Assume dynamic context implicit timezonevalue -05:00. expressionfn:hours-from-time(xs:time("11:23:00")) returns11. expressionfn:hours-from-time(xs:time("21:23:00")) returns21. expressionfn:hours-from-time(xs:time("01:23:00+05:00")) returns1. expressionfn:hours-from-time(fn:adjust-time-to-timezone(xs:time("01:23:00+05:00"),xs:dayTimeDuration("PT0S"))) returns expressionfn:hours-from-time(xs:time("24:00:00")) returns0. fn:minutes-from-time Summary Returns minutes component xs:time. Signature fn:minutes-from-time($arg as xs:time?) as xs:integer? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:integer valuebetween inclusive, representing value theminutes component local value Examples expressionfn:minutes-from-time(xs:time("13:00:00Z")) returns0. fn:seconds-from-time Summary Returns seconds component xs:time. Signature fn:seconds-from-time($arg as xs:time?) as xs:decimal? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns xs:decimal valuegreater equal less representing theseconds fractional seconds local value Examples expressionfn:seconds-from-time(xs:time("13:20:10.5")) returns10.5. fn:timezone-from-time Summary Returns timezone component xs:time. Signature fn:timezone-from-time($arg as xs:time?) as xs:dayTimeDuration? Properties function Rules empty sequence, function returnsthe empty sequence. Otherwise, function returns timezone component timezonecomponent, then result xs:dayTimeDurationthat deviation UTC; value range -14:00 hours, inclusive. notimezone component, result empty sequence. Examples expressionfn:timezone-from-time(xs:time("13:20:00-05:00"))returns xs:dayTimeDuration("-PT5H"). expressionfn:timezone-from-time(xs:time("13:20:00")) returns(). adjustment functions dates time values Function Meaning fn:adjust-dateTime-to-timezone xs:dateTime value specifictimezone, timezone fn:adjust-date-to-timezone xs:date value specific timezone,or timezone result date targettimezone starting instant supplieddate. fn:adjust-time-to-timezone xs:time value specific timezone,or timezone functions adjust timezone component anxs:dateTime, xs:date orxs:time value. argument tothese functions defined as xs:dayTimeDurationbut be valid timezone value. Summary xs:dateTime value specifictimezone, timezone Signatures fn:adjust-dateTime-to-timezone($arg as xs:dateTime?) as xs:dateTime? fn:adjust-dateTime-to-timezone( as xs:dateTime?, as xs:dayTimeDuration?) as xs:dateTime? Properties form function implicit timezone. form function Rules not specified, then effectivevalue value implicittimezone dynamic context. empty sequence, then functionreturns empty sequence. not have timezone component empty sequence, then result not have timezone component not empty sequence, then resultis as timezonecomponent. timezone component empty sequence, then result isthe local value timezonecomponent. timezone component not empty sequence, then resultis xs:dateTime value equal timezone component equal Error Conditions dynamic error raised isless greater PT14H oris not integral number minutes. Examples Assume dynamic context implicit timezone let expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'))returns xs:dateTime('2002-03-07T10:00:00-05:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'))returns xs:dateTime('2002-03-07T12:00:00-05:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'),$tz-10) returnsxs:dateTime('2002-03-07T10:00:00-10:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),$tz-10) returnsxs:dateTime('2002-03-07T07:00:00-10:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),xs:dayTimeDuration("PT10H")) returnsxs:dateTime('2002-03-08T03:00:00+10:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T00:00:00+01:00'),xs:dayTimeDuration("-PT8H")) returnsxs:dateTime('2002-03-06T15:00:00-08:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'),()) returnsxs:dateTime('2002-03-07T10:00:00'). expressionfn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'),()) returnsxs:dateTime('2002-03-07T10:00:00'). Summary xs:date value specific timezone, orto timezone result date targettimezone starting instant supplieddate. Signatures fn:adjust-date-to-timezone($arg as xs:date?) as xs:date? fn:adjust-date-to-timezone( as xs:date?, as xs:dayTimeDuration?) as xs:date? Properties form function implicit timezone. form function Rules not specified, then effectivevalue value implicittimezone dynamic context. empty sequence, then functionreturns empty sequence. not have timezone component empty sequence, then result isthe value not have timezone component not empty sequence, then resultis as timezonecomponent. timezone component empty sequence, then result isthe local value timezonecomponent. timezone component not empty sequence, then functionreturns value expression: Let be value fn:dateTime($arg,xs:time('00:00:00')). Let be value fn:adjust-dateTime-to-timezone($dt,$timezone) function returns value xs:date($adt) Error Conditions dynamic error raised isless greater PT14H oris not integral number minutes. Examples Assume dynamic context implicit timezone let expressionfn:adjust-date-to-timezone(xs:date("2002-03-07"))returns xs:date("2002-03-07-05:00"). expressionfn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"))returns xs:date("2002-03-07-05:00").($arg converted toxs:dateTime("2002-03-07T00:00:00-07:00"). isadjusted implicit timezone, giving"2002-03-07T02:00:00-05:00". expressionfn:adjust-date-to-timezone(xs:date("2002-03-07"),$tz-10) returnsxs:date("2002-03-07-10:00"). expressionfn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"),$tz-10) returns xs:date("2002-03-06-10:00").($arg converted xs:dateTime"2002-03-07T00:00:00-07:00". adjusted giventimezone, giving expressionfn:adjust-date-to-timezone(xs:date("2002-03-07"), xs:date("2002-03-07"). expressionfn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"),()) returns xs:date("2002-03-07"). Summary xs:time value specific timezone, orto timezone Signatures fn:adjust-time-to-timezone($arg as xs:time?) as xs:time? fn:adjust-time-to-timezone( as xs:time?, as xs:dayTimeDuration?) as xs:time? Properties form function implicit timezone. form function Rules not specified, then effectivevalue value implicittimezone dynamic context. empty sequence, then functionreturns empty sequence. not have timezone component empty sequence, then result not have timezone component not empty sequence, then resultis as timezonecomponent. timezone component empty sequence, then result isthe localized value timezonecomponent. timezone component not empty sequence, then: Let be xs:dateTime valuefn:dateTime(xs:date('1972-12-31'),$arg). Let be value fn:adjust-dateTime-to-timezone($dt,$timezone) function returns xs:time valuexs:time($adt). Error Conditions dynamic error raised isless greater PT14H orif not contain integral number minutes. Examples Assume dynamic context implicit timezone let expressionfn:adjust-time-to-timezone(xs:time("10:00:00"))returns xs:time("10:00:00-05:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00-07:00"))returns xs:time("12:00:00-05:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00"),$tz-10) returns xs:time("10:00:00-10:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),$tz-10) returns xs:time("07:00:00-10:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00"), xs:time("10:00:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),()) returns xs:time("10:00:00"). expressionfn:adjust-time-to-timezone(xs:time("10:00:00-07:00"),xs:dayTimeDuration("PT10H")) returnsxs:time("03:00:00+10:00"). operators durations, dates times functions support adding subtracting duration valueto xs:dateTime, xs:date oran xs:time value. Appendix E Schema Part Datatypes Second Edition]describes algorithm performing such operations. Function Meaning op:subtract-dateTimes Returns xs:dayTimeDuration representing theamount elapsed time instants arg2 andarg1. op:subtract-dates Returns xs:dayTimeDuration tothe elapsed time starting instant starting instant op:subtract-times Returns xs:dayTimeDuration tothe elapsed time values treated as times same date. op:add-yearMonthDuration-to-dateTime Returns xs:dateTime given durationafter specified xs:dateTime before, theduration negative). op:add-dayTimeDuration-to-dateTime Returns xs:dateTime given durationafter specified xs:dateTime before, theduration negative). op:subtract-yearMonthDuration-from-dateTime Returns xs:dateTime given durationbefore specified xs:dateTime after, theduration negative). op:subtract-dayTimeDuration-from-dateTime Returns xs:dateTime given durationbefore specified xs:dateTime after, theduration negative). op:add-yearMonthDuration-to-date Returns xs:date given duration aftera specified xs:date before, duration isnegative). op:add-dayTimeDuration-to-date Returns xs:date given duration aftera specified xs:date before, duration isnegative). op:subtract-yearMonthDuration-from-date Returns xs:date given durationbefore specified xs:date after, durationis negative). op:subtract-dayTimeDuration-from-date Returns xs:date given durationbefore specified xs:date after, durationis negative). op:add-dayTimeDuration-to-time Returns xs:time value given durationafter specified xs:time before, durationis negative causes wrap-around past midnight) op:subtract-dayTimeDuration-from-time Returns xs:time value given durationbefore specified xs:time after, durationis negative causes wrap-around past midnight) Limitsand precision processor limits number digits date timedatatype representations encounter overflow underflowconditions tries execute functions section.In situations, processor return P0M PT0S case durationunderflow case time underflow. raise adynamic error case overflow. value spaces totally ordered subtypes ofxs:duration described totally ordered subtypes ofduration are xs:integer months forxs:yearMonthDuration xs:decimalseconds xs:dayTimeDuration. processor limitsthe number digits allowed representation ofxs:integer xs:decimal then overflowand underflow situations arise tries execute thefunctions Arithmeticoperators durations. situations processorÂ·mustÂ· return incase numeric underflow P0M PT0S case durationunderflow. raise dynamic error case ofoverflow. op:subtract-dateTimes Summary Returns xs:dayTimeDuration representing theamount elapsed time instants arg2 andarg1. Operator Mapping semantics operator applied twoxs:dateTime values. Signature op:subtract-dateTimes( as xs:dateTime, as xs:dateTime) as xs:dayTimeDuration Properties function implicit timezone. Rules either do notcontain explicit timezone then, purpose theoperation, implicit timezone provided dynamic context(See Section C.2 Dynamic Context ComponentsXP30.) assumed be present as partof value. function returns elapsed time date/timeinstant arg2 date/time instantarg1, computed according algorithm given inAppendix E Schema Part DatatypesSecond Edition], expressed as axs:dayTimeDuration. normalized value timethe normalized value then returned valueis negative duration. Examples Assume dynamic context implicit timezonevalue -05:00. expressionop:subtract-dateTimes(xs:dateTime("2000-10-30T06:12:00"),xs:dateTime("1999-11-28T09:00:00Z")) returnsxs:dayTimeDuration("P337DT2H12M"). op:subtract-dates Summary Returns xs:dayTimeDuration tothe elapsed time starting instant starting instant Operator Mapping semantics operator applied twoxs:date values. Signature op:subtract-dates($arg1 as xs:date,$arg2 as xs:date) as xs:dayTimeDuration Properties function implicit timezone. Rules either do notcontain explicit timezone then, purpose theoperation, implicit timezone provided dynamic context(See Section C.2 Dynamic Context ComponentsXP30.) assumed be present as partof value. starting instant xs:date thexs:dateTime date. function returns result subtracting startinginstants using op:subtract-dateTimes. starting instant timethe starting instant then returned valueis negative duration. Examples Assume dynamic context implicit timezonevalue Z. expression op:subtract-dates(xs:date("2000-10-30"),xs:date("1999-11-28")) returnsxs:dayTimeDuration("P337D"). normalizedvalues starting instants are PT0S} Now assume dynamic context implicittimezone value expression op:subtract-dates(xs:date("2000-10-30"),xs:date("1999-11-28Z")) returnsxs:dayTimeDuration("P336DT19H"). normalizedvalues starting instants are PT0S} expressionop:subtract-dates(xs:date("2000-10-15-05:00"),xs:date("2000-10-10+02:00")) returnsxs:dayTimeDuration("P5DT7H"). op:subtract-times Summary Returns xs:dayTimeDuration tothe elapsed time values treated as times same date. Operator Mapping semantics operator applied twoxs:time values. Signature op:subtract-times($arg1 as xs:time,$arg2 as xs:time) as xs:dayTimeDuration Properties function implicit timezone. Rules function returns result expression: op-subtract-dateTimes( fn:dateTime(xs:date('1972-12-31'), fn:dateTime(xs:date('1972-12-31'), Notes other reference date work equally Examples Assume dynamic context implicit timezonevalue -05:00. Assume, also, datecomponents reference xs:dateTime correspond expression op:subtract-times(xs:time("11:12:00Z"),xs:time("04:00:00")) returnsxs:dayTimeDuration("PT2H12M"). obtainedby subtracting xs:dateTime value PT0S} xs:dateTime value{1972, PT0S}.). expressionop:subtract-times(xs:time("11:00:00-05:00"),xs:time("21:30:00+05:30")) returnsxs:dayTimeDuration("PT0S"). twoxs:dateTime values are 0,-PT5H} PT5H30M}.These normalize PT0S} PT0S}. expressionop:subtract-times(xs:time("17:00:00-06:00"),xs:time("08:00:00+09:00")) returnsxs:dayTimeDuration("P1D"). normalizedxs:dateTime values are expression op:subtract-times(xs:time("24:00:00"),xs:time("23:59:59")) returnsxs:dayTimeDuration("-PT23H59M59S"). twonormalized xs:dateTime values are Summary Returns xs:dateTime given durationafter specified xs:dateTime before, theduration negative). Operator Mapping semantics operator applied anxs:dateTime xs:yearMonthDurationvalue. Signature op:add-yearMonthDuration-to-dateTime( as xs:dateTime, as xs:yearMonthDuration) as xs:dateTime Properties function Rules function returns result adding tothe value using algorithm described inAppendix E Schema Part DatatypesSecond Edition], disregarding rule about leap seconds. negative, then resultxs:dateTime result same timezone as timezone, result timezone. Examples expressionop:add-yearMonthDuration-to-dateTime(xs:dateTime("2000-10-30T11:12:00"),xs:yearMonthDuration("P1Y2M")) returnsxs:dateTime("2001-12-30T11:12:00"). Summary Returns xs:dateTime given durationafter specified xs:dateTime before, theduration negative). Operator Mapping semantics operator applied anxs:dateTime xs:dayTimeDurationvalue. Signature op:add-dayTimeDuration-to-dateTime( as xs:dateTime, as xs:dayTimeDuration) as xs:dateTime Properties function Rules function returns result adding tothe value using algorithm described inAppendix E Schema Part DatatypesSecond Edition], disregarding rule about leap seconds. negative, then resultxs:dateTime result same timezone as timezone, result timezone. Examples expressionop:add-dayTimeDuration-to-dateTime(xs:dateTime("2000-10-30T11:12:00"),xs:dayTimeDuration("P3DT1H15M")) returnsxs:dateTime("2000-11-02T12:27:00"). Summary Returns xs:dateTime given durationbefore specified xs:dateTime after, theduration negative). Operator Mapping semantics operator applied anxs:dateTime xs:yearMonthDurationvalue. Signature op:subtract-yearMonthDuration-from-dateTime( as xs:dateTime, as xs:yearMonthDuration) as xs:dateTime Properties function Rules function returns xs:dateTime computed bynegating adding result value using function op:add-yearMonthDuration-to-dateTime. Examples expressionop:subtract-yearMonthDuration-from-dateTime(xs:dateTime("2000-10-30T11:12:00"),xs:yearMonthDuration("P1Y2M")) returnsxs:dateTime("1999-08-30T11:12:00"). Summary Returns xs:dateTime given durationbefore specified xs:dateTime after, theduration negative). Operator Mapping semantics operator applied anxs:dateTime xs:dayTimeDurationvalues Signature op:subtract-dayTimeDuration-from-dateTime( as xs:dateTime, as xs:dayTimeDuration) as xs:dateTime Rules function returns xs:dateTime computed bynegating adding result value using function op:add-dayTimeDuration-to-dateTime. Examples expressionop:subtract-dayTimeDuration-from-dateTime(xs:dateTime("2000-10-30T11:12:00"),xs:dayTimeDuration("P3DT1H15M")) returnsxs:dateTime("2000-10-27T09:57:00"). Summary Returns xs:date given duration aftera specified xs:date before, duration isnegative). Operator Mapping semantics operator applied anxs:date xs:yearMonthDurationvalue. Signature op:add-yearMonthDuration-to-date( as xs:date, as xs:yearMonthDuration) as xs:date Properties function Rules function returns result casting toan xs:dateTime, adding using thefunction op:add-yearMonthDuration-to-dateTime,and casting result back xs:date. Examples expressionop:add-yearMonthDuration-to-date(xs:date("2000-10-30"),xs:yearMonthDuration("P1Y2M")) returnsxs:date("2001-12-30"). Summary Returns xs:date given duration aftera specified xs:date before, duration isnegative). Operator Mapping semantics operator applied anxs:date xs:dayTimeDurationvalue. Signature op:add-dayTimeDuration-to-date( as xs:date, as xs:dayTimeDuration) as xs:date Properties function Rules function returns result casting toan xs:dateTime, adding using thefunction op:add-dayTimeDuration-to-dateTime,and casting result back xs:date. Examples expressionop:add-dayTimeDuration-to-date(xs:date("2004-10-30Z"),xs:dayTimeDuration("P2DT2H30M0S")) returnsxs:date("2004-11-01Z"). starting instant ofthe first argument xs:dateTime value{2004, PT0S}. Adding secondargument xs:dateTime value{2004, PT0S}. time components arethen discarded. Summary Returns xs:date given duration beforea specified xs:date after, duration isnegative). Operator Mapping semantics operator applied anxs:date xs:yearMonthDurationvalue. Signature op:subtract-yearMonthDuration-from-date( as xs:date, as xs:yearMonthDuration) as xs:date Properties function Rules Returns xs:date computed negating$arg2 adding result function op:add-yearMonthDuration-to-date. Examples expressionop:subtract-yearMonthDuration-from-date(xs:date("2000-10-30"),xs:yearMonthDuration("P1Y2M")) returnsxs:date("1999-08-30"). expressionop:subtract-yearMonthDuration-from-date(xs:date("2000-02-29Z"),xs:yearMonthDuration("P1Y")) returnsxs:date("1999-02-28Z"). expressionop:subtract-yearMonthDuration-from-date(xs:date("2000-10-31-05:00"),xs:yearMonthDuration("P1Y1M")) returnsxs:date("1999-09-30-05:00"). Summary Returns xs:date given duration beforea specified xs:date after, duration isnegative). Operator Mapping semantics operator applied anxs:date xs:dayTimeDuration. Signature op:subtract-dayTimeDuration-from-date( as xs:date, as xs:dayTimeDuration) as xs:date Properties function Rules Returns xs:date computed negating$arg2 adding result function op:add-dayTimeDuration-to-date. Examples expressionop:subtract-dayTimeDuration-from-date(xs:date("2000-10-30"),xs:dayTimeDuration("P3DT1H15M")) returnsxs:date("2000-10-26"). Summary Returns xs:time value given durationafter specified xs:time before, durationis negative causes wrap-around past midnight) Operator Mapping semantics operator applied anxs:time xs:dayTimeDurationvalue. Signature op:add-dayTimeDuration-to-time( as xs:time, as xs:dayTimeDuration) as xs:time Rules First, days component canonical lexicalrepresentation set thevalue resulting xs:dayTimeDuration iscalculated. Alternatively, value modulus86,400 used as second argument. value added thevalue converted anxs:dateTime using reference date such time component result isreturned. Note xs:time returned occur ina following preceding day be less result same timezone as timezone, result timezone. Examples expressionop:add-dayTimeDuration-to-time(xs:time("11:12:00"),xs:dayTimeDuration("P3DT1H15M")) returnsxs:time("12:27:00"). expressionop:add-dayTimeDuration-to-time(xs:time("23:12:00+03:00"),xs:dayTimeDuration("P1DT3H15M")) returnsxs:time("02:27:00+03:00"). PT3H}). Summary Returns xs:time value given durationbefore specified xs:time after, durationis negative causes wrap-around past midnight) Operator Mapping semantics operator applied anxs:time xs:dayTimeDurationvalue. Signature op:subtract-dayTimeDuration-from-time( as xs:time, as xs:dayTimeDuration) as xs:time Properties function Rules function returns result negating adding result using functionadd-dayTimeDuration-to-time. Examples expressionop:subtract-dayTimeDuration-from-time(xs:time("11:12:00"),xs:dayTimeDuration("P3DT1H15M")) returnsxs:time("09:57:00"). expressionop:subtract-dayTimeDuration-from-time(xs:time("08:20:00-05:00"),xs:dayTimeDuration("P23DT10H10M")) returnsxs:time("22:10:00-05:00"). Formatting dates andtimes Function Meaning fn:format-dateTime Returns string containing xs:dateTime valueformatted display. fn:format-date Returns string containing xs:date valueformatted display. fn:format-time Returns string containing xs:time valueformatted display. functions are provided represent dates times as astring, using conventions selected calendar, language, andcountry. signatures are presented first, followed ruleswhich apply functions. fn:format-dateTime Summary Returns string containing xs:dateTime valueformatted display. Signatures fn:format-dateTime($value as xs:dateTime?,$picture as xs:string) as xs:string? fn:format-dateTime( as xs:dateTime?, as xs:string, as xs:string?, as xs:string?, as xs:string?) as xs:string? Properties form function default calendar, default language, defaultplace, implicit timezone. form function implicit timezone, namespaces. Rules Thedate/time formatting functions. Summary Returns string containing xs:date valueformatted display. Signatures fn:format-date($value as xs:date?,$picture as xs:string) as xs:string? fn:format-date( as xs:date?, as xs:string, as xs:string?, as xs:string?, as xs:string?) as xs:string? Properties form function default calendar, default language, defaultplace, implicit timezone. form function implicit timezone, namespaces. Rules Thedate/time formatting functions. Summary Returns string containing xs:time valueformatted display. Signatures fn:format-time($value as xs:time?,$picture as xs:string) as xs:string? fn:format-time( as xs:time?, as xs:string, as xs:string?, as xs:string?, as xs:string?) as xs:string? Properties form function default calendar, default language, defaultplace, implicit timezone. form function implicit timezone, namespaces. Rules Thedate/time formatting functions. date/time formattingfunctions fn:format-dateTime,fn:format-date, andfn:format-timefunctions format as string using picturestring specified argument, thecalendar specified argument, thelanguage specified argument, thecountry other place name specified argument. result function theformatted string representation suppliedxs:dateTime, xs:date, orxs:time value. functionsfn:format-dateTime,fn:format-date, andfn:format-time arereferred collectively as date formattingfunctions. empty sequence, functionreturns empty sequence. Calling form functions isequivalent calling form lastthree arguments set empty sequence. details arguments, see9.8.4.3 language, calendar, andplace arguments. general, use invalid argument results dynamic error([err:FOFD1340]). contrast, use anoption arguments valid not supported bythe implementation not error, cases theimplementation required output value fallbackrepresentation. More detailed rules are givenbelow. picture string picture sequence variable markers andliteral substrings. substring enclosed square brackets isinterpreted as variable marker; substrings not enclosed squarebrackets are taken as literal substrings. literal substringsare optional present are rendered unchanged, including anywhitespace. opening closing square bracket requiredwithin literal substring, be doubled.The variable markers are replaced result stringsrepresenting aspects date time be formatted. Theseare described detail below. variable marker component specifier followedoptionally presentation modifiers optionallyby width modifier. Whitespace variable marker isignored. variable marker be separated components byapplying following rules: component specifier always present always singleletter. width modifier be recognized presence acomma. substring component specifier comma end string there comma) containsthe first second presentation modifiers, areoptional. substring single character, isinterpreted as first presentation modifier. morethan character, last character examined: validas second presentation modifier then treated as such, andthe preceding part substring firstpresentation modifier. Otherwise, second presentation modifieris presumed absent whole substring interpreted as thefirst presentation modifier. component specifier component thedate time required, following values: Specifier Meaning Default Presentation Modifier Y year value) M month year D day month d day year F day week n W week year week month H hour day hours) h hour half-day hours) P am/pm marker n m minute hour s second minute f fractional seconds Z timezone timezone as Z, modified appropriate includea prefix as time offset using GMT, example GMT+1 orGMT-05:00. component there fixed prefix ofGMT, localized variation thereof chosenlanguage, remainder value formatted as forspecifier Z. C calendar: name abbreviation calendar name n E era: name baseline numbering years, forexample reign monarch n dynamic error reported syntax pictureis incorrect. dynamic error reported component specifierwithin picture components are not available inthe given type example picturesupplied fn:format-time theyear, month, day component. not error include timezone component thesupplied value timezone. circumstances timezonecomponent be ignored. first presentation modifier style inwhich value component be represented. value maybe format token permitted as primary format token thesecond argument fn:format-integer function,indicating value component be outputnumerically using specified number format example,1, W, Ww) format token n, N, orNn, indicating value component tobe output name, lower-case, upper-case, title-caserespectively. Components be output name include not limited months, days week, timezones, eras.If processor output components name thechosen calendar language then use fallback representation. comma be used as grouping separator theformat token, then there be width specifier. Morespecifically: variable marker more commas,then last comma treated as introducing width modifier,and others are treated as grouping separators. So[Y9,999,*] output year implementation not support use requestedformat token, use default presentationmodifier component. first presentation modifier present, then mayoptionally be followed second presentation modifier asfollows: Modifier Meaning either t alphabetic traditional numberingrespectively, default being same meaning as secondargument fn:format-integer. either c cardinal ordinal numberingrespective, example acardinal number, 7th, seventh, or7Âº ordinal number. same meaning asin second argument fn:format-integer. Theactual representation ordinal form number dependnot only language, also grammatical context languages agree gender). Note: formatting rules are expressed terms therules format tokens fn:format-integer, theformats actually used be specialized numbering datecomponents appropriate. example, Italian, isconventional use ordinal number thefirst day month, cardinal numbers tre,quattro remaining days. processor maytherefore use convention number days month, ignoringthe presence absence ordinal presentation modifier. not presentation modifier included, widthmodifier be supplied. number charactersor digits be included representation value. width modifier, present, introduced comma orsemicolon. form: min-width min-width either unsigned integerindicating minimum number characters be output, indicating there explicit minimum, andmax-width either unsigned integer indicating themaximum number characters be output, there explicit maximum; ifmax-width omitted then assumed.Both integers, present, be greater thanzero. format token containing more digit, such as001 sets minimum maximumwidth number digits appearing format token; awidth modifier also present, then width modifier takesprecedence. numeric format token containoptional-digit-signs grouping-separatorsas described fn:format-integer. However,the grouping separator be closing square bracket("]"). Note: format token consisting single digit, such as1, not constrain number digits theoutput. case fractional seconds particular,[f001] requests decimal digits,[f01] requests digits, willproduce number digits. exactly digit isrequired, be achieved using component specifier[f1,1-1]. minimum maximum width are unspecified, then theoutput uses as many characters as are required represent thevalue component truncation padding: thisis referred below as full representation thevalue. timezone offset specifier full representation sign offset, thenumber hours offset, offset not integralnumber hours, colon followed twodigits minutes offset.. full representation value specifiedmaximum width, then processor attemptto use alternative shorter representation fits themaximum width. presentation modifier N,n, Nn, done abbreviatingthe name, using either conventional abbreviations available, orcrude right-truncation not. example, settingmax-width be used, though beacceptable use abbreviation inconventional use. example, be abbreviated case year component,setting max-width requests omission high-orderdigits year, example, max-width setto then year be output as03. case fractional seconds component,the value rounded specified size as applying thefunction round-half-to-even(fractional-seconds,max-width). mechanism available fitting thevalue specified maximum width example, romannumerals are used), then value beoutput full representation. full representation value shorter thespecified minimum width, then processor shouldpad value specified width. decimal representations numbers, thisshould be done prepending digits theappropriate set digit characters, appending digits inthe case fractional seconds component. timezone offsets be done first appending acolon followed digits theappropriate set digit characters full representation doesnot already include minutes component specifiedminimum width permits adding characters, then ifnecessary prepending digits appropriate set digitcharacters hour component. other cases, be done appendingspaces. Formatting timezones Special rules apply formatting timezones. thecomponent specifiers Z are used, therules section override rules given elsewhere thecase discrepancies. date/time value be formatted not include atimezone offset, then timezone component specifier generallyignored output). exception militarytimezones are used ZZ) case string isoutput, indicating local time. component specifier output isthe same as component specifier Z, itis prefixed characters GMT localizedequivalent. prefix omitted, however, cases thetimezone identified name rather numeric offset fromUTC. first presentation modifier numeric andcomprises digits grouping-separator(for example then timezoneis formatted as displacement UTC hours, preceded aplus minus sign: example -5 actual timezone offset not integralnumber hours, then minutes part offset appended,separated colon: example first presentation modifier numeric agrouping-separator example then timezone offset output hoursand minutes, separated grouping separator, even thenumber minutes example first presentation modifier numeric andcomprises digits nogrouping-separator, example or0001, then timezone offset shown hours andminutes separator, example -0500 first presentation modifier numeric, anyof above formats, second presentationmodifier t, then timezone offset UTC) output as Z instead signed numericvalue. presentation modifier absent timezoneoffset non-zero, then displayed timezone offset precededby sign negative offsets sign non-negativeoffsets. first presentation modifier Z,then timezone formatted as military timezone letter, usingthe convention Z B M -01:00, -02:00, Y -12:00. letter J localtime) used case value not specify atimezone offset. Timezone offsets have representation inthis system example Indian Standard Time, are outputas format had been requested. first presentation modifier N,then timezone output possible) as timezone name,for example EST CET. same timezoneoffset different names different places; thereforerecommended option be used onlyif country code Olson timezone name supplied argument. absence information,the implementation apply default, example using thetimezone names are conventional North America. notimezone name be identified, timezone offset outputusing fallback format following examples illustrate options timezoneformatting. Variable marker Timezone offsets time -10:00 -05:00 -10:00 -05:00 -10 -5 -10:00 -5:00 -10:00 -05:00 -0500 -10:00 -05:00 Z GMT-10:00 GMT-05:00 GMT+00:00 GMT+05:30 GMT+13:00 W R Z HST EST GMT IST EST EST EST EST EST Thelanguage, calendar, place arguments set languages, calendars, places thatare supported formatting functionsÂ· arguments omitted isan empty sequence, default value used. fallback representation uses different calendar fromthat requested, output string identifythe calendar actually used, example prefixing stringwith X] X calendar actuallyused), localized as appropriate requested language. thefallback representation uses different language thatrequested, output string identify thelanguage actually used, example prefixing string Y] Y language actually used)localized implementation-dependent way. particularcomponent value be output requested format, itshould be output default format thatcomponent. argument language beused result string function. value theargument be either emptysequence value be valid thexml:lang attribute Note permitsthe identification sublanguages based country codes as as identification ofdialects regions country. argument omitted set toan empty sequence, set invalid value valuethat implementation not recognize, then processor usesthe default language defined dynamiccontext. language used select appropriatelanguage-dependent forms names example, months) numbers expressed as words as ordinals 20th,twentieth) hour convention first day week, first week year appropriate choice also take account thevalue argument, though thisshould not be used override language anysublanguage specified as part languageargument. choice names abbreviations used givenlanguage example, implementation mightabbreviate July as Jul usesJly. German, implementation representSaturday as Samstag usesSonnabend. Implementations mayprovide mechanisms allowing users control such choices. ordinal numbers are used, selection correctrepresentation ordinal example, linguistic gender)may depend component being formatted onits textual context picture string. calendar attribute thedateTime, date, timesupplied argument mustbe converted value specified calendar thenconverted string using conventions calendar. calendar value present be validEQName error: Ifit lexical QName then expanded anexpanded QName using statically known namespaces;if prefix then expanded-QName nonamespace. expanded QName namespace, then itmust identify calendar designatorspecified below error: expandedQName namespace then calendar way. argument omitted set toan empty sequence then default calendar defined dynamiccontext used. Note: calendars listed below were known be use thelast years. Many other calendars have been used thepast. specification not define calendars, northe way map value space thexs:date data type Part Datatypes Second Edition]. There beambiguities dates are recorded using different calendars. Forexample, start new day not simultaneous differentcalendars, also vary geographically example, based onthe time sunrise sunset). Translation dates thereforemore reliable time day also known, thegeographic location known. translating dates onecalendar processor take account valuesof arguments,with argument taking precedence. Information about calendars, algorithms forconverting be found Calculations]. Designator Calendar AD Anno Domini Era) AH Anno Hegirae Era) AME Mauludi Era years since Mohammed's birth) AM Anno Mundi Calendar) AP Anno Persici AS Aji Saka Era BE Buddhist Era CB Cooch Behar Era CE Common Era CL Chinese Lunar Era CS Chula Sakarat Era EE Ethiopian Era FE Fasli Era ISO ISO calendar JE Japanese Calendar KE Khalsa Era calendar) KY Kali Yuga Malabar Era MS Monarchic Solar Era NS Nepal Samwat Era OS Old Style Calendar) RS Rattanakosin Era SE Saka Era SH Mohammedan Solar Era SS Saka Samvat TE Tripurabda Era VE Vikrama Era VS Vikrama Samvat Era least above calendars besupported. calendars are supported. ISO calendar whichis included above list designated ISO, isvery similar Gregorian calendar designated AD,but several ways. ISO calendar intended toensure date time formats be read easily othersoftware, as as being legible human users. ISOcalendar use particular numbering conventions asdefined ISO rather allowing be localized ona basis. particular numeric format dates year, week year, andday week; ISO calendar days week arenumbered week calendaryear week Monday Sunday) firstThursday year. numeric values components year,month, day, hour, minute, second are same ISOcalendar as values used lexical representation thedate time as defined Schema Part2: Datatypes Second Edition]. era component) thiscalendar either minus sign negative years) azero-length string positive years). dates before 1January, AD year numbers ISO AD calendars are off byone other: ISO year BC, -0001 BC, etc. ISO not define numbering weeks month.When component used, convention beadopted Monday-to-Sunday week considered fallwithin particular month Thursday month; theweeks fall particular month definition arenumbered starting Thus, example, January fallsin week because Thursday week January thefifth Thursday January, February also week same reason. Note: value space date time data types, as defined inXML Schema, based absolute points time. lexical spaceof data types representation absolutepoints time using proleptic Gregorian calendar, themodern Western calendar extrapolated past future;but value space calendar-neutral. functionsÂ· produce arepresentation absolute point time, denoted apossibly different calendar. So, example, date whoselexical representation XML Schema day Pope Gregory was born) be formattedusing Old Style calendar as January1502. fact there was time aten-day difference calendars. beincorrect, produce incorrect results, represent thisdate element attribute type xs:date even though reflect way thedate was recorded contemporary documents. referring years occurring antiquity, modernhistorians generally use numbering system there noyear year before CE thus BCE). theconvention be used requestedcalendar OS AD requestedcalendar ISO, however, conventions ISO be followed: here year before isnumbered Schema Part Second Edition] value space forxs:date xs:dateTime not includea year however, XSD ISO 8601convention. means date Julius Caesar wasassassinated ISO lexical representation -0043-03-13,but be formatted as March BCE Julian calendar or13 March BCE Gregorian calendar chosenlocalization names months eras). intended use argument toidentify place event represented thedateTime, date, timesupplied argument took place willtake place. argument omitted oris set empty sequence, then default place defined thedynamic context used. value supplied, isnot empty sequence, then shouldeither be country code Olson timezone name.If value not take form, value notrecognized implementation, then default place defined inthe dynamic context used. Country codes are defined Examples are Germany Japan.Implementations also allow use codesrepresenting subdivisions country ISO codesrepresenting formerly used names countries ISO Olson timezone names are defined public-domain tztimezone database Timezone Database].Examples are argument not intended identify location theuser date time being formatted; bedone means attribute. Thisinformation be used provide additionalinformation converting dates calendars whendeciding individual components date time are beformatted. example, different countries using Old Style(Julian) calendar started new year different days, somecountries used variants calendar were out ofsynchronization as result differences calculating leapyears. geographical area identified country code defined bythe boundaries as existed time date beformatted, present-day boundaries dates thefuture. argument supplied form ofan Olson timezone name recognized implementation,then date time being formatted adjusted timezoneoffset applicable timezone. example, thexs:dateTime value isformatted argument set toAmerica/New_York, then output be as thevalue 2010-02-15T07:00:00-05:00 had been supplied.This adjustment daylight savings time account wherepossible; date question daylight savingstime New York, then adjusted timezone offset-PT4H rather Adjustment usingdaylight savings time only possible value adate, date range covered thetimezone database. date time formatting Example: Gregorian calendar following examples show selection dates times andthe way be formatted. examples assume use ofthe Gregorian calendar as default calendar. Required Output Expression format-date($d, format-date($d, format-date($d, format-date($d, 31st December, format-date($d, DEC format-date($d, December format-date($d, Dezember, format-date($d, Tisdag December format-date($d, format-date($d, Thousand format-date($d, einunddreiÃigste Dezember format-date($d, PM format-time($t, pm format-time($t, PM PDT format-time($t, o'clock PM PDT format-time($t, o'clock format-time($t,"[H01]:[m01]") format-time($t,"[H01]:[m01]:[s01].[f001]") GMT+02:00 format-time($t,"[H01]:[m01]:[s01] Uhr GMT+2 format-time($t,"[H01]:[m01] Uhr Tuesday, 31st December format-dateTime($dt, format-dateTime($dt, Example: Non-Gregorian calendars following examples use calendars other Gregoriancalendar. examples use non-Latin characters not displaycorrectly browsers, depending systemconfiguration. Description Request Result Islamic format-date($d, ïº¸ï»­Ùïºï» Jewish Western numbering) format-date($d, ×××ª Jewish traditional numbering) format-date($d, ××´× ×××ª ×ª×©×¡×´× Julian Style) format-date($d, December Thai format-date($d, à¸à¸±à¸à¸§à¸²à¸à¸¡ Functions relatedto QNames create QName addition xs:QName constructor function,QName values be constructed combining namespace URI,prefix, local name, resolving lexical QName thein-scope namespaces element node. section thesefunctions. Leading trailing whitespace, present, string arguments before result constructed. Function Meaning fn:resolve-QName Returns xs:QName value anexpanded-QName) taking xs:string thelexical form xs:QName string form"prefix:local-name" resolving using thein-scope namespaces given element. fn:QName Constructs xs:QName value given namespace URIand lexical QName. Summary Returns xs:QName value anexpanded-QName) taking xs:string thelexical form xs:QName string form"prefix:local-name" resolving using thein-scope namespaces given element. Signature fn:resolve-QName($qname as xs:string?,$element as element()) as xs:QName? Properties function Rules empty sequence, returns emptysequence. More specifically, function searches namespace bindingsof binding name matches theprefix string hasno prefix, constructs expanded-QName local name istaken supplied namespaceURI taken string value namespace binding. prefix, there nonamespace binding corresponding thedefault namespace, then resulting expanded-QName hasno namespace part. prefix absence prefix) supplied$qname argument retained returnedexpanded-QName, as discussed Section DM30. Error Conditions dynamic error raised doesnot have correct lexical form instance ofxs:QName. dynamic error raised aprefix there namespace binding matches prefix. Notes Sometimes requirement construct anxs:QName using default namespace. canbe achieved writing: then fn:resolve-QName($qname, else fn:QName("", requirement construct xs:QNameusing namespaces static context, then thexs:QName constructor be used. Examples Assume element bound asingle namespace binding bound prefix eg. fn:resolve-QName("hello", returns QNamewith local name namespace. fn:resolve-QName("eg:myFunc", returns anxs:QName namespace URI specified thenamespace binding corresponding prefix localname fn:QName Summary Constructs xs:QName value given namespace URIand lexical QName. Signature fn:QName($paramURI as xs:string?,$paramQName as xs:string) as xs:QName Properties function Rules namespace URI returned QName taken thezero-length string empty sequence, prefix absence prefix) retained returned xs:QName value. local name result taken local part Error Conditions dynamic error raised not have correct lexical form instance ofxs:QName. dynamic error raised isthe string empty sequence, value colon dynamic error be raised[err:FOCA0002] not valid URI Namespaces orIRI Namespaces Notes Examples fn:QName("http://www.example.com/example","person") returns xs:QName namespaceURI local name andprefix fn:QName("http://www.example.com/example","ht:person") returns xs:QName namespaceURI local name andprefix operators related QNames section functions QNames as defined Schema Part Datatypes SecondEdition]. Function Meaning op:QName-equal Returns true supplied QNames have samenamespace URI same local part. fn:prefix-from-QName Returns prefix component supplied QName. fn:local-name-from-QName Returns local part supplied QName. fn:namespace-uri-from-QName Returns namespace URI part supplied QName. fn:namespace-uri-for-prefix Returns namespace URI namespaces identified namespace prefix. fn:in-scope-prefixes Returns prefixes namespaces elementnode. Summary Returns true supplied QNames have samenamespace URI same local part. Operator Mapping semantics operators whenapplied values type xs:QName. Signature op:QName-equal($arg1 as xs:QName,$arg2 as xs:QName) as xs:boolean Properties function Rules function returns true namespace URIs are equal localnames are equal. Otherwise, function returns false. namespace URI parts are considered equal are bothabsentDM30,or are present equal rules thefn:codepoint-equalfunction. local parts are also compared rules thefn:codepoint-equalfunction. Notes prefix parts are ignored. fn:prefix-from-QName Summary Returns prefix component supplied QName. Signature fn:prefix-from-QName($arg as xs:QName?) as xs:NCName? Properties function Rules empty sequence function returnsthe empty sequence. prefix component functionreturns empty sequence. Otherwise, function returns xs:NCNamerepresenting prefix component Summary Returns local part supplied QName. Signature fn:local-name-from-QName($arg as xs:QName?) as xs:NCName? Properties function Rules empty sequence function returnsthe empty sequence. Otherwise, function returns xs:NCNamerepresenting local part Examples expressionfn:local-name-from-QName(fn:QName("http://www.example.com/example","person")) returns Summary Returns namespace URI part supplied QName. Signature fn:namespace-uri-from-QName($arg as xs:QName?) as xs:anyURI? Properties function Rules empty sequence function returnsthe empty sequence. Otherwise, function returns xs:anyURIrepresenting namespace URI part namespace, function returnsthe xs:anyURI. Examples expressionfn:namespace-uri-from-QName(fn:QName("http://www.example.com/example","person")) returnsxs:anyURI("http://www.example.com/example"). Summary Returns namespace URI namespaces identified namespace prefix. Signature fn:namespace-uri-for-prefix( as xs:string?, as element()) as xs:anyURI? Properties function Rules namespace whosenamespace prefix equal functionreturns namespace URI namespace. namespace whosenamespace prefix equal functionreturns empty sequence. string emptysequence, then default namespace(that namespace node name), function returns thenamespace URI default namespace. default namespace, function returns emptysequence. Prefixes are equal only Unicode codepoints matchexactly. Examples let xmlns="http://example.org/one" xmlns:z="http://example.org/two"> xmlns=""/></z:a> expression fn:namespace-uri-for-prefix("z", expression fn:namespace-uri-for-prefix("", expression fn:namespace-uri-for-prefix((), expression fn:namespace-uri-for-prefix("xml",$e) returns"http://www.w3.org/XML/1998/namespace". expression fn:namespace-uri-for-prefix("xml",$e) returns"http://www.w3.org/XML/1998/namespace". fn:in-scope-prefixes Summary Returns prefixes namespaces elementnode. Signature fn:in-scope-prefixes($element as element()) as xs:string* Properties function Rules function returns sequence strings representing theprefixes namespaces namespace bindings have prefix, function returnsthe prefix as xs:NCName. default namespace,which prefix, returns string. result sequence duplicates. ordering result sequence 11Operators base64Binary hexBinary Comparisons base64Binary andhexBinary values following comparison operators onxs:base64Binary xs:hexBinary valuesare defined. Comparisons take operands same type; thatis, operands be xs:base64Binary bothoperands be xs:hexBinary. returns booleanvalue. value type xs:hexBinary be compared avalue type xs:base64Binary casting value tothe other type. Castingto xs:base64Binary xs:hexBinary. Function Meaning op:hexBinary-equal Returns true xs:hexBinary values containthe same octet sequence. op:base64Binary-equal Returns true xs:base64Binary values containthe same octet sequence. op:hexBinary-equal Summary Returns true xs:hexBinary values contain thesame octet sequence. Operator Mapping semantics operators whenapplied xs:hexBinary values. Signature op:hexBinary-equal( as xs:hexBinary, as xs:hexBinary) as xs:boolean Rules function returns true are same length, measured binaryoctets, contain same octets same order. Otherwise,it returns false. op:base64Binary-equal Summary Returns true xs:base64Binary values containthe same octet sequence. Operator Mapping semantics operators whenapplied xs:base64Binary values. Signature op:base64Binary-equal( as xs:base64Binary, as xs:base64Binary) as xs:boolean Rules function returns true are same length, measured binaryoctets, contain same octets same order. Otherwise,it returns false. 12Operators NOTATION section operators takexs:NOTATION values as arguments. Function Meaning op:NOTATION-equal Returns true xs:NOTATIONvalues have same namespace URI same local part. Summary Returns true xs:NOTATIONvalues have same namespace URI same local part. Operator Mapping semantics operators whenapplied values type xs:NOTATION. Signature op:NOTATION-equal($arg1 as xs:NOTATION,$arg2 as xs:NOTATION) as xs:boolean Rules function returns true namespace URIs are equal localnames are equal. Otherwise, function returns false. namespace URI parts are considered equal are bothabsentDM30,or are present equal rules thefn:codepoint-equalfunction. local parts are also compared rules thefn:codepoint-equalfunction. Notes prefix parts are ignored. Functionsand operators nodes section functions operators nodes. Nodesare formally defined Section NodesDM30. Function Meaning fn:name Returns name node, as xs:string thatis either string, lexical form anxs:QName. fn:local-name Returns local part name as anxs:string either string, orhas lexical form xs:NCName. fn:namespace-uri Returns namespace URI part name as xs:anyURI value. fn:lang function tests language context item second argument omitted, as specifiedby xml:lang attributes same as, asublanguage language specified op:is-same-node Returns true arguments refer same node. op:node-before Returns true node identified first argumentprecedes node identified second argument documentorder. op:node-after Returns true node identified first argumentfollows node identified second argument documentorder. fn:root Returns root tree usually, not necessarily, be documentnode. fn:path Returns path expression be used select thesupplied node relative root containing document. fn:has-children Returns true supplied node more child nodes(of kind). fn:innermost Returns node input sequence not anancestor member input sequence; nodes arereturned document order duplicates eliminated. fn:outermost Returns node input sequence noancestor member input sequence; nodesare returned document order duplicates eliminated. illustrative examples below assume XQuery ortransformation operating PurchaseOrder document containing anumber line-item elements. line-item child elementscalled description, price, quantity, etc. content isdifferent line-item. Quantity simple content typexs:decimal. Further assume variables$item1, etc. are bound tosingle line-item element nodes document sequence thatthe value quantity child first line-item is5.0. let widget</description> widget</description> widget</description> let let let fn:name Summary Returns name node, as xs:string iseither string, lexical form anxs:QName. Signatures fn:name() as xs:string fn:name($arg as node()?) as xs:string Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. argument supplied empty sequence, thefunction returns string. node identified name document node, comment, text node, anamespace node having name), function returns thezero-length string. Otherwise, function returns value expressionfn:string(fn:node-name($arg)). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Summary Returns local part name as anxs:string either string, orhas lexical form xs:NCName. Signatures fn:local-name() as xs:string fn:local-name($arg as node()?) as xs:string Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. argument supplied empty sequence, thefunction returns string. node identified name document node, comment, text node, anamespace node having name), function returns thezero-length string. Otherwise, function returns local part theexpanded-QName node identified asdetermined dm:node-name accessor defined inSection5.11 node-name Accessor DM30). Thiswill be xs:string lexical form anxs:NCName. Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Summary Returns namespace URI part name xs:anyURI value. Signatures fn:namespace-uri() as xs:anyURI fn:namespace-uri($arg as node()?) as xs:anyURI Properties form function form function Rules argument omitted, defaults context node(.). behavior function argument isomitted exactly same as context item had been passedas argument. node identified anelement attribute node, element attributenode expanded-QName determined thedm:node-name accessor Section5.11 node-name Accessor DM30) inno namespace, then function returns value. Otherwise, result be namespace URI part theexpanded-QName node identified asdetermined dm:node-name accessor defined inSection5.11 node-name Accessor DM30),returned as xs:anyURI value. Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. fn:lang Summary function tests language context item second argument omitted, as specifiedby xml:lang attributes same as, asublanguage language specified Signatures fn:lang($testlang as xs:string?) as xs:boolean fn:lang($testlang as xs:string?,$node as node()) as xs:boolean Properties form function form function Rules behavior function second argument omittedis exactly same as context item hadbeen passed as second argument. language argument contextitem second argument omitted, determined valueof xml:lang attribute node, nodehas such attribute, value xml:langattribute nearest ancestor node anxml:lang attribute. there such ancestor, thenthe function returns false. empty sequence isinterpreted as string. relevant xml:lang attribute determined bythe value XPath expression: expression returns empty sequence, functionreturns false. Otherwise, function returns true onlyif, based caseless default match as specified section Unicode Standard], equal string-value therelevant xml:lang attribute, equal substring thestring-value relevant xml:lang attribute thatstarts start string-value ends immediately beforea hyphen, character HYPHEN-MINUS, #x002D). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Examples expression fn:lang("en") returntrue context node were followingfour elements: xml:lang="en"/> xml:lang="en"><para>And now, andforever!</para></div> xml:lang="EN"/> xml:lang="en-us"/> expression fn:lang("fr") returnfalse context node were Summary Returns true arguments refer same node. Operator Mapping semantics operator applied twonodes. Signature op:is-same-node($arg1 as node(),$arg2 as node()) as xs:boolean Rules node identified value thesame node as node identified value nodes have same identity), then functionreturns true; otherwise, function returnsfalse. Examples expression op:is-same-node($item1, true(). expression op:is-same-node($item1, false(). Summary Returns true node identified first argumentprecedes node identified second argument documentorder. Operator Mapping semantics operator applied totwo nodes. Signature op:node-before($arg1 as node(),$arg2 as node()) as xs:boolean Rules node identified value occursin document order before node identified value then function returns true;otherwise, returns false. rules determining order nodes singledocument different documents be found Section2.4 Document Order DM30. Examples expression op:node-before($item1, true(). expression op:node-before($item1, false(). Summary Returns true node identified first argumentfollows node identified second argument documentorder. Operator Mapping semantics operator applied totwo nodes. Signature op:node-after($arg1 as node(),$arg2 as node()) as xs:boolean Rules node identified value occursin document order after node identified value function returns true;otherwise, returns false. rules determining order nodes singledocument different documents be found Section2.4 Document Order DM30. Examples expression op:node-after($item1, false(). expression op:node-after($item1, false(). expression op:node-after($item2, true(). fn:root Summary Returns root tree belongs.This usually, not necessarily, be document node. Signatures fn:root() as node() fn:root($arg as node()?) as node()? Properties form function form function Rules function called argument, context item(.) used as default argument. behavior ofthe function argument omitted exactly same as ifthe context item had been passed as argument. function returns value expression($arg/ancestor-or-self::node())[1]. Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Examples examples use variables be defined XML Query Language] let <tool>wrench</tool>let document be defined Version name="i" <tool>wrench</tool></xsl:variable><xsl:variable name="o" select="$i"/> name="odoc"> select="$o"/></xsl:variable><xsl:variable name="newi" select="$o/tool"/> fn:root($i) returns element node$i fn:root($o/quantity) returns element node$o fn:root($odoc//quantity) returns document node$odoc fn:root($newi) returns element node$o final examples be made type-safe wrappingtheir operands fn:exactly-one(). fn:path Summary Returns path expression be used select thesupplied node relative root containing document. Signatures fn:path() as xs:string? fn:path($arg as node()?) as xs:string? Properties form function form function Rules behavior function argument omitted isexactly same as context item had beenpassed as argument. empty sequence, function returnsthe empty sequence. document node, function returnsthe string Otherwise, function constructs string asequence steps, ancestor-or-self other root node. Thisstring prefixed ifthe root node not document node. step ofthe character followed string formdepends kind node selected step, as element node,Q{uri}local[position],where uri namespace URI nodename empty string node namespace,local local part node name, andposition integer representing theposition selected node siblings. attribute node: node namespace, @local,where local local part nodename otherwise, @Q{uri}local, whereuri namespace URI node name,and local local part nodename text node: text()[position] whereposition integer representing theposition selected node text node siblings comment node: comment()[position]where position integer representing theposition selected node comment node siblings processing-instruction node:processing-instruction(local)[position]where local name processinginstruction node position integerrepresenting position selected node node siblings namespace node: namespace node name:namespace::prefix, whereprefix local part name thenamespace node namespace prefix). namespace node name thedefault namespace):namespace::*[Q{http://www.w3.org/2005/xpath-functions}local-name()=""] Examples let fn:parse-xml('<?xml version="1.0"?><p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">Freude, schÃ¶ner GÃ¶tterfunken,<br/>Tochter aus Elysium,<br/>Wir betreten feuertrunken,<br/>Himmlische, dein Heiligtum.</p>') expression fn:path($e) returns'/'. expression fn:path($e/*:p) returns'/Q{http://example.com/one}p[1]'. expression fn:path($e/*:p/@xml:lang) returns'/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang'. expression fn:path($e/*:p/@author) returns'/Q{http://example.com/one}p[1]/@author'. expression fn:path($e/*:p/*:br[2]) returns'/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]'. expressionfn:path($e//text()[starts-with(normalize-space(),'Tochter')]) returns'/Q{http://example.com/one}p[1]/text()[2]'. let xml:id="ID21256"> <last>Brown</last> expression fn:path($emp) returns'Q{http://www.w3.org/2005/xpath-functions}root()'. expression fn:path($emp/@xml:id) returns'Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id'. expression fn:path($emp/empnr) returns'Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]'. Summary Returns true supplied node more child nodes(of kind). Signatures fn:has-children() as xs:boolean fn:has-children($node as node()?) as xs:boolean Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. Provided supplied argument expected type node()?, resultof function call fn:has-children($node) definedto be same as result expression fn:exists($node/child::node()). Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes empty sequence result isfalse. motivation function support streamedevaluation. According streaming rules Transformations Version thefollowing construct not streamable: test="exists(row)"> select="row"> select="."/></li> because downward selections read thechild row elements. use offn:has-children xsl:if conditionalis intended circumvent restriction. function was introduced support streaming usecases, general utility as convenience function. Summary Returns node input sequence not anancestor member input sequence; nodes arereturned document order duplicates eliminated. Signature fn:innermost($nodes as node()*) as node()* Properties function Rules effect function callfn:innermost($nodes) defined be equivalent tothe result expression function as input sequence nodes, andreturns node sequence not ancestor ofanother node sequence; nodes are returned indocument order duplicates eliminated. Examples source document nested sections represented bydiv elements, expressioninnermost(//div) returns divelements do not contain further div elements. Summary Returns node input sequence noancestor member input sequence; nodesare returned document order duplicates eliminated. Signature fn:outermost($nodes as node()*) as node()* Properties function Rules effect function callfn:outermost($nodes) defined be equivalent tothe result expression function as input sequence nodes, andreturns node sequence not haveanother node sequence as ancestor; nodesare returned document order duplicates eliminated. Notes formulation appear be simpler, butdoes not correctly account attribute nodes, as are notdescendants parent element. motivation function was based XSLT streaming usecases. There are cases Version streaming rules allow theconstruct outermost(//section) do not allow//section; function therefore be useful incases known sections not be nested, as wellas cases application actually wishes process allsections are nested Examples source document nested sections represented bydiv elements, expressionoutermost(//div) returns divelements are not contained furtherdiv elements. 14Functions operators sequences sequence ordered collection moreitems. item either node anatomic value. terms sequence itemare defined formally XMLQuery Language] Path Language(XPath) functions operators sequences following functions are defined sequences. Thesefunctions work sequence, performing operationsthat are sensitive individual items sequence. Function Meaning op:concatenate Returns concatenation sequences. fn:empty Returns true argument empty sequence. fn:exists Returns true argument non-empty sequence. fn:head Returns first item sequence. fn:tail Returns first item sequence. fn:insert-before Returns sequence constructed inserting item asequence items given position existingsequence. fn:remove Returns new sequence containing items item position$position. fn:reverse Reverses order items sequence. fn:subsequence Returns contiguous sequence items value beginning position indicated thevalue continuing number ofitems indicated value fn:unordered Returns items dependentÂ· order. previous section, illustrative examples below,assume XQuery transformation operating non-emptyPurchase Order document containing number line-item elements.The variable bound sequence ofline-item nodes document order. variables$item1, etc. are bound toseparate, individual line-item nodes sequence. Summary Returns concatenation sequences. Operator Mapping semantics infix operator applied toany sequences. Signature op:concatenate($seq1 as item()*,$seq2 as item()*) as item()* Properties function Rules function returns sequence consisting items followed items Notes either sequence empty sequence, other operand isreturned. Examples expression op:concatenate((1, expression op:concatenate((1, expression op:concatenate((), returns(). fn:empty Summary Returns true argument empty sequence. Signature fn:empty($arg as item()*) as xs:boolean Properties function Rules value empty sequence, thefunction returns true; otherwise, function returnsfalse. Examples expression fn:empty((1,2,3)[10]) returnstrue(). expression fn:empty(fn:remove(("hello", returns false(). Summary Returns true argument non-empty sequence. Signature fn:exists($arg as item()*) as xs:boolean Properties function Rules value non-empty sequence, thefunction returns true; otherwise, function returnsfalse. Examples expression fn:exists(fn:remove(("hello"), false(). expression fn:exists(fn:remove(("hello", returns true(). fn:head Summary Returns first item sequence. Signature fn:head($arg as item()*) as item()? Properties function Rules function returns value expression$arg[1] Notes empty sequence, empty sequenceis returned. Otherwise first item sequence isreturned. Examples expression fn:head(1 returns1. expression fn:head(("a", returns"a". expression fn:head(()) returns(). fn:tail Summary Returns first item sequence. Signature fn:tail($arg as item()*) as item()* Properties function Rules function returns value expressionsubsequence($arg, Notes empty sequence, sequencecontaining single item, then empty sequence returned. Examples expression fn:tail(1 returns expression fn:tail(("a", returns("b", expression fn:tail("a") returns(). expression fn:tail(()) returns(). Summary Returns sequence constructed inserting item asequence items given position existingsequence. Signature fn:insert-before( as item()*, as xs:integer, as item()*) as item()* Properties function Rules value returned function items index less followed items followed remaining elements order. Notes empty sequence,$inserts returned. theempty sequence, returned. less firstposition, effective value greater number items then effective value equal number items value not affected thesequence construction. Examples let expression fn:insert-before($abc, expression fn:insert-before($abc, expression fn:insert-before($abc, expression fn:insert-before($abc, expression fn:insert-before($abc, Summary Returns new sequence containing items item position$position. Signature fn:remove($target as item()*,$position as xs:integer) as item()* Properties function Rules function returns sequence consisting items index less followed items index greater Notes less greater thenumber items isreturned. empty sequence, emptysequence returned. Examples let expression fn:remove($abc, returns("a", expression fn:remove($abc, returns("b", expression fn:remove($abc, returns("a", expression fn:remove((), returns(). Summary Reverses order items sequence. Signature fn:reverse($arg as item()*) as item()* Properties function Rules function returns sequence containing items reverse order. Notes empty sequence, empty sequenceis returned. Examples let expression fn:reverse($abc) returns expression fn:reverse(("hello")) returns("hello"). expression fn:reverse(()) returns(). Summary Returns contiguous sequence items value beginning position indicated thevalue continuing number ofitems indicated value Signatures fn:subsequence($sourceSeq as item()*,$startingLoc as xs:double) as item()* fn:subsequence( as item()*, as xs:double, as xs:double) as item()* Properties function Rules case, returns: le position()] case, returns: le position() position() lt fn:round($startingLoc) fn:round($length)] Notes first item sequence located position notposition empty sequence, emptysequence returned. negative, thesubsequence items beginning not specified, subsequenceincludes items end greater number items inthe value following$startingLoc, subsequence items theend exception previous notes, then fn:round($startingLoc) NaN; sinceposition() lt NaN always false, result anempty sequence. reason function arguments typexs:double many computations untyped datareturn xs:double result; reason therounding rules compensate imprecision thesefloating-point computations. Examples let expression fn:subsequence($seq, returns("item4", expression fn:subsequence($seq, returns("item3", Summary Returns items dependentÂ· order. Signature fn:unordered($sourceSeq as item()*) as item()* Properties function Rules function returns items dependentÂ· order. Notes Query optimizers be able do better job order ofthe output sequence not specified. example, retrievingprices purchase order, index prices, maybe more efficient return prices index order rather thanin document order. Examples expression fn:unordered((1, permutation compare values sequences functions section rely comparisons theitems more sequences. Function Meaning fn:distinct-values Returns values appear sequence, duplicateseliminated. fn:index-of Returns sequence positive integers giving positionswithin sequence items are equal fn:deep-equal function sequences are deep-equal toeach other. be deep-equal, contain items arepairwise deep-equal; items be deep-equal, musteither be atomic values compare equal, nodes samekind, same name, children are deep-equal. fn:distinct-values Summary Returns values appear sequence, duplicateseliminated. Signatures fn:distinct-values($arg as xs:anyAtomicType*) as xs:anyAtomicType* fn:distinct-values( as xs:anyAtomicType*, as xs:string) as xs:anyAtomicType* Properties form function collations, implicit timezone. form function collations, static base uri, implicittimezone. Rules function returns sequence results set values areequal Values are compared using eqoperator, subject caveats defined below. Values type xs:untypedAtomic are compared as ifthey were type xs:string. Values be compared, because eqoperator not defined types, are considered bedistinct. collation used function determined according tothe rules Choosing acollation. collation used string comparison isrequired. xs:float xs:double values,positive equal negative althoughNaN not equal multiple NaN values single NaNis returned. xs:dateTime, xs:date orxs:time values do not have timezone, areconsidered have implicit timezone provided dynamiccontext purpose comparison. Note thatxs:dateTime, xs:date orxs:time values compare equal even theirtimezones are different. order sequence values returned dependentÂ·. value set values compare equal returned dependentÂ·. input sequence values different numeric typesthat differ other small amounts, then eq operatoris not transitive, because rounding effects occurring duringtype promotion. situation input threevalues B, C such thatA eq B, B eq C, ne C,then number items result function asthe choice items are returned) dependentÂ·, subject only constraints notwo items result sequence compare equal other, input item not appear result sequencecompares equal item appear resultsequence. example, computing: distinct-values( xs:decimal('1.0000000000100000000001', xs:double( because values type xs:float andxs:double compare equal value typexs:decimal not equal other. Notes empty sequence, function returnsthe empty sequence. Examples expression fn:distinct-values((1, permutation expressionfn:distinct-values((xs:untypedAtomic("cherry"),xs:untypedAtomic("plum"), xs:untypedAtomic("plum"))) returnssome permutation Summary Returns sequence positive integers giving positionswithin sequence items are equal Signatures fn:index-of( as xs:anyAtomicType*, as xs:anyAtomicType) as xs:integer* fn:index-of( as xs:anyAtomicType*, as xs:anyAtomicType, as xs:string) as xs:integer* Properties form function collations, implicit timezone. form function collations, static base uri, implicittimezone. Rules function returns sequence positive integers giving thepositions sequence items areequal collation used function determined according tothe rules Choosing acollation. collation used string comparison isrequired. items sequence are compared rules eqoperator. Values type xs:untypedAtomic are comparedas were type xs:string. Values cannotbe compared, because eq operator not definedfor types, are considered be distinct. item comparesequal, then position item sequence$seq included result. first item sequence position not position0. result sequence ascending numeric order. Notes value empty sequence, ifno item matches then thefunction returns empty sequence. error non-comparable values are encountered. Sowhen comparing atomic values, effective boolean value offn:index-of($a, true are equal, false are not equal notcomparable. Examples expression fn:index-of((10, expression fn:index-of((10, returns expression fn:index-of(("a", returns expression fn:index-of(current-date(), @a attribute typexs:NMTOKENS string value greenblue", typed value therefore then fn:index-of(@a, because function callingmechanism attribute node produce sequence ofthree xs:NMTOKEN values. Summary function sequences are deep-equal toeach other. be deep-equal, contain items arepairwise deep-equal; items be deep-equal, musteither be atomic values compare equal, nodes samekind, same name, children are deep-equal. Signatures fn:deep-equal($parameter1 as item()*,$parameter2 as item()*) as xs:boolean fn:deep-equal( as item()*, as item()*, as xs:string) as xs:boolean Properties form function collations, implicit timezone. form function collations, static base uri, implicittimezone. Rules argument collationwhich used levels recursion strings are compared(but not names are compared), according rules Choosing acollation. sequences are empty, function returnstrue. sequences are different lengths, functionreturns false. sequences are same length, functionreturns true only item sequence$parameter1 deep-equal item sameposition sequence rules fordeciding items are deep-equal follow. Call items are atomic values,they are deep-equal only eq istrue, values are NaN. theeq operator not defined function returns false. pair anatomic value other not, function returnsfalse. are nodes, theyare compared as described below: nodes are different kinds, result isfalse. nodes are document nodes then aredeep-equal only sequence deep-equal sequence nodes are element nodes then are deep-equalif only following conditions are satisfied: nodes have same name, node-name($i2)). nodes are annotated as having simple content orboth nodes are annotated as having complex content. thispurpose content" means either simple type complextype simple content; content" means complex typewhose variety mixed, element-only, empty. Note: consequence rule validating documentD schema usually not necessarily)result document not deep-equal D. Theexception schema elements have mixedcontent. nodes have same number attributes, everyattribute there anattribute such are deep-equal. following conditions element nodes are annotated as having simple content(as defined above), typed value deep-equal typed value element nodes have type annotation acomplex type variety element-only, sequence$i1/* deep-equal sequence$i2/*. element nodes have type annotation acomplex type variety mixed, sequence$i1/(*|text()) deep-equal sequence$i2/(*|text()). element nodes have type annotation acomplex type variety empty. nodes are attribute nodes then aredeep-equal only following conditions aresatisfied: nodes have same name, node-name($i2)). typed value deep-equal typedvalue nodes are processing instruction nodes, thenthey are deep-equal only following conditionsare satisfied: nodes have same name, node-name($i2)). string value equal stringvalue nodes are namespace nodes, then aredeep-equal only following conditions aresatisfied: nodes either have same name are nameless,that fn:deep-equal(node-name($i1),node-name($i2)). string value equal stringvalue compared using Unicode codepointcollation. nodes are text nodes comment nodes, then theyare deep-equal only string-values are equal. Error Conditions type error raised either input sequencecontains function item. Notes nodes are not required have same type annotation,and are not required have same namespaces.They also differ parent, base URI, thevalues returned andis-idrefs accessors Section Accessor DM30 Section Accessor DM30). orderof children significant, order attributes isinsignificant. contents comments processing instructions aresignificant only nodes appear directly as items twosequences being compared. content comment processinginstruction as descendant item thesequences being compared not affect result. However, thepresence comment processing instruction, causes atext node be split text nodes, affect theresult. result fn:deep-equal(1, current-dateTime())is false; not raise error. Examples let last='Parker' first='Peter'/> last='Barker' first='Bob'/> last='Parker' first='Peter'/> expression fn:deep-equal($at, returnsfalse(). expression fn:deep-equal($at/name[1],$at/name[2]) returns false(). expression fn:deep-equal($at/name[1],$at/name[3]) returns true(). expression fn:deep-equal($at/name[1], returns false(). Functions test thecardinality sequences following functions test cardinality sequencearguments. Function Meaning fn:zero-or-one Returns items.Otherwise, error. fn:one-or-more Returns more items.Otherwise, error. fn:exactly-one Returns exactly item.Otherwise, error. functions fn:zero-or-one, fn:one-or-more, fn:exactly-one defined thissection, check cardinality sequence theexpected range. are particularly useful regard statictyping. example, function call fn:remove($seq, fn:index-of($seq2,'abc')) result call fn:index-of be singletoninteger, static type system infer writing theexpression as fn:remove($seq,fn:exactly-one(fn:index-of($seq2, providea suitable static type query analysis time, thelength sequence correct dynamic check queryexecution time. type signatures functions deliberately declare theargument type as item()*, permitting sequence anylength. more restrictive signature defeat purpose ofthe function, defer cardinality checking queryexecution time. Summary Returns items.Otherwise, error. Signature fn:zero-or-one($arg as item()*) as item()? Properties function Rules error cases, function returns Error Conditions dynamic error raised more item. Summary Returns more items.Otherwise, error. Signature fn:one-or-more($arg as item()*) as item()+ Properties function Rules error cases, function returns Error Conditions dynamic error raised anempty sequence. Summary Returns exactly item.Otherwise, error. Signature fn:exactly-one($arg as item()*) as item() Properties function Rules error cases, function returns Error Conditions dynamic error raised anempty sequence sequence containing more item. Union, intersection anddifference Function Meaning op:union Constructs sequence containing node thevalues either duplicates sorting result documentorder. op:intersect Constructs sequence containing node thevalues duplicates sorting result documentorder. op:except Constructs sequence containing node thevalue not value eliminating duplicates sorting resultin document order. previous sections, illustrative examplesbelow, assume XQuery transformation operating PurchaseOrder document containing number line-item elements. Thevariables etc. are boundto individual line-item nodes sequence. use sequences ofthese nodes examples below. op:union Summary Constructs sequence containing node thevalues either duplicates sorting result documentorder. Operator Mapping semantics operator whenapplied sequences nodes. Signature op:union($arg1 as node()*,$arg2 as node()*) as node()* Rules function returns sequence containing node thatoccurs values either eliminating duplicate nodes. Nodes are returnedin document order. nodes are duplicatesif satisfy op:is-same-node($n1,$n2). Notes either operand empty sequence, result asequence containing nodes other operand documentorder after eliminating duplicates. Examples let let let expression op:union($seq1, returns($item1, expression op:union($seq2, returns($item1, expression op:union($seq2, returns($item1, Summary Constructs sequence containing node thevalues duplicates sorting result documentorder. Operator Mapping semantics operator appliedto sequences nodes. Signature op:intersect($arg1 as node()*,$arg2 as node()*) as node()* Rules function returns sequence containing node thatoccurs values eliminating duplicate nodes. Nodes are returnedin document order. nodes are duplicatesif satisfy op:is-same-node($n1,$n2). Notes either operand empty sequence, function returnsthe empty sequence. Examples let let let expression op:intersect($seq1, returns($item1, expression op:intersect($seq2, returns($item2). expression op:intersect($seq2, returns(). expression op:intersect($item1, returns(). Summary Constructs sequence containing node thevalue not value eliminating duplicates sorting resultin document order. Operator Mapping semantics operator applied totwo sequences nodes. Signature op:except($arg1 as node()*,$arg2 as node()*) as node()* Rules function returns sequence containing node thatoccurs value provided notoccur value Duplicate nodes areeliminated, nodes are returned document order. nodes are duplicatesif satisfy op:is-same-node($n1,$n2). Notes empty sequence, empty sequenceis returned. empty sequence, sequence isreturned containing nodes documentorder after eliminating duplicates. Examples let let let expression op:except($seq1, returns(). expression op:except($seq2, returns(). expression op:except($seq2, returns($item1). expression op:except($seq2, returns($item1, expression op:except($seq3, returns($item3). functions Aggregate functions take sequence as argument return asingle value computed values sequence. forfn:count, sequence mustconsist values single type subtypes, theymust be numeric. xs:untypedAtomic values are permittedin input sequence handled special conversion rules. Thetype items sequence also support certainoperations. Function Meaning fn:count Returns number items sequence. fn:avg Returns average values input sequence$arg, sum values divided thenumber values. fn:max Returns value equal highest value appearing inthe input sequence. fn:min Returns value equal lowest value appearing inthe input sequence. fn:sum Returns value obtained adding together values fn:count Summary Returns number items sequence. Signature fn:count($arg as item()*) as xs:integer Properties function Rules function returns number items value Notes Returns empty sequence. Examples let let let expression fn:count($seq1) returns2. expression fn:count($seq3) returns0. expression fn:count($seq2) returns3. expression fn:count($seq2[. returns0. fn:avg Summary Returns average values input sequence$arg, sum values divided thenumber values. Signature fn:avg($arg as xs:anyAtomicType*) as xs:anyAtomicType? Properties function Rules empty sequence, empty sequenceis returned. values typexs:untypedAtomic are cast toxs:double. Duration values either bexs:yearMonthDuration values bexs:dayTimeDuration values. numeric values, thenumeric promotion rules defined operators numeric values are used promoteall values single common type. operations,$arg contain items single type, mustbe numeric types, xs:yearMonthDurationor xs:dayTimeDuration subtypes. function returns average values assum($arg) div count($arg); implementation mayuse otherwise equivalent algorithm arithmeticoverflow. Error Conditions type error raised input sequence containsitems incompatible types, as described above. Examples let let let expression fn:avg($seq3) returns4.0. result typexs:decimal.). expression fn:avg(($d1, returnsxs:yearMonthDuration("P10Y5M"). fn:avg(($d1, type error expression fn:avg(()) returns(). expression fn:avg((xs:float('INF'),xs:float('-INF'))) returns xs:float('NaN'). expression fn:avg(($seq3, xs:float('NaN')))returns xs:float('NaN'). fn:max Summary Returns value equal highest value appearing inthe input sequence. Signatures fn:max($arg as xs:anyAtomicType*) as xs:anyAtomicType? fn:max($arg as xs:anyAtomicType*, as xs:string) as xs:anyAtomicType? Properties form function collations, implicit timezone. form function collations, static base uri, implicittimezone. Rules following rules are applied input sequence$arg: Values type xs:untypedAtomic are cast xs:double. Numeric xs:anyURI values are converted theleast common type reachable combination type promotion andsubtype substitution. Section B.1 TypePromotion XP30 Section B.2 OperatorMapping XP30. items resulting sequence be reordered anarbitrary order. resulting sequence referred below as theconverted sequence. function returns item convertedsequence rather input sequence. converted sequence empty, function returns theempty sequence. items converted sequence be derivedfrom single base type le operator isdefined. addition, values sequence have totalorder. date/time values do not have timezone, areconsidered have implicit timezone provided dynamiccontext purpose comparison. Duration values eitherall be xs:yearMonthDuration values bexs:dayTimeDuration values. converted sequence value NaN,the value NaN returned. items converted sequence are typexs:string types derived restriction fromxs:string, then determination item thesmallest value made according collation used. Ifthe type items converted sequence notxs:string specified,the collation ignored. collation used function determined according tothe rules Choosing acollation. function returns result expression: ge then else fn:max(fn:subsequence($c, evaluated as default collationif specified, as convertedsequence. Error Conditions type error raised input sequence containsitems incompatible types, as described above. Notes rules allow sequence be reordered, thereare items are highest", specific item whosevalue returned dependentÂ·. arise example differentstrings compare equal selected collation, twodifferent xs:dateTime values compare equal despitebeing different timezones. converted sequence exactly value then thatvalue returned. default type fn:max function isapplied xs:untypedAtomic values isxs:double. default type foroperators such as gt, sorting XQuery andXSLT, xs:string. Examples expression fn:max((3,4,5)) returns5. expression fn:max((xs:integer(5), xs:float(5.0),xs:double(0))) returns xs:double(5.0e0). fn:max((3,4,"Zero")) type error expression fn:max((fn:current-date(),xs:date("2100-01-01"))) returnsxs:date("2100-01-01"). currentdate 21st century.). expression fn:max(("a", returns"c". typical defaultcollation.). fn:min Summary Returns value equal lowest value appearing inthe input sequence. Signatures fn:min($arg as xs:anyAtomicType*) as xs:anyAtomicType? fn:min($arg as xs:anyAtomicType*, as xs:string) as xs:anyAtomicType? Properties form function collations, implicit timezone. form function collations, static base uri, implicittimezone. Rules following rules are applied input sequence: Values type xs:untypedAtomic are cast xs:double. Numeric xs:anyURI values are converted theleast common type reachable combination type promotion andsubtype substitution. Section B.1 TypePromotion XP30 Section B.2 OperatorMapping XP30. items resulting sequence be reordered anarbitrary order. resulting sequence referred below as theconverted sequence. function returns item convertedsequence rather input sequence. converted sequence empty, empty sequence isreturned. items converted sequence be derivedfrom single base type le operator isdefined. addition, values sequence have totalorder. date/time values do not have timezone, areconsidered have implicit timezone provided dynamiccontext purpose comparison. Duration values eitherall be xs:yearMonthDuration values bexs:dayTimeDuration values. converted sequence value NaN,the value NaN returned. items converted sequence are typexs:string types derived restriction fromxs:string, then determination item thesmallest value made according collation used. Ifthe type items converted sequence notxs:string specified,the collation ignored. collation used function determined according tothe rules Choosing acollation. function returns result expression: le then else fn:min(fn:subsequence($c, evaluated as default collationif specified, as convertedsequence. Error Conditions type error raised input sequence containsitems incompatible types, as described above. Notes rules allow sequence be reordered, thereare items are lowest", specific item whosevalue returned dependentÂ·. arise example differentstrings compare equal selected collation, twodifferent xs:dateTime values compare equal despitebeing different timezones. converted sequence exactly value then thatvalue returned. default type fn:min function isapplied xs:untypedAtomic values isxs:double. default type foroperators such as lt, sorting XQuery andXSLT, xs:string. Examples expression fn:min((3,4,5)) returns3. expression fn:min((xs:integer(5), xs:float(5),xs:double(10))) returns xs:double(5.0e0). fn:min((3,4,"Zero")) type error fn:min((xs:float(0.0E0), xs:float(-0.0E0))) canreturn either positive negative items areequal, so dependentÂ· returned. expression fn:min((fn:current-date(),xs:date("1900-01-01"))) returnsxs:date("1900-01-01"). currentdate set reasonable value.). expression fn:min(("a", returns"a". typical defaultcollation.). fn:sum Summary Returns value obtained adding together values Signatures fn:sum($arg as xs:anyAtomicType*) as xs:anyAtomicType fn:sum( as xs:anyAtomicType*, as xs:anyAtomicType?) as xs:anyAtomicType? Properties function Rules values type xs:untypedAtomic are cast xs:double. items inthe resulting sequence be reordered arbitrary order. Theresulting sequence referred below as convertedsequence. converted sequence empty, then single-argumentform function returns xs:integer value0; form returns value theargument converted sequence value NaN,NaN returned. items be numeric derived asingle base type. addition, type support addition.Duration values either bexs:yearMonthDuration values bexs:dayTimeDuration values. numeric values, thenumeric promotion rules defined operators numeric values are used promoteall values single common type. sum sequence ofintegers therefore be integer, sum numericsequence least xs:double bean xs:double. result function, using second signature, theresult expression: eq then eq then fn:sum(subsequence($c, converted sequence. result function, using first signature, theresult expression: fn:sum($arg, Error Conditions type error raised input sequence containsitems incompatible types, as described above. Notes second argument appropriate value be defined torepresent sum empty sequence. example, summing asequence durations be appropriate return azero-length duration appropriate type. argument isnecessary because system dynamic typing cannotdistinguish empty sequence integers", example, sequence durations". converted sequence exactly value then thatvalue returned. Examples let let let let expression fn:sum(($d1, returnsxs:yearMonthDuration("P20Y10M"). expression fn:sum($seq1[. ltxs:yearMonthDuration('P3M')], xs:yearMonthDuration('P0M'))returns xs:yearMonthDuration("P0M"). expression fn:sum($seq3) returns12. expression fn:sum(()) returns0. expression fn:sum((),()) returns(). expression fn:sum((1 lt fn:sum(($d1, 9E1)) type error[err:FORG0006]. expression fn:sum(($d1, Augenblick")returns xs:yearMonthDuration("P20Y10M"). isno requirement value be sametype as items even shouldbelong type supports addition.). Functions operators thatgenerate sequences Function Meaning op:to Returns sequence consecutive integers givenrange. op:to Summary Returns sequence consecutive integers given range. Operator Mapping semantics operator applied twointeger arguments. Signature op:to($firstval as xs:integer,$lastval as xs:integer) as xs:integer* Rules function returns sequence containing everyxs:integer value value value monotonic increasingorder. value first operand greater value ofthe second, function returns empty sequence. values operands are equal, functionreturns sequence containing single xs:integerequal value. Examples expression returns expression returns expression returns node identifiers fn:id Summary Returns sequence element nodes have anID value matching value more theIDREF values supplied Signatures fn:id($arg as xs:string*) as element()* fn:id($arg as xs:string*, as node()) as element()* Properties form function form function Rules function returns sequence, document order withduplicates eliminated, containing element node Ethat following conditions: E target document. target document isthe document containing documentcontaining context item second argumentis omitted. behavior function isomitted exactly same as context item had been passedas E ID value equal thecandidate IDREF values, element ID value equal Vif either following conditions are true: property Section Accessor DM30.) elementnode true, typed value element node equal toV rules eq operatorusing Unicode codepoint collation(http://www.w3.org/2005/xpath-functions/collation/codepoint). element attribute node Section Accessor DM30.) true andwhose typed value equal V rules theeq operator using Unicode code point collation(http://www.w3.org/2005/xpath-functions/collation/codepoint). xs:string parsed as ifit were type IDREFS, eachxs:string treated as awhitespace-separated sequence tokens, acting as anIDREF. tokens are then included list ofcandidate IDREFs. tokens not alexically valid IDREF not lexicallyan xs:NCName), ignored. Formally, candidateIDREF values are strings sequence given bythe expression: return fn:tokenize(fn:normalize-space($s), castable as xs:IDREF] several elements have same ID value, thenE first document order. Error Conditions dynamic error raised orthe context item second argument absent, node atree root not document node. following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes effect function anomalous respect elementnodes property. legacy reasons,this function returns element be more appropriate return itsparent, being element uniquely identified theID. new function element-with-id being introducedwith desired behavior. data model constructed Infoset, attributewill have property correspondingattribute Infoset had attribute type ID:typically means attribute was declared as anID DTD. data model constructed PSVI, element orattribute have property typedvalue single atomic value type xs:ID typederived restriction xs:ID. error raised respect candidate IDREFvalue not match ID element thedocument. candidate IDREF value matches theID value element, function returns theempty sequence. not necessary supplied argument have typexs:IDREF xs:IDREFS, shouldbe derived node element have more ID value. Thiscan occur synthetic data models data modelsconstructed PSVI element attributesare typed as xs:ID. source document well-formed not valid, ispossible more elements have same IDvalue. situation, function select first suchelement. also possible well-formed invalid document tohave element attribute value not conform lexical rules forthe xs:ID type. Such node never be selected bythis function. Examples let xml:id="ID21256"> <last>Brown</last> expression id('ID21256')/name() returnsemployee. xml:id attribute hasthe property, so employee element isselected.). expression id('E21256')/name() returnsempnr. empnr element isgiven type xs:ID as result schema validation,the element have property istherefore selected. Note difference behavior offn:element-with-id.). fn:element-with-id Summary Returns sequence element nodes have anID value matching value more theIDREF values supplied Signatures fn:element-with-id($arg as xs:string*) as element()* fn:element-with-id($arg as xs:string*, as node()) as element()* Properties form function form function Rules Note: effect function identical fn:idin respect elements have attribute theis-id property. However, differently inrespect element nodes property.Whereas fn:id, legacyreasons, returns element parent returns element identified ID,which parent element having function returns sequence, document order withduplicates eliminated, containing element node Ethat following conditions: E target document. target document isthe document containing documentcontaining context item second argumentis omitted. behavior function isomitted exactly same as context item had been passedas E ID value equal thecandidate IDREF values, element ID value equal Vif either following conditions are true: element child element node Section Accessor DM30.) true andwhose typed value equal V rules theeq operator using Unicode code point collation(http://www.w3.org/2005/xpath-functions/collation/codepoint). element attribute node Section Accessor DM30.) true andwhose typed value equal V rules theeq operator using Unicode code point collation(http://www.w3.org/2005/xpath-functions/collation/codepoint). xs:string parsed as ifit were type IDREFS, eachxs:string treated as awhitespace-separated sequence tokens, acting as anIDREF. tokens are then included list ofcandidate IDREFs. tokens not alexically valid IDREF not lexicallyan xs:NCName), ignored. Formally, candidateIDREF values are strings sequence given bythe expression: return fn:tokenize(fn:normalize-space($s), castable as xs:IDREF] several elements have same ID value, thenE first document order. Error Conditions dynamic error raised orthe context item second argument omitted, node atree root not document node. following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes function equivalent fn:id function dealing withID-valued element nodes. fn:id function elementcontaining identifier, function parent. data model constructed Infoset, attributewill have property correspondingattribute Infoset had attribute type ID:typically means attribute was declared as anID DTD. data model constructed PSVI, element orattribute have property typedvalue single atomic value type xs:ID typederived restriction xs:ID. error raised respect candidate IDREFvalue not match ID element thedocument. candidate IDREF value matches theID value element, function returns theempty sequence. not necessary supplied argument have typexs:IDREF xs:IDREFS, shouldbe derived node element have more ID value. Thiscan occur synthetic data models data modelsconstructed PSVI element attributesare typed as xs:ID. source document well-formed not valid, ispossible more elements have same IDvalue. situation, function select first suchelement. also possible well-formed invalid document tohave element attribute value not conform lexical rules forthe xs:ID type. Such node never be selected bythis function. Examples let xml:id="ID21256"> <last>Brown</last> expression id('ID21256')/name() returns"employee". xml:id attribute hasthe property, so employee element isselected.). expression id('E21256')/name() returns"employee". empnrelement given type xs:ID as result schemavalidation, element have propertyand therefore parent selected. Note difference fromthe behavior fn:id.). fn:idref Summary Returns sequence element attribute nodes anIDREF value matching value more theID values supplied Signatures fn:idref($arg as xs:string*) as node()* fn:idref($arg as xs:string*, as node()) as node()* Properties form function form function Rules function returns sequence, document order withduplicates eliminated, containing element attribute node$N following conditions: target document. target documentis document containing documentcontaining context item second argumentis omitted. behavior function isomitted exactly same as context item had been passedas IDREF value equal ofthe candidate ID values, node IDREF value equal toV following conditions are true: property Section Accessor DM30) true. sequence fn:tokenize(fn:normalize-space(fn:string($N)), string equal V rulesof eq operator using Unicode code pointcollation(http://www.w3.org/2005/xpath-functions/collation/codepoint). xs:string parsed as ifit were lexically type xs:ID. Thesexs:strings are then included list candidatexs:IDs. strings isnot lexically valid xs:ID notlexically xs:NCName), ignored. More formally,the candidate ID values are strings thesequence: castable as xs:NCName] Error Conditions dynamic error raised orthe context item second argument omitted, node atree root not document node. following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes element attribute typically theis-idrefs property being validated theschema type xs:IDREF xs:IDREFS, attributes only) being described as typeIDREF IDREFS DTD. error raised respect candidate IDvalue not match IDREF value anyelement attribute document. candidateID value matches IDREF value anyelement attribute, function returns empty sequence. possible more nodes have anIDREF value matches given candidateID value. situation, function returnall such nodes. However, matching node be returned atmost once, regardless many candidate ID values itmatches. possible well-formed invalid document have anode property true doesnot conform lexical rules xs:IDREFtype. effect above rules ill-formed candidateID values ill-formed IDREF values areignored. data model constructed PSVI, typed value ofa node property contain atleast atomic value type xs:IDREF typederived restriction xs:IDREF). alsocontain atomic values other types. atomic values aretreated as candidate ID values lexical formis valid as xs:NCName, are ignoredotherwise. Summary function returns string uniquely givennode. Signatures fn:generate-id() as xs:string fn:generate-id($arg as node()?) as xs:string Properties form function form function Rules argument omitted, defaults context item(.). behavior function argument isomitted exactly same as context item had been passedas argument. argument empty sequence, result thezero-length string. other cases, function returns string uniquelyidentifies given node. returned identifier consist ASCIIalphanumeric characters start analphabetic character. Thus, string syntactically XMLname. implementation free generate identifier anyconvenient way provided always sameidentifier same node different identifiers arealways generated different nodes. implementation underno obligation generate same identifiers time documentis transformed queried. Error Conditions following errors be raised isomitted: context item absentDM30,dynamic error context item not node, type error[err:XPTY0004]XP30. Notes There guarantee generated unique identifier bedistinct unique IDs specified source document. There inverse function; not directlypossible find node given generated ID. course, itis possible search given sequence nodes using expressionsuch as advisable, not required, implementations togenerate IDs are distinct even compared using acase-blind collation. Examples primary use case function generatehyperlinks. example, generating HTML, anchor agiven section be generated writing XSLT XQuery): name="{generate-id($sect)}"/> link section then be produced code suchas: Note anchors generated way not necessarily bethe same time document republished. Functionsgiving access external information fn:doc Summary document using URI supplied as anxs:string, returns corresponding documentnode. Signature fn:doc($uri as xs:string?) as document-node()? Properties function available documents, static base uri. Rules empty sequence, result anempty sequence. relative URI reference, resolvedrelative value Static Base URI property fromthe static context. resulting absolute URI promotedto xs:string. Available documents described Section DynamicContext XP30 mapping fromthis string document node, function returns documentnode. URI include fragment identifier. default, function calls function return samedocument node same URI Reference resolution anabsolute URI Reference) supplied calls. Thus, thefollowing expression not raise error) always betrue: doc("foo.xml") doc("foo.xml") However, performance reasons, implementations provide auser option evaluate function guarantee ofdeterminism. manner such option provided isimplementation-defined. user not selected such anoption, call function either return deterministicresult raise dynamic error Note: read source document, isgenerally appropriate resolve relative base URIproperty relevant node source document. beachieved calling fn:resolve-uri function, andpassing resulting absolute URI as argument thefn:doc function. calls function supply different absolute URIReferences as arguments, same document node be returned ifthe implementation determine arguments refer tothe same resource. defining semantics function terms astring-to-document-node mapping dynamic context, thespecification acknowledging results functionare outside purview language specification anddepend entirely run-time environment expressionis evaluated. run-time environment not only anunpredictable collection resources web"), configurablemachinery locating resources turning contents intodocument nodes XPath data model. set ofresources are reachable, mechanisms thoseresources are parsed validated, are dependentÂ·. possible processing model function as follows.The resource identified URI Reference retrieved. theresource be retrieved, dynamic error israised data resulting theretrieval action then parsed as XML document tree isconstructed accordance XPath Data Model top-level media type known content isparsed same way as media type were text/xml;otherwise, parsed same way as media type wereapplication/xml. contents be parsed successfully, adynamic error raised Otherwise, result thefunction document node root resulting tree.This tree then optionally validated schema. Various aspects processing are Implementations provide externalconfiguration options allow aspect processing becontrolled user. particular: set URI schemes implementation isimplementation-defined. Implementations allow mapping ofURIs resources be configured user, using mechanismssuch as catalogs user-written URI handlers. handling non-XML media types implementation-defined.Implementations allow instances data model beconstructed non-XML resources, user control. DTD validation schemavalidation applied source document. Implementations provide user-defined error handling optionsthat allow processing continue following error retrievinga resource, parsing validating content. errorshave been handled way, function return either anempty sequence, fallback document provided errorhandler. Implementations provide user options relax therequirement function return deterministic results. Error Conditions dynamic error be raised[err:FODC0005] not valid URI. dynamic error raised availabledocuments mapping absolutized URI. dynamic error raised resource beretrieved be parsed successfully as XML. dynamic error raised implementation notable guarantee result function bedeterministic, user not indicated unstableresult acceptable. Summary function returns true only function callfn:doc($uri) return adocument node. Signature fn:doc-available($uri as xs:string?) as xs:boolean Properties function available documents, static base uri. Rules empty sequence, function returnsfalse. call fn:doc($uri)would return document node, function returnstrue. dynamic error raised nota valid URI according rules applied implementation offn:doc. Otherwise, function returns false. function returns true, then callingfn:doc($uri) sameÂ·executionscopeÂ· return document node.However, nondeterministic processing been selected thefn:doc function, thisguarantee lost. Summary Returns sequence nodes representing collection ofdocuments indentified collection URI; default collectionif URI supplied. Signatures fn:collection() as node()* fn:collection($arg as xs:string?) as node()* Properties function available node collections, static base uri. Rules function xs:string as argument andreturns sequence nodes obtained interpreting$arg as xs:anyURI resolving itaccording mapping specified Available nodecollections described Section C.2 Dynamic Context ComponentsXP30. Available node collections mapping fromthis string sequence nodes, function returns thatsequence. Available node collections maps string toan empty sequence, then function returns empty sequence. not specified, function returns thesequence nodes default node collection dynamiccontext. Section C.2 Dynamic Context ComponentsXP30. value relativexs:anyURI, resolved value thebase-URI property static context. empty sequence, function behavesas had been called argument. above. default, function means repeated calls thefunction same argument return same result.However, performance reasons, implementations provide auser option evaluate function guarantee ofdeterminism. manner such option provided user not selected such option,a call function either return deterministic resultor raise dynamic error There requirement returned nodes be indocument order, there requirement result shouldcontain duplicates. Error Conditions dynamic error raised URI supplied andthe value default collection absentDM30. dynamic error raised available nodecollections mapping absolutized URI. dynamic error raised nota valid xs:anyURI. Notes function facility users work acollection documents be contained directory, orin rows relational table, otherimplementation-specific construct. implementation also useexternal variables identify external resources, butfn:collection functionality not provided byexternal variables. Specifying resources using URIs usefulbecause URIs are dynamic, be parameterized, do not rely onan external environment. fn:uri-collection Summary Returns sequence xs:anyURI values representingthe URIs resource collection. Signatures fn:uri-collection() as xs:anyURI* fn:uri-collection($arg as xs:string?) as xs:anyURI* Properties function available resource collections, static baseuri. Rules form function returns URIs theDefault resource collection described Section C.2 Dynamic Context ComponentsXP30. value relativexs:anyURI, resolved value thebase-URI property static context. empty sequence, function behavesas had been called argument. above. single-argument form function returns sequence ofURIs corresponding supplied URI Available resourcecollections described Section C.2 Dynamic Context ComponentsXP30. Error Conditions dynamic error raised URI supplied function called arguments, asingle argument empty sequence), valueof default resource collection absentDM30. dynamic error raised available resourcecollections mapping absolutized URI. dynamic error raised nota valid xs:anyURI. Notes There are several reasons be appropriate usethis function preference fn:collection function: resources be retrieved are not well-formed XMLdocuments: example, returned URIs be referenced usingthe fn:unparsed-textfunction rather fn:doc function. XSLT documents be processed streamingmode using xsl:stream instruction. recovery failures read, parse, validateindividual documents, calling fn:doc function scope oftry/catch. selection documents read based theirURI, example be filtered select URIsend use httpsscheme. application choose limit number URIsprocessed single run, example process only thefirst URIs collection; present URIs tothe user allow user select need befurther processed. URIs be modified before are dereferenced,for example adding removing query parameters, byredirecting request local cache mirror site. use cases, cost ofcalling fn:collectionmight be significant example, involving retrievingall documents collection over network parsingthem). not necessarily be true allimplementations. implementations ensure callingfn:uri-collection then applying fn:doc returned URIsdelivers same result as calling fn:collection sameargument; however, not guaranteed. There requirement URIs returned functionshould be distinct, assumptions be made about theorder URIs sequence, implementation definesotherwise. Summary fn:unparsed-text function externalresource example, file) returns stringrepresentation resource. Signatures fn:unparsed-text($href as xs:string?) as xs:string? fn:unparsed-text($href as xs:string?,$encoding as xs:string) as xs:string? Properties function static base uri. Rules argument be astring form URI reference, mustcontain fragment identifier, identifya resource string representation isavailable. URI relative URI reference, then itis resolved relative Static Base URI property thestatic context. mapping URIs string representation resourceis mapping defined availabletext resourcesXP30 component thedynamic context. value argument emptysequence, function returns empty sequence. argument, present, name ofan encoding. values attribute follow same rules asfor encoding attribute XML declaration. Theonly values required recognize areutf-8 utf-16. encoding external resource determined asfollows: external encoding information used available,otherwise media type resource text/xml orapplication/xml matches conventionstext/*+xml application/*+xml successors), then theencoding recognized as specified Language Edition)], otherwise value argument used ifpresent, otherwise processor use heuristics determine likely encoding,otherwise UTF-8 assumed. result function string containing thestring representation resource retrieved usingthe URI. Error Conditions dynamic error raised fragment identifier, be used retrievethe string representation resource. dynamic error raised value argument not valid encodingname, not support specified encoding, ifthe string representation retrieved resourcecontains octets be decoded Unicode usingthe specified encoding, resulting characters are notpermitted XML characters. dynamic error raised isabsent cannotinfer encoding using external information encoding isnot UTF-8. Notes appropriate use base URI other thedynamic base URI example, resolving arelative URI reference read source document) then isadvisable resolve relative URI reference using fn:resolve-uri function beforepassing fn:unparsed-text function. There essential relationship sets URIsaccepted functions fn:unparsed-text andfn:doc URI accepted onemay not be accepted other), URI acceptedby there essential relationship results(different resource representations are permitted thearchitecture web). There are constraints MIME type resource. fact resolution URIs defined mapping inthe dynamic context means effect, various aspects thebehavior function are Implementations provide externalconfiguration options allow aspect processing becontrolled user. particular: set URI schemes implementation isimplementation-defined. Implementations allow mapping ofURIs resources be configured user, using mechanismssuch as catalogs user-written URI handlers. handling media types implementation-defined. Implementations provide user-defined error handling optionsthat allow processing continue following error retrievinga resource, reading content. errors have beenhandled way, function return fallback documentprovided error handler. Implementations provide user options relax therequirement function return deterministic results. rules determining encoding are chosen forconsistency Inclusions Edition)]. Files XML media type aretreated specially because there are use cases functionwhere retrieved text be included as unparsed XML aCDATA section containing document, because processors arelikely be able reuse code encodingdetection XML external entities. text file characters such as typically be output string isserialized as XML HTML. characters actually representmarkup example, text file HTML), then XSLTstylesheet attempt write as markup output fileusing disable-output-escaping attribute thexsl:value-of instruction. Note, however, XSLTimplementations are not required support feature. Examples XSLT example attempts read file containing'boilerplate' HTML copy directly serialized outputfile: method="html"/><xsl:template match="/"> select="unparsed-text('header.html', disable-output-escaping="yes"/> select="unparsed-text('footer.html', disable-output-escaping="yes"/></xsl:template> fn:unparsed-text-lines Summary fn:unparsed-text-lines function anexternal resource example, file) returns contents asa sequence strings, line text thestring representation resource. Signatures fn:unparsed-text-lines($href as xs:string?) as xs:string* fn:unparsed-text-lines( as xs:string?, as xs:string) as xs:string* Properties function static base uri. Rules unparsed-text-lines function externalresource example, file) returns stringrepresentation as sequence strings, separated atnewline boundaries. result single-argument function same as theresult expression fn:tokenize(fn:unparsed-text($href),'\r\n|\r|\n')[not(position()=last() Theresult function same as result ofthe expression fn:tokenize(fn:unparsed-text($href,$encoding), result thus sequence strings containing text ofthe resource retrieved using URI, string representing oneline text. Lines are separated sequences x0A, x0D,or x0Dx0A. characters representing newline are not includedin returned strings. there are adjacent newlinesequences, string be returned represent theempty line; external resource ends thesequence x0A, x0D, x0Dx0A, result be as finalline ending were not present. Error Conditions Error conditions are same as fn:unparsed-textfunction. Notes notes fn:unparsed-text. Summary errors evaluating fn:unparsed-textfunction are non-recoverable, functions are provided toallow application determine call particulararguments succeed. Signatures fn:unparsed-text-available($href as xs:string?) as xs:boolean fn:unparsed-text-available( as xs:string?, as xs:string) as xs:boolean Properties function static base uri. Rules fn:unparsed-text-available function determineswhether call fn:unparsed-text function withidentical arguments return string. first argument empty sequence, function returnsfalse. other cases, function returns true call onfn:unparsed-text same arguments wouldsucceed, false call fn:unparsed-text withthe same arguments fail non-recoverable dynamicerror. functions fn:unparsed-text andfn:unparsed-text-available have same requirementfor as thefunctions fn:doc fn:doc-available. meansthat user explicitly stated requirement areduced level determinism, either functions calledtwice same arguments course transformationmust return same results time; moreover,the results call fn:unparsed-text-availablemust be consistent results asubsequent call unparsed-text samearguments. Notes unparsed-text-availablefunction actually attempt read resource identified bythe URI, check correctly encoded nocharacters are invalid XML. Implementations avoid thecost repeating checks example caching validatedcontents resource, anticipate subsequent call theunparsed-text orunparsed-text-lines function. Alternatively,implementations be able rewrite expression such asif then unparsed-text(A) else... generate single call internally. function unparsed-text-lines orfails exactly same circumstances asunparsed-text, unparsed-text-availablfunction equally be used test call onunparsed-text-lines succeed. fn:environment-variable Summary Returns value system environment variable, itexists. Signature fn:environment-variable($name as xs:string) as xs:string? Properties function environment variables. Rules set available environmentvariablesXP30 set pairs forming part dynamic context, nameis unique set pairs. name value are arbitrarystrings. argument matches name ofthese pairs, function returns corresponding value. there environment variable matching name, thefunction returns empty sequence. collation used matching names be same as collation used toensure names environment variables are unique. function means called several times sameÂ·execution scopeÂ·,with same arguments, return same result. Notes many platforms, term variable" naturalmeaning terms facilities provided operating system.This interpretation concept not exclude otherinterpretations, such as mapping set configurationparameters database system. Environment variable names are usually case sensitive. Names areusually form butthis platform. platforms, there sometimes be multiple environmentvariables same name; case, isimplementation-dependent as returned; example[POSIX.1-2008] EnvironmentVariables). Implementations use prefixes orother naming conventions disambiguate names. requirement ensure function deterministicmeans practice implementation make snapshot ofthe environment variables time execution, returnvalues obtained snapshot, rather using live valuesthat are subject change time. Operating system environment variables be associated aparticular process, queries stylesheets executeacross multiple processes multiple machines). suchcircumstances implementations choose toprovide access environment variables associated theprocess query stylesheet processing wasinitiated. Security advice: Queries untrusted sources not bepermitted unrestricted access environment variables. Forexample, name account query runningmay be useful information intruder. implementationmay therefore choose restrict access environment, mayprovide facility make fn:environment-variablealways return empty sequence. Summary Returns list environment variable names are suitablefor passing fn:environment-variable,as empty) sequence strings. Signature fn:available-environment-variables() as xs:string* Properties function environment variables. Rules function returns sequence strings, being names ofthe environment variables dynamic context order. function thatis, set available environment variables not vary duringevaluation. Notes function returns list strings, containing noduplicates. intended strings list be suitablefor passing fn:environment-variable. also note security definition thefn:environment-variablefunction. access environment variables been disabled,fn:available-environment-variables always returns theempty sequence. Parsing serializing Summary function as input XML document represented as astring, returns document node root XDM treerepresenting parsed document. Signature fn:parse-xml($arg as xs:string?) as document-node(element(*))? Properties function static base uri. Rules empty sequence, function returnsthe empty sequence. precise process used construct XDM instance particular, implementation-definedwhether DTD schema validation invoked, isimplementation-defined XML XML parser isused. Static Base URI property static context thefn:parse-xml function call used as baseURI used XML parser resolve relative entity referenceswithin document, as base URI document node thatis returned. document URI returned node function not function called twice withthe same arguments, same node returned bothoccasions. Error Conditions dynamic error raised content not well-formed namespace-well-formedXML document. dynamic error raised DTD-based validation iscarried out content not validagainst DTD. Notes XML document presented parser as string,rather as sequence octets, encoding specified withinthe XML declaration meaning. XML parser inputonly form sequence octets, then processor mustensure string encoded as octets way isconsistent rules used XML parser detect theencoding. primary use case function handle inputdocuments contain nested XML documents embedded CDATAsections. content CDATA section are exposed astext, receiving query stylesheet pass text thefn:parse-xml function create tree representationof nested document. Similarly, nested XML comments sometimes encountered,and lexical XML sometimes returned extension functions, forexample, functions access web services read fromdatabases. use case XSLT there need preprocess aninput document before parsing. example, application mightwish edit document remove DOCTYPE declaration. Thiscan be done reading raw text using fn:unparsed-text function,editing resulting string, then passing thefn:parse-xml function. Examples expressionfn:parse-xml("<alpha>abcd</alpha>")returns newly created document node, having alphaelement as only child; alpha element turnis parent text node string value fn:parse-xml-fragment Summary function as input XML external entity representedas string, returns document node root XDMtree representing parsed document fragment. Signature fn:parse-xml-fragment($arg as xs:string?) as document-node()? Properties function static base uri. Rules empty sequence, function returnsthe empty sequence. input be namespace-well-formed external generalparsed entity. More specifically, be string conforming tothe production rule extParsedEntxmlin Markup Language contain entity references other thanreferences predefined entities, satisfy therules XML] fornamespace-well-formed documents exception rulerequiring be well-formed document replaced rulerequiring be well-formed external general parsedentity. string parsed form sequence nodes becomechildren new document node, same way as contentof element converted sequence children theresulting element node. Schema validation not invoked, means thenodes returned document be untyped. precise process used construct XDM instance particular, implementation-definedwhether XML XML parser used. Static Base URI static context thefn:parse-xml-fragment function call used as thebase URI document node returned. document URI returned node function not function called twice withthe same arguments, same node returned bothoccasions. Error Conditions dynamic error raised content not well-formed external general parsedentity, entity references other references topredefined entities, document thiswell-formed parsed entity not be namespace-well-formed. Notes also notes fn:parse-xml function. main differences fn:parse-xml andfn:parse-xml-fragment are fn:parse-xml, children ofthe resulting document node contain exactly element nodeand text nodes, wheras fn:parse-xml-fragment,the resulting document node have number ofelement text nodes children. additional differenceis text declaration start externalentity slightly different syntax XMLdeclaration start well-formed document. Note whitespace outside text declarationis significant, including whitespace firstelement node. use case function handle XML fragments storedin databases, frequently allow top level elementnodes. use case parse contents aCDATA section embedded XMLdocument. Examples expressionfn:parse-xml-fragment("<alpha>abcd</alpha><beta>abcd</beta>")returns newly created document node, having elements namedalpha beta as children; ofthese elements turn parent text node. expression fn:parse-xml-fragment("He was<i>so</i> kind") returns newly createddocument node having children: text node string valueis was element node named ihaving child text node string value atext node string value kind". expression fn:parse-xml-fragment("") returns adocument node having children. expression fn:parse-xml-fragment(" returns adocument node children comprise single text node whosestring value single space. expression fn:parse-xml-fragment('<xmlversion="1.0" encoding="utf8"standalone="yes"?></a>") results adynamic error because keywordis not permitted text declaration startof external general parsed entity. not casethat input accepted fn:parse-xml function alsobe accepted fn:parse-xml-fragment.) Summary function serializes supplied inputsequence as described XQuery Serialization3.0], returning serialized representation thesequence as string. Signatures fn:serialize($arg as item()*) as xs:string fn:serialize( as item()*, as element(output:serialization-parameters)?) as xs:string Properties function Rules value acts as input sequence theserialization process, starts sequencenormalization. single-argument version function same effectas version called set toan empty sequence. turn same as effect ofpassing output:serialization-parameters elementwith child elements. argument used identify set ofserialization parameters. are supplied form anoutput:serialization-parameters element, having theformat described Section Setting Serialization Parameters Means DataModel Instance SER30. final stage serialization, encoding, skipped.If serializer not allow phase be skipped, then thesequence octets returned serializer decoded astring reversing character encoding performed finalstage. Error Conditions host language serialization optional feature andthe implementation not support serialization, then dynamicerror raised. serialization process raise error attribute namespace node. serialization error including detection aninvalid value serialization parameter, results thefn:serialize call failing dynamic error. Notes use case function there need toconstruct XML document containing nested XML documents aCDATA section occasions comment). fn:parse-xml furtherdetails. use case there need call anextension function lexical XML document asinput. There are also use cases application topost-process output query transformation, exampleby adding internal DTD subset, inserting proprietarymarkup delimiters such as %> used bysome templating languages. Examples Given output parameters: let xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization"> value="yes"/></output:serialization-parameters> let b='3'/> following call produce output shown: expression fn:serialize($data, returns'<a b="3"/>'. Context functions following functions are defined obtain information fromthe static dynamic context. Function Meaning fn:position Returns context position dynamic context. fn:last Returns context size dynamic context. fn:current-dateTime Returns current date time timezone). fn:current-date Returns current date. fn:current-time Returns current time. fn:implicit-timezone Returns value implicit timezone property thedynamic context. fn:default-collation Returns value default collation property thestatic context. fn:static-base-uri function returns value Static Base URI propertyfrom static context. Summary Returns context position dynamic context. Signature fn:position() as xs:integer Properties function Rules Returns context position dynamic context. C.2 Dynamic Context ComponentsXP30.) Error Conditions dynamic error raised ifthe context item absentDM30. fn:last Summary Returns context size dynamic context. Signature fn:last() as xs:integer Properties function Rules Returns context size dynamic context. Section C.2 Dynamic Context ComponentsXP30.) Error Conditions dynamic error raised ifthe context item absentDM30. Examples expression returns19. fn:current-dateTime Summary Returns current date time timezone). Signature fn:current-dateTime() as xs:dateTimeStamp Properties function implicit timezone. Rules Returns current dateTime timezone) dynamiccontext. Section C.2 Dynamic Context ComponentsXP30.) anxs:dateTime current time theevaluation query transformation whichfn:current-dateTime executed. function Theprecise instant query transformation represented bythe value fn:current-dateTime() dependentÂ·. implementation supports data types XSD then thereturned value be instance ofxs:dateTimeStamp. Otherwise, only guarantees arethat be instance xs:dateTime willhave timezone component. Notes returned xs:dateTime always have anassociated timezone, always be same as implicittimezone dynamic context Examples fn:current-dateTime() returns anxs:dateTimeStamp corresponding current date andtime. example, call fn:current-dateTime()might return 2004-05-12T18:17:15.125Z corresponding tothe current time May timezone Z. Summary Returns current date. Signature fn:current-date() as xs:date Properties function implicit timezone. Rules Returns xs:date(fn:current-dateTime()). anxs:date timezone) current timeduring evaluation query transformation whichfn:current-date executed. function Theprecise instant query transformation represented bythe value fn:current-date dependentÂ·. Notes returned date always have associated timezone, whichwill always be same as implicit timezone dynamiccontext Examples fn:current-date() returns xs:datecorresponding current date. example, call offn:current-date() Summary Returns current time. Signature fn:current-time() as xs:time Properties function implicit timezone. Rules Returns xs:time(fn:current-dateTime()). anxs:time timezone) current timeduring evaluation query transformation whichfn:current-time executed. function Theprecise instant query transformation represented bythe value fn:current-time() dependentÂ·. Notes returned time always have associated timezone, whichwill always be same as implicit timezone dynamiccontext Examples fn:current-time() returns xs:timecorresponding current time. example, call offn:current-time() return23:17:00.000-05:00. fn:implicit-timezone Summary Returns value implicit timezone property thedynamic context. Signature fn:implicit-timezone() as xs:dayTimeDuration Properties function implicit timezone. Rules Returns value implicit timezone property thedynamic context. Components dynamic context are discussed inSection C.2 Dynamic Context ComponentsXP30. fn:default-collation Summary Returns value default collation property thestatic context. Signature fn:default-collation() as xs:string Properties function collations. Rules Returns value default collation property thestatic context. Components static context are discussed inSectionC.1 Static Context ComponentsXP30. Notes default collation property never be absent. notexplicitly defined, system defined default be invoked. Ifthis not provided, Unicode codepoint collation(http://www.w3.org/2005/xpath-functions/collation/codepoint)is used. fn:static-base-uri Summary function returns value Static Base URI propertyfrom static context. Signature fn:static-base-uri() as xs:anyURI? Properties function static base uri. Rules function returns value Static Base URI propertyfrom static context. property absent, emptysequence returned. Components static context are discussed Section Context XP30 Notes XQuery XSLT give implementation freedom usedifferent base URIs static analysis phase thedynamic evaluation phase, compile-time run-timeresources respectively. situation, thefn:static-base-uri function return URIsuitable locating resources needed dynamicevaluation. Higher-order functions Functions functions following functions operate function items, referring function. Function Meaning fn:function-lookup Returns function having given name arity, there isone. fn:function-name Returns name function identified functionitem. fn:function-arity Returns arity function identified functionitem. fn:function-lookup Summary Returns function having given name arity, there isone. Signature fn:function-lookup($name as xs:QName,$arity as xs:integer) as function(*)? Properties function Rules call fn:function-lookup returns functionobtained looking up expanded QName supplied as$name arity supplied as inthe named functions component dynamic context dynamic context call tofn:function-lookup). Furthermore, function implementation-dependentimplementation note below), then implementation thefunction returned fn:function-lookup associatedwith static dynamic context call tofn:function-lookup. Note: above rule deliberately uses same wording as thecorresponding rule Named Function References. term implementation-dependent implementation"essentially means function implementation provided bythe language processor rather stylesheet queryauthor. rule therefore relevant built-in functions andvendor-supplied extension functions result thecontext function call. Otherwise known function be identified name andarity), empty sequence returned. arguments fn:function-lookup identify afunction present static context functioncall, function always return same function astatic reference function bind there nosuch function static context, then results depend onwhat present dynamic context, Notes function be useful there need make adynamic decision several statically-known functions tocall. thus be used as substitute polymorphism, thecase application been designed so several functionsimplement same interface. function also be useful cases query orstylesheet module written work alternative versions alibrary module. such cases author main module mightwish test imported library module doesnot contain particular function, call function thatmodule only available version was imported. Astatic call cause static error function notavailable, getting function usingfn:function-lookup caller take fallbackaction situation. function retrieved byfn:function-lookup dependencies static dynamic context ofits caller, context static dynamiccontext call fn:function-lookup functionitself. context thus effectively forms part closure ofthe returned function. practice only thetarget fn:function-lookup built-in function,because user-defined functions never depend static ordynamic context function call. rule recursively,since fn:function-lookup context-dependentbuilt-in function. specifications do not define circumstances whichthe dynamic context contain functions are not present inthe static context, do rule out. examplean API provide ability add functions tothe dynamic context. Equally, specifications do not defineany mechanism creating context-dependent functions other thanthe built-in context-depedendent functions, do theyrule out existence such functions. Examples expressionfn:function-lookup(xs:QName('fn:substring'), returns expression(fn:function-lookup(xs:QName('xs:dateTimeStamp'), returns anxs:dateTime value set specified date, time, andtimezone; implementation supports XSD then resultwill be instance derived typexs:dateTimeStamp. query written ensure thatno failure implementation not recognize thetype xs:dateTimeStamp. expression return then else returns theresult calling zip:binary-entry($href, ifthe function available, empty sequence otherwise. Summary Returns name function identified functionitem. Signature fn:function-name($func as function(*)) as xs:QName? Properties function Rules named function,fn:function-name($func) returns name thatfunction. Otherwise anonymous function),fn:function-name($func) returns empty sequence. prefix part returned QName dependentÂ·. Examples expression fn:function-name(fn:substring#2)returns fn:QName("http://www.w3.org/2005/xpath-functions","fn:substring"). namespace prefix thereturned QName not predictable.). expressionfn:function-name(function($node){count($node/*)})returns fn:function-arity Summary Returns arity function identified functionitem. Signature fn:function-arity($func as function(*)) as xs:integer Properties function Rules fn:function-arity function returns arity(number arguments) function identified Examples expression fn:function-arity(fn:substring#2)returns expressionfn:function-arity(function($node){name($node)})returns expression let fn:substring(?, fn:function-arity($initial) returns1. Basichigher-order functions following functions take function items as argument. Function Meaning fn:for-each Applies function item item thesequence turn, returning concatenation ofthe resulting sequences order. fn:filter Returns items sequence whichthe supplied function returns true. fn:fold-left Processes supplied sequence left applyingthe supplied function repeatedly item turn, togetherwith accumulated result value. fn:fold-right Processes supplied sequence left, applyingthe supplied function repeatedly item turn, togetherwith accumulated result value. fn:for-each-pair Applies function item successive pairs ofitems taken returning concatenation resultingsequences order. Summary Applies function item item thesequence turn, returning concatenation ofthe resulting sequences order. Signature fn:for-each($seq as item()*, as function(item()) asitem()*) as item()* Properties function Rules effect function equivalent followingimplementation XQuery: declare function fn:for-each($seq, then else fn:for-each(fn:tail($seq), equivalent XSLT: name="fn:for-each"> name="seq"/> name="f"/> test="fn:exists($seq)"> select="$f(fn:head($seq)), fn:for-each(fn:tail($seq), Notes function call fn:for-each($SEQ, isequivalent expression return$F($i), assuming ordering mode isordered. Examples expression fn:for-each(1 function($a) returns expression fn:for-each(("john", returns expression fn:for-each(("23", xs:int#1)returns Summary Returns items sequence whichthe supplied function returns true. Signature fn:filter($seq as item()*, as function(item()) asxs:boolean) as item()* Properties function Rules effect function equivalent followingimplementation XQuery: declare function fn:filter( as item()*, as function(item()) as xs:boolean) as item()* then else fn:head($seq)[$f(.) eq fn:true()], fn:filter(fn:tail($seq), equivalent XSLT: name="fn:filter" name="seq" name="f" as xs:boolean"/> test="fn:exists($seq)"> select="fn:head($seq)[$f(.) eq fn:true()], fn:filter(fn:tail($seq), Error Conditions consequence function signature functioncalling rules, type error supplied function$f returns anything other singlexs:boolean item; there conversion aneffective boolean value. Notes function call fn:filter($SEQ, verysimilar effect expression Thereare differences, however. case offn:filter, function required toreturn boolean; there special treatment numericpredicate values, conversion effective boolean value.Also, filter expression focuswithin predicate different outside; meansthat use context-sensitive function such as fn:lang#1 give different resultsin cases. Examples expression fn:filter(1 function($a) mod returns Summary Processes supplied sequence left applying thesupplied function repeatedly item turn, together anaccumulated result value. Signature fn:fold-left( as item()*, as item()*, as function(item()*,item()) as item()*) as item()* Properties function Rules effect function equivalent followingimplementation XQuery: declare function fn:fold-left( as item()* as item()*, as function(item()*, item()) as item()*) as item()* then else fn:fold-left(fn:tail($seq), fn:head($seq)), equivalent XSLT: name="fn:fold-left" name="seq" name="zero" name="f" item()) as item()*"/> test="fn:empty($seq)"> select="$zero"/> select="fn:fold-left(fn:tail($seq), fn:head($seq)), Error Conditions consequence function signature functioncalling rules, type error supplied function$f be applied arguments, firstargument either value result aprevious application second trailing subsequence Notes operation often referred functionalprogramming literature as sequence. Ittakes function pair values, itrepeatedly, accumulated result as first argument, andthe next item sequence as second argument. Theaccumulated result initially set value argument, conventionally value aszero case addition, case multiplication, ora string case string concatenation) thatcauses function return value other argumentunchanged. Examples expression fn:fold-left(1 function($a, returns returns thesum items sequence). expression fn:fold-left((2,3,5,7), function($a, returns returns theproduct items sequence). expression fn:fold-left((true(), false(), false()),false(), function($a, returnstrue(). returns true item thesequence effective boolean value true). expression fn:fold-left((true(), false(), false()),false(), function($a, returnsfalse(). returns true only item inthe sequence effective boolean value true). expression fn:fold-left(1 function($a, returns order items sequence). expression fn:fold-left(1 fn:concat(?, returns expression fn:fold-left(1 returns"$f($f($f($f($f($zero, Summary Processes supplied sequence left, applying thesupplied function repeatedly item turn, together anaccumulated result value. Signature fn:fold-right( as item()*, as item()*, as function(item()*,item()) as item()*) as item()* Properties function Rules effect function equivalent followingimplementation XQuery: declare function fn:fold-right( as item()*, as item()*, as function(item(), item()*) as item()*) as item()* then else fn:fold-right(fn:tail($seq), equivalent XSLT: name="fn:fold-right" name="seq" name="zero" name="f" item()*) as item()*"/> test="fn:empty($seq)"> select="$zero"/> select="$f(fn:head($seq), fn:fold-right(fn:tail($seq), Error Conditions consequence function signature functioncalling rules, type error supplied function$f be applied arguments, firstargument item sequence thesecond either value result aprevious application Notes operation often referred functionalprogramming literature as sequence. Ittakes function pair values, itrepeatedly, next item sequence as firstargument, result processing remainder thesequence as second argument. accumulated result isinitially set value argument, whichis conventionally value as case addition,one case multiplication, string thecase string concatenation) causes function returnthe value other argument unchanged. cases function associative operation onits arguments as addition multiplication),fn:fold-right same result as fn:fold-left. Examples expression fn:fold-right(1 function($a, returns returns thesum items sequence). expression fn:fold-right(1 fn:concat(?, returns expression fn:fold-right(1 returns Summary Applies function item successive pairs ofitems taken returning concatenation resultingsequences order. Signature fn:for-each-pair( as item()*, as item()*, as function(item(),item()) as item()*) as item()* Properties function Rules effect function equivalent followingimplementation XQuery: declare function fn:for-each-pair($seq1, fn:exists($seq2)) then fn:head($seq2)), fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), else equivalent XSLT: name="fn:for-each-pair"> name="seq1/> name="seq2/> name="f"/> test="fn:exists($seq1) fn:exists($seq2)"> select="$f(fn:head($seq1), fn:head($seq2))"/> select="fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), Examples expression fn:for-each-pair(("a", concat#2) returns expression fn:for-each-pair(1 returns Constructor functions Constructorfunctions XML Schema built-in atomic types built-in atomic type defined Schema Part Datatypes Second Edition],except xs:anyAtomicType xs:NOTATION,has associated constructor function. typexs:untypedAtomic, defined Section SchemaInformation DM30 derivedtypes xs:yearMonthDuration andxs:dayTimeDuration defined Section SchemaInformation DM30 also have associatedconstructor functions. Implementations mayadditionally provide constructor functions new data typexs:dateTimeStamp introduced Part constructor function not defined forxs:anyAtomicType as there are atomic values withtype annotation xs:anyAtomicType runtime, althoughthis be statically inferred type. constructor function isnot defined xs:NOTATION since defined as anabstract type Schema Part Second Edition]. static context Section Context XP30) typederived xs:NOTATION then constructor functionis defined Constructorfunctions user-defined types. form constructor function atomictype eg:TYPE eg:TYPE($arg as xs:anyAtomicType?) as eg:TYPE? empty sequence, empty sequenceis returned. example, signature constructor functioncorresponding xs:unsignedInt type defined Schema Part Datatypes SecondEdition] xs:unsignedInt($arg as xs:anyAtomicType?) as xs:unsignedInt? Calling constructor function xs:unsignedInt(12)returns xs:unsignedInt value call ofthat constructor function returns samexs:unsignedInt value isxs:unsignedInt("12"). same result also bereturned constructor function were be called nodethat had typed value equal xs:unsignedInt standard features described Section XP30 atomize thenode extract typed value then call constructor withthat value. value passed constructor not thelexical space datatype be constructed, beconverted value value space datatype therules specification, then dynamic error israised semantics constructor function are identical semantics cast as xs:TYPE? Casting. argument constructor function literal, theresult function be evaluatedstatically; error found such evaluation, bereported as static error. Special rules apply constructor functions forxs:QName types derived xs:QNameand xs:NOTATION. Constructor functions forxs:QName xs:NOTATION. following constructor functions built-inatomic types are supported: xs:string($arg as xs:anyAtomicType?) as xs:string? xs:boolean($arg as xs:anyAtomicType?) as xs:boolean? xs:decimal($arg as xs:anyAtomicType?) as xs:decimal? xs:float($arg as xs:anyAtomicType?) as xs:float? Implementations return negative forxs:float("-0.0E0"). because Schema Part Datatypes Second Edition]does not distinguish values positive negativezero. implementations return positive case. xs:double($arg as xs:anyAtomicType?) as xs:double? Implementations return negative forxs:double("-0.0E0"). because Schema Part Datatypes Second Edition]does not distinguish values positive negativezero. implementations return positive case. xs:duration($arg as xs:anyAtomicType?) as xs:duration? xs:dateTime($arg as xs:anyAtomicType?) as xs:dateTime? xs:time($arg as xs:anyAtomicType?) as xs:time? xs:date($arg as xs:anyAtomicType?) as xs:date? xs:gYearMonth($arg as xs:anyAtomicType?) as xs:gYearMonth? xs:gYear($arg as xs:anyAtomicType?) as xs:gYear? xs:gMonthDay($arg as xs:anyAtomicType?) as xs:gMonthDay? xs:gDay($arg as xs:anyAtomicType?) as xs:gDay? xs:gMonth($arg as xs:anyAtomicType?) as xs:gMonth? xs:hexBinary($arg as xs:anyAtomicType?) as xs:hexBinary? xs:base64Binary($arg as xs:anyAtomicType?) as xs:base64Binary? xs:anyURI($arg as xs:anyAtomicType?) as xs:anyURI? xs:QName($arg as xs:anyAtomicType?) as xs:QName? Constructorfunctions xs:QName xs:NOTATION specialrules. xs:normalizedString($arg as xs:anyAtomicType?) as xs:normalizedString? xs:token($arg as xs:anyAtomicType?) as xs:token? xs:language($arg as xs:anyAtomicType?) as xs:language? xs:NMTOKEN($arg as xs:anyAtomicType?) as xs:NMTOKEN? xs:Name($arg as xs:anyAtomicType?) as xs:Name? xs:NCName($arg as xs:anyAtomicType?) as xs:NCName? xs:ID($arg as xs:anyAtomicType?) as xs:ID? xs:IDREF($arg as xs:anyAtomicType?) as xs:IDREF? xs:ENTITY($arg as xs:anyAtomicType?) as xs:ENTITY? Casting toxs:ENTITY rules related constructing values typexs:ENTITY types derived xs:integer($arg as xs:anyAtomicType?) as xs:integer? xs:nonPositiveInteger($arg as xs:anyAtomicType?) as xs:nonPositiveInteger? xs:negativeInteger($arg as xs:anyAtomicType?) as xs:negativeInteger? xs:long($arg as xs:anyAtomicType?) as xs:long? xs:int($arg as xs:anyAtomicType?) as xs:int? xs:short($arg as xs:anyAtomicType?) as xs:short? xs:byte($arg as xs:anyAtomicType?) as xs:byte? xs:nonNegativeInteger($arg as xs:anyAtomicType?) as xs:nonNegativeInteger? xs:unsignedLong($arg as xs:anyAtomicType?) as xs:unsignedLong? xs:unsignedInt($arg as xs:anyAtomicType?) as xs:unsignedInt? xs:unsignedShort($arg as xs:anyAtomicType?) as xs:unsignedShort? xs:unsignedByte($arg as xs:anyAtomicType?) as xs:unsignedByte? xs:positiveInteger($arg as xs:anyAtomicType?) as xs:positiveInteger? xs:yearMonthDuration($arg as xs:anyAtomicType?) as xs:yearMonthDuration? xs:dayTimeDuration($arg as xs:anyAtomicType?) as xs:dayTimeDuration? xs:untypedAtomic($arg as xs:anyAtomicType?) as xs:untypedAtomic? xs:dateTimeStamp($arg as xs:anyAtomicType?) as xs:dateTimeStamp? Available only implementation supports XSD1.1. Constructor functions forxs:QName xs:NOTATION Special rules apply constructor functions typesxs:QName xs:NOTATION, tworeasons: Values belong directly typexs:NOTATION, only subtypes. lexical representation types uses namespaceprefixes, meaning context-dependent. constraints result following rules: There constructor function xs:NOTATION.Constructors are defined, however, xs:QName, fortypes derived constructed fromxs:QName, types derived orconstructed xs:NOTATION. converting xs:string, prefixwithin lexical xs:QName supplied as argumentis resolved namespace URI using statically knownnamespaces static context. lexicalxs:QName prefix, namespace URI theresulting expanded-QName default element/type namespace fromthe static context. Components static context are defined inSection2.1.1 Static Context XP30. Adynamic error raised prefix not bound thestatic context. described Section DM30, supplied prefixis retained as part expanded-QName value. constructor function namespace-sensitive type isused as literal function item partial functionapplication example, fn:QName#1 fn:QName(?)) namespace bindingsthat are relevant are static context literalfunction item partial function application. constructorfunction namespace-sensitive type obtained means thefn:function-lookupfunction, relevant namespace bindings are staticcontext call fn:function-lookup. Note: supplied argument xs:QNameconstructor function node, node atomized usualway, result xs:untypedAtomic thenconverted as string had been supplied. effect not bewhat desired. example, given attributexsi:type="my:type", expressionxs:QName(@xsi:type) fail grounds theprefix undeclared. because namespacebindings are taken static context queryor stylesheet), not source document containing the@xsi:type attribute. solution problem isto use function call resolve-QName(@xsi:type, Constructorfunctions XML Schema built-in list types built-in list types defined Schema Part Datatypes Second Edition],namely xs:NMTOKENS, xs:ENTITIES, andxs:IDREFS, associated constructor function. function signatures are as xs:NMTOKENS($arg as xs:anyAtomicType?) as xs:NMTOKEN* xs:ENTITIES($arg as xs:anyAtomicType?) as xs:ENTITY* xs:IDREFS($arg as xs:anyAtomicType?) as xs:IDREF* semantics are equivalent casting correspondingtypes xs:string. types have facet minLength meaning there always be least item thelist. return type, however, fact theargument function empty sequence, result anempty sequence. Note: case atomic types, possible use expressionsuch as xs:date(@date-of-birth) convert anattribute value instance xs:date, knowingthat work case attribute alreadyannotated as xs:date, also case isxs:untypedAtomic. approach not work withlist types, because not permitted use value typexs:NMTOKEN* as input constructor functionxs:NMTOKENS. Instead, necessary useconditional logic conversion only casewhere input untyped: instance attribute(*,xs:untypedAtomic)) then xs:NMTOKENS(@x) else data(@x) Constructorfunctions XML Schema built-in union types case implementation supports XSD there isa constructor function associated built-in union typexs:error. function signature as xs:error($arg as xs:anyAtomicType?) as xs:error? semantics are equivalent casting correspondingunion type Casting tounion types). Note: xs:error member types, thereforehas empty value space, casting always fail dynamicerror case supplied argument emptysequence, case result also empty sequence. Constructorfunctions user-defined types user-defined simple type static context(See Section Context XP30), there isa constructor function name same as name thetype effect create value type thesupplied argument. rules constructing user-defined typesare defined same way as rules constructing built-inderived types defined Constructorfunctions XML Schema built-in atomic types. Special rules apply constructor functions fornamespace-sensitive types, atomic types derived fromxs:QName xs:NOTATION, list types thathave namespace-sensitive item type, union types have anamespace-sensitive member type. Constructor functions forxs:QName xs:NOTATION. Consider situation static context anatomic type called hatSize defined aschema target namespace bound prefixeg. such case following constructor functionis available users: eg:hatSize($arg as xs:anyAtomicType?) as case atomic type return type ofthe function reflecting fact theresult be empty sequence input empty sequence.For union list type, return type function isspecified only as xs:anyAtomicType*. Implementationsperforming static type checking often be able compute amore specific result type. example, target type alist type item type atomic type theresult always be instance targettype pure union type U then result alwaysbe instance U?. general, however, applicationsneeding interoperable behavior implementations do strictstatic type checking need use treat asexpression assert specific type result. construct instance user-defined typethat not namespace, necessary use castexpression undeclare default function namespace. Forexample, user-defined type apple derivedfrom xs:integer not namespace, instanceof type be constructed as using cast expression(this default element/type namespace nonamespace): cast as apple following shows use constructor function: declare default function namespace apple(17) Casting Constructor functions cast expressions accept expressionand return value given type. convert sourcevalue, SV, source type, ST, targetvalue, TV, given target type, TT, withidentical semantics different syntax. name theconstructor function same as name built-in[XML Schema Part Datatypes SecondEdition] datatype datatype defined Section SchemaInformation DM30 XPath Data Model functions XML Schema built-in atomic types)or user-derived datatype Constructorfunctions user-defined types) target forthe conversion, semantics are exactly same as acast expression; example," xs:date("2003-01-01") exactly same as cast asxs:date? cast expression type name indicate targettype conversion. Section CastXP30. type name emptysequence expression be cast empty sequence, theempty sequence returned. type name not allow theempty sequence expression be cast empty sequence,a type error raised argument cast literal, result thefunction be evaluated statically; erroris encountered such evaluation, bereported as static error. general rules casting primitive types primitivetypes are defined Casting fromprimitive types primitive types, subsectionsdescribe rules specific target types. general rules forcasting xs:string follow Casting xs:string andxs:untypedAtomic. Casting non-primitive types, includingatomic types derived resctriction, union types, list types,is described involving non-primitive types. Casting derivedtypes defined Casting derivedtypes parent types, Casting branch thetype hierarchy Casting typehierarchy. casting xs:string orxs:untypedAtomic semantics Casting xs:string andxs:untypedAtomic apply, regardless target type. Casting fromprimitive types primitive types section casting primitive typesdefined Schema Part DatatypesSecond Edition] as as xs:untypedAtomic,xs:integer derived types ofxs:duration andxs:dayTimeDuration). types are notprimitive types are treated as primitive types thissection. type conversions are supported primitiveatomic types are indicated table below; other(non-primitive) types are defined terms primitives. table, there row primitive type acting asthe source conversion there column eachprimitive type acting as target conversion. Theintersections rows columns contain characters:"Y" conversion values type whichthe row type column issupported; there are supported values type row type towhich column conversion fromvalues type row type whichthe column succeed values value spaceand fail others. Schema Part Datatypes SecondEdition] xs:NOTATION as abstract type.Thus, casting xs:NOTATION other typeincluding xs:NOTATION not permitted astatic error casting subtype xs:NOTATION toanother subtype xs:NOTATION permitted. Casting not supported fromxs:anySimpleType. Thus, there row column forthis type table below. node not beenvalidated been validated as xs:anySimpleType,the typed value node atomic value typexs:untypedAtomic. There are atomic values thetype annotation xs:anySimpleType runtime.Casting xs:anySimpleType not permitted andraises static error: Similarly, casting not supported fromxs:anyAtomicType raise staticerror: are atomic values type annotationxs:anyAtomicType runtime, be astatically inferred type. casting attempted ST TT forwhich casting not supported, as defined table below, atype error raised following table, columns rows are identified byshort codes identify simple types as uA xs:untypedAtomic aURI xs:anyURI b64 xs:base64Binary bool xs:boolean xs:date gDay xs:gDay dbl xs:double dec xs:decimal dT xs:dateTime dTD xs:dayTimeDuration dur xs:duration flt xs:float hxB xs:hexBinary gMD xs:gMonthDay gMon xs:gMonth int xs:integer NOT xs:NOTATION QN xs:QName str xs:string tim xs:time gYM xs:gYearMonth yMD xs:yearMonthDuration gYr xs:gYear following table, notation thesource conversion indicated column below thenotation target indicated row theright notation. S\T uA str flt dbl dec int dur yMD dTD dT tim gYM gYr gMD gDay gMon bool b64 hxB aURI QN NOT uA Y Y M M M M M M M M M M M M M M M M M M M M M str Y Y M M M M M M M M M M M M M M M M M M M M M flt Y Y Y Y M M N N N N N N N N N N N Y N N N N N dbl Y Y Y Y M M N N N N N N N N N N N Y N N N N N dec Y Y Y Y Y Y N N N N N N N N N N N Y N N N N N int Y Y Y Y Y Y N N N N N N N N N N N Y N N N N N dur Y Y N N N N Y Y Y N N N N N N N N N N N N N N yMD Y Y N N N N Y Y Y N N N N N N N N N N N N N N dTD Y Y N N N N Y Y Y N N N N N N N N N N N N N N dT Y Y N N N N N N N Y Y Y Y Y Y Y Y N N N N N N tim Y Y N N N N N N N N Y N N N N N N N N N N N N Y Y N N N N N N N Y N Y Y Y Y Y Y N N N N N N gYM Y Y N N N N N N N N N N Y N N N N N N N N N N gYr Y Y N N N N N N N N N N N Y N N N N N N N N N gMD Y Y N N N N N N N N N N N N Y N N N N N N N N gDay Y Y N N N N N N N N N N N N N Y N N N N N N N gMon Y Y N N N N N N N N N N N N N N Y N N N N N N bool Y Y Y Y Y Y N N N N N N N N N N N Y N N N N N b64 Y Y N N N N N N N N N N N N N N N N Y Y N N N hxB Y Y N N N N N N N N N N N N N N N N Y Y N N N aURI Y Y N N N N N N N N N N N N N N N N N N Y N N QN Y Y N N N N N N N N N N N N N N N N N N N Y M NOT Y Y N N N N N N N N N N N N N N N N N N N Y M xs:string xs:untypedAtomic Casting permitted primitive type primitivetypes xs:string xs:untypedAtomic. value simple type cast asxs:string, derivation thexs:string value TV STand SV, as ST xs:string type derived fromxs:string, TV SV. ST xs:anyURI, type conversion isperformed escaping characters. ST xs:QName orxs:NOTATION: qualified name prefix, then TV theconcatenation prefix SV, single colon andthe local name SV. otherwise TV local-name. ST numeric type, following rules apply: ST xs:integer, TV thecanonical lexical representation SV as defined Schema Part Datatypes SecondEdition]. There decimal point. ST xs:decimal, then: SV value space xs:integer,that there are significant digits after decimalpoint, then value converted xs:decimalto xs:integer resultingxs:integer converted xs:stringusing rule above. Otherwise, canonical lexical representation SVis returned, as defined Schema Part2: Datatypes Second Edition]. ST xs:float orxs:double, then: TV be xs:string lexicalspace xs:double xs:float whenconverted xs:double xs:floatunder rules Castingfrom xs:string xs:untypedAtomic value thatis equal SV, SV isNaN. addition, TV satisfy theconstraints following sub-bullets. SV absolute value greater orequal millionth) less then value converted xs:decimaland resulting xs:decimal converted anxs:string according rules above, as thoughusing implementation xs:decimal nolimits totalDigits orfractionDigits facets. SV value positive negative respectively. SV positive negative infinity, TV isthe string other cases, result mantissa, thelexical form xs:decimal, followed letter"E", followed exponent lexical form anxs:integer. Leading zeroes signs areprohibited exponent. mantissa, there be adecimal point, there be exactly digit before thedecimal point, be non-zero. sign prohibited.There be least digit after decimal point. Apartfrom mandatory digit, trailing digits are prohibited. Note: above rules allow more representation samevalue. example, xs:float value exactdecimal representation be represented anyof strings alia). implementation-dependent theserepresentations chosen. ST xs:dateTime, xs:dateor xs:time, TV local value. Thecomponents TV are individually cast toxs:string using functions described resultsare concatenated together. year component castto xs:string usingeg:convertYearToString. month,day, hour minutecomponents are cast xs:string usingeg:convertTo2CharString. secondcomponent cast xs:string usingeg:convertSecondsToString. timezone component, ifpresent, cast xs:string usingeg:convertTZtoString. Note hours component resulting string neverbe Midnight always represented ST xs:yearMonthDuration orxs:dayTimeDuration, TV canonicalrepresentation SV as defined xs:yearMonthDuration xs:dayTimeDuration,respectively. ST xs:duration then let SYMbe SV cast asxs:yearMonthDuration, let SDT beSV cast as xs:dayTimeDuration;Now, let next intermediate value, TYM, beSYM cast asTT let TDT beSDT cast asTT TYM thenTV TDT. Otherwise, TYM andTDT are merged according following rules: TDT then TV TYM. Otherwise, TV concatenation thecharacters TYM characters first"P" optional negative sign TDT. other cases, TV Schema Part Datatypes Second Edition]canonical representation SV. datatypes do nothave canonical lexical representation defined dependentÂ· canonical representation be used. cast as xs:untypedAtomic value cast asxs:string, as described above, type annotationchanged xs:untypedAtomic. Note: string representations numeric values are backwardscompatible XPath special values positiveand negative infinity, negative values outside range1.0e-6 Casting numeric types xs:float value simple type cast asxs:float, xs:float TV isderived ST SV as ST xs:float, then TV isSV conversion complete. ST xs:double, then TV isobtained as SV xs:double valueINF, NaN, positivezero, negative then TV thexs:float value INF, positive negative respectively. otherwise, SV be expressed form m mantissa m exponente are signed xs:integers valuerange defined Schema Part Second Edition], following rules apply: m mantissa SV) outside thepermitted range mantissa xs:float value(-2^24-1 then divided N lowest positivexs:integer result divisionwithin permitted range, exponent e isincreased N. integer division effect,the binary value mantissa truncated right). LetM be mantissa E exponentafter adjustment. E maximum exponentvalue value space xs:float) then TVis xs:float value INF depending sign M. E less minimumexponent value value space xs:float) thenTV xs:float value positive negativezero depending sign M otherwise, TV xs:float valueM ST xs:decimal, orxs:integer, then TV xs:float(SV cast as xs:string) conversion iscomplete. ST xs:boolean, SV isconverted SV trueand SV false andthe conversion complete. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. Note: XSD value lexical space,as alternative INF. XSD also negativezero value space. Note: Implementations return negative forxs:float("-0.0E0"). because Schema Part Datatypes Second Edition]does not distinguish values positive negativezero. implementations return positive case. xs:double value simple type cast asxs:double, xs:double valueTV derived ST SV asfollows: ST xs:double, then TV isSV conversion complete. ST xs:float type derived fromxs:float, then TV obtained as SV xs:float valueINF, NaN, positivezero, negative then TV thexs:double value INF, positive negative respectively. otherwise, SV be expressed form m mantissa m exponente are signed xs:integer values whosevalue range defined Schema Part2: Datatypes Second Edition], TV thexs:double value m ST xs:decimal orxs:integer, then TV isxs:double( SV cast as xs:string)and conversion complete. ST xs:boolean, SV isconverted SV trueand SV false andthe conversion complete. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. Note: XSD value lexical space,as alternative INF. XSD also negativezero value space. Note: Implementations return negative forxs:double("-0.0E0"). because Schema Part Datatypes Second Edition]does not distinguish values positive negativezero. implementations return positive case. Casting xs:decimal value simple type cast asxs:decimal, xs:decimal valueTV derived ST SV asfollows: ST xs:decimal,xs:integer type derived thenTV SV, converted xs:decimalvalue need be, conversion complete. ST xs:float orxs:double, then TV thexs:decimal value, set ofxs:decimal values implementation capableof representing, numerically closest SV. twovalues are equally close, then closest ischosen. SV too large be accommodated as anxs:decimal, SchemaPart Datatypes Second Edition] limits numeric values) adynamic error raised SV thespecial xs:float xs:double valuesNaN, INF, adynamic error raised ST xs:boolean, SV isconverted SV ortrue SV is0 false conversion iscomplete. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. Casting xs:integer value simple type cast asxs:integer, xs:integer valueTV derived ST SV asfollows: ST xs:integer, type derivedfrom xs:integer, then TV SV,converted xs:integer value need be, theconversion complete. ST xs:decimal, xs:floator xs:double, then TV SV thefractional part discarded value converted toxs:integer. Thus, casting returns3 returns -17.Casting returns IfSV too large be accommodated as integer, Schema Part Datatypes SecondEdition] limits numeric values) adynamic error raised SV thespecial xs:float xs:double valuesNaN, INF, adynamic error raised ST xs:boolean, SV isconverted SV ortrue SV is0 false conversion iscomplete. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. Casting duration types value type xs:untypedAtomic,xs:string, type derived xs:string,xs:yearMonthDuration orxs:dayTimeDuration cast asxs:duration, xs:yearMonthDuration orxs:dayTimeDuration, TV derived fromST SV as ST same as TT, then TV isSV. ST xs:duration, type derivedfrom xs:duration, notxs:dayTimeDuration type derived fromxs:dayTimeDuration, TT isxs:yearMonthDuration, then TV derived fromSV removing day, hour, minute second componentsfrom SV. ST xs:duration, type derivedfrom duration, notxs:yearMonthDuration type derived fromxs:yearMonthDuration, TT isxs:dayTimeDuration, then TV derived fromSV removing year month components fromSV. ST xs:yearMonthDuration orxs:dayTimeDuration, TT isxs:duration, then TV derived fromSV as defined Casting derivedtypes parent types. ST xs:yearMonthDuration andTT xs:dayTimeDuration, cast ispermitted returns xs:dayTimeDuration value0.0 seconds. ST xs:dayTimeDuration andTT xs:yearMonthDuration, cast ispermitted returns xs:yearMonthDuration withvalue months. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. Note casting xs:duration toxs:yearMonthDuration orxs:dayTimeDuration information. avoid cast xs:duration value anxs:yearMonthDuration anxs:dayTimeDuration work values. Casting date timetypes several situations, casting date time types requiresthe extraction component SV resultof fn:current-dateTime andconverting xs:string. conversions mustfollow certain rules. example, converting anxs:integer year value converting anxs:string more characters, preceded aminus sign value negative. document functions perform theseconversions. functions are illustrative purposes only andmake recommendations as style efficiency. References tothese functions following text are not normative. arguments functions come functions defined inthis document. Thus, functions below assume arecorrect do range checking declare function eg:convertYearToString($year as xs:integer) as xs:string{ let then else let fn:abs($year) cast as xs:string let fn:string-length($yearString) return then fn:concat($plusMinus, else then fn:concat($plusMinus, else then fn:concat($plusMinus, else fn:concat($plusMinus, declare function eg:convertTo2CharString($value as xs:integer) as xs:string{ let cast as xs:string return then fn:concat("0", else declare function eg:convertSecondsToString($seconds as xs:decimal) as xs:string{ let cast as xs:string let fn:string-length(($seconds cast as xs:integer) cast as xs:string) return then fn:concat("0", else declare function eg:convertTZtoString($tz as xs:dayTimeDuration?) as xs:string{ then else eq xs:dayTimeDuration('PT0S')) then else let fn:hours-from-duration($tz) let fn:minutes-from-duration($tz) let then else let eg:convertTo2CharString(fn:abs($tzh)) let eg:convertTo2CharString(fn:abs($tzm)) return fn:concat($plusMinus, Conversion primitive types date time types followsthe rules below. value primitive type cast asxs:dateTime, xs:dateTime valueTV derived ST SV asfollows: ST xs:dateTime, then TV isSV. ST xs:date, then let SYR beeg:convertYearToString( fn:year-from-date( SV)), let SMO be eg:convertTo2CharString(fn:month-from-date( SV letSDA be eg:convertTo2CharString(fn:day-from-date( SV letSTZ be eg:convertTZtoString(fn:timezone-from-date( SV xs:dateTime( fn:concat( SYR, SMO SDA, STZ ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:time, xs:time value TV isderived ST SV as ST xs:time, then TV isSV. ST xs:dateTime, then TV isxs:time( fn:concat( eg:convertTo2CharString(fn:hours-from-dateTime( SV fn:minutes-from-dateTime(SV eg:convertSecondsToString(fn:seconds-from-dateTime( SV fn:timezone-from-dateTime( SV)) ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:date, xs:date value TV isderived ST SV as ST xs:date, then TV isSV. ST xs:dateTime, then letSYR be eg:convertYearToString(fn:year-from-dateTime( SV letSMO be eg:convertTo2CharString(fn:month-from-dateTime( SV letSDA be eg:convertTo2CharString(fn:day-from-dateTime( SV letSTZ beeg:convertTZtoString(fn:timezone-from-dateTime(SV TV xs:date(fn:concat( SYR SMO, SDA, STZ ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:gYearMonth, xs:gYearMonth valueTV derived ST SV asfollows: ST xs:gYearMonth, then TVis SV. ST xs:dateTime, then letSYR be eg:convertYearToString(fn:year-from-dateTime( SV letSMO be eg:convertTo2CharString(fn:month-from-dateTime( SV letSTZ be eg:convertTZtoString(fn:timezone-from-dateTime( SV xs:gYearMonth( fn:concat( SYR, SMO, STZ ST xs:date, then let SYR beeg:convertYearToString( fn:year-from-date( SV)), let SMO be eg:convertTo2CharString(fn:month-from-date( SV letSTZ be eg:convertTZtoString(fn:timezone-from-date( SV xs:gYearMonth( fn:concat( SYR, SMO, STZ ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:gYear, xs:gYear value TVis derived ST SV as ST xs:gYear, then TV isSV. ST xs:dateTime, let SYR beeg:convertYearToString( fn:year-from-dateTime(SV let STZ beeg:convertTZtoString( fn:timezone-from-dateTime(SV TV isxs:gYear(fn:concat( SYR, STZ)). ST xs:date, let SYR beeg:convertYearToString( fn:year-from-date( SV)); let STZ beeg:convertTZtoString( fn:timezone-from-date(SV TV isxs:gYear(fn:concat( SYR, STZ)). ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:gMonthDay, xs:gMonthDay valueTV derived ST SV asfollows: ST xs:gMonthDay, then TV isSV. ST xs:dateTime, then letSMO be eg:convertTo2CharString(fn:month-from-dateTime( SV letSDA be eg:convertTo2CharString(fn:day-from-dateTime( SV letSTZ be eg:convertTZtoString(fn:timezone-from-dateTime( SV xs:gYearMonth( fn:concat('--', SMO SDA,STZ ST xs:date, then let SMO beeg:convertTo2CharString( fn:month-from-date(SV let SDA beeg:convertTo2CharString( fn:day-from-date( SV)) let STZ be eg:convertTZtoString(fn:timezone-from-date( SV xs:gYearMonth( fn:concat('--', SMO SDA,STZ ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:gDay, xs:gDay value TV isderived ST SV as ST xs:gDay, then TV isSV. ST xs:dateTime, then letSDA be eg:convertTo2CharString(fn:day-from-dateTime( SV letSTZ be eg:convertTZtoString(fn:timezone-from-dateTime( SV xs:gDay( fn:concat( STZ ST xs:date, then let SDA beeg:convertTo2CharString( fn:day-from-date( SV)) let STZ be eg:convertTZtoString(fn:timezone-from-date( SV xs:gDay( fn:concat( STZ ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. value primitive type cast asxs:gMonth, xs:gMonth valueTV derived ST SV asfollows: ST xs:gMonth, then TV isSV. ST xs:dateTime, then letSMO be eg:convertTo2CharString(fn:month-from-dateTime( SV letSTZ be eg:convertTZtoString(fn:timezone-from-dateTime( SV xs:gMonth( fn:concat( STZ ST xs:date, then let SMO beeg:convertTo2CharString( fn:month-from-date(SV let STZ beeg:convertTZtoString( fn:timezone-from-date(SV TV xs:gMonth(fn:concat( SMO, STZ)). ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. xs:boolean value primitive type cast asxs:boolean, xs:boolean valueTV derived ST SV asfollows: ST xs:boolean, then TV isSV. ST xs:float, xs:double,xs:decimal xs:integer SVis -0,0.0, NaN, thenTV false. ST xs:float, xs:double,xs:decimal xs:integer SVis not above values, then TV istrue. ST xs:untypedAtomic orxs:string, xs:string xs:untypedAtomic. xs:base64Binary xs:hexBinary Values type xs:base64Binary be cast asxs:hexBinary vice versa, since types havethe same value space. Casting xs:base64Binary andxs:hexBinary also supported same type andfrom xs:untypedAtomic, xs:string andsubtypes xs:string using Schema Part Datatypes Second Edition]semantics. xs:anyURI Casting xs:anyURI supported only thesame type, xs:untypedAtomic orxs:string. value primitive type cast asxs:anyURI, xs:anyURI valueTV derived ST SV asfollows: ST xs:untypedAtomic orxs:string xs:string xs:untypedAtomic. Casting xs:QName andxs:NOTATION Casting xs:string orxs:untypedAtomic xs:QName orxs:NOTATION described Casting xs:string andxs:untypedAtomic. also possible cast xs:NOTATION toxs:QName, xs:QName typederived restriction xs:NOTATION. toxs:NOTATION not allowed, becausexs:NOTATION abstract type.) resultingxs:QName xs:NOTATION sameprefix, local name, namespace URI parts as suppliedvalue. Note: Constructorfunctions xs:QName xs:NOTATION discussion ofhow combination atomization casting not producethe desired effect. xs:ENTITY Schema Part Datatypes SecondEdition] value space ENTITY set allstrings match NCName production have been declaredas unparsed entity document type definition." However,[XSL Transformations Version XML Query Language] do notcheck constructed values type xs:ENTITY matchdeclared unparsed entities. Thus, rule relaxed thisspecification casting xs:ENTITY typesderived check made values correspond todeclared unparsed entities. Casting xs:string andxs:untypedAtomic section supplied value SV aninstance xs:string orxs:untypedAtomic, including types derived theseby restriction. value xs:untypedAtomic, itis treated exactly same way as string containing samesequence characters. supplied string mapped typed value targettype as defined Schema Part Second Edition]. Whitespace normalization appliedas indicated whiteSpace facet datatype.The resulting whitespace-normalized string be valid lexicalform datatype. semantics casting follow rules ofXML Schema validation. example, cast asxs:unsignedInt returns xs:unsignedInt typedvalue also be writtenxs:unsignedInt("13"). target type be simple type other abstracttype. Specifically, be type variety atomic,union, list. case effect casting targettype same as constructing element supplied valueas content, validating element using target type as thegoverning type, atomizing element obtain typedvalue. target type derived type restricted apattern facet, lexical form first checked thepattern before further casting attempted Casting derivedtypes). lexical form not conform thepattern, dynamic error raised. example, consider user-defined typemy:boolean derived restriction fromxs:boolean pattern facetvalue="0|1". expression cast asmy:boolean fail dynamic error[err:FORG0001]. Facets other pattern are checkedafter conversion. example there auser-defined datatype called defined as arestriction xs:integer facet<maxInclusive value="84"/>, then expression"100" cast as fail adynamic error Casting types xs:NOTATION,xs:anySimpleType, xs:anyAtomicType isnot permitted because types are abstract have noimmediate instances). Special rules apply casting namespace-sensitive types.The types xs:QName xs:NOTATION arenamespace-sensitive. type derived restriction anamespace-sensitive type namespace-sensitive, as anyunion type having namespace-sensitive type members, andany list type having namespace-sensitive type as item type.For details, functions xs:QName xs:NOTATION. Note: version specification casting betweenxs:QName xs:NOTATION eitherdirection; was not permitted previous version also rule only string literal(rather dynamic string) be cast anxs:QName casting numeric type: value too large too small be accuratelyrepresented implementation, handled as overflow orunderflow as defined Arithmeticoperators numeric values. target type xs:float orxs:double, string -0 equivalentssuch as -0.0 -000)should be converted value negative zero.However, implementation reliant implementation ofXML Schema negative not part valuespace types, lexical forms beconverted positive casting xs:decimal type derived fromxs:decimal, value not too large too smallbut nevertheless be represented accurately numberof decimal digits available implementation, theimplementation round nearest representable value mayraise dynamic error choice rounding algorithmand choice rounding error behavior casting xs:date, xs:dateTime,xs:gYear, xs:gYearMonth typesderived value too large too small berepresented implementation, dynamic error[err:FODT0001] israised. casting duration value, value too large toosmall be represented implementation, adynamic error raised. xs:anyURI, extent animplementation lexical form xs:anyURIis dependentÂ·. cast other reason, dynamicerror raised. Casting involvingnon-primitive types Casting xs:string andxs:untypedAtomic other type ornon-primitive) been described Casting xs:string andxs:untypedAtomic. section other tonon-primitive types operate, including casting types derived byrestriction, union types, list types. Casting derived types Casting value derived type be separated fourcases. Note xs:untypedAtomic,xs:integer derived types ofxs:duration:xs:yearMonthDuration andxs:dayTimeDuration are treated as primitive types. SV instance type derived byrestriction TT. described section Casting derivedtypes parent types. SV instance type derived same primitive type as TT. described Casting branchof type hierarchy. derived type derived, directly indirectly, adifferent primitive type primitive type ST.This described type hierarchy. SV immediate instance TT, thecast always returning SV unchanged. Casting derivedtypes parent types always possible cast atomic value atype T relation instance T istrue, provided T not abstract type. example, possible cast anxs:unsignedShort xs:unsignedInt, toan xs:integer, xs:decimal, aunion type member types are xs:integer andxs:double. value space original type subset thevalue space target type, such cast alwayssuccessful. expression instance T be true,T be either atomic type, union type thathas constraining facets. be list type, uniontype derived restriction union type, uniontype list type member types. result have same value as original, willhave new type annotation: T atomic type, then type annotation ofthe result T. T union type, then type result isan atomic type M such M theatomic types transitive membership union typeT instance M true; there ismore type M conditions(which happen, example, T union oftwo overlapping types such as xs:int andxs:positiveInteger) then first used, takingthe member types order appear thedefinition union type. Casting branch thetype hierarchy possible cast SV TT thetype SV TT type are derivedby restriction indirectly) same primitivetype, provided supplied value constraintsimplied facets target type. casewhere target type derived type suppliedvalue, as as case type supplied value isderived target type. example, instance ofxs:byte be cast as xs:unsignedShort,provided value not negative. value not conform facets defined thetarget type, then dynamic error raised Schema Part Datatypes Second Edition].In case pattern facet lexicalspace rather value space), pattern tested againstthe canonical lexical representation value, as defined forthe source type result casting value anxs:string, case types have canonicallexical representation defined Note cause fail pattern excludesthe canonical lexical representation source type. Forexample, type defined as arestriction xs:decimal pattern requirestwo digits after decimal point, casting anxs:integer alwaysfail, because canonical representation anxs:integer not conform pattern. cases, casting parent type derived typerequires special rules. Casting duration typesfor rules regarding casting xs:yearMonthDurationand xs:dayTimeDuration. Casting xs:ENTITY, below,for casting xs:ENTITY types derived fromit. Casting typehierarchy ST TT are derived, directlyor indirectly, different primitive types, calledcasting type hierarchy. Casting typehierarchy logically equivalent separate steps performedin order. Errors occur either latter steps. Cast SV, up hierarchy, primitive type ofthe source, as described Casting derivedtypes parent types. SV instance xs:string orxs:untypedAtomic, check value patternfacet TT, raise dynamic error[err:FORG0001] ifthe check Cast value primitive type TT, asdescribed primitive types primitive types. TT derived xs:NOTATION, assumefor purposes rule casting toxs:NOTATION Cast value down TT, as described Casting branch thetype hierarchy union types target type cast expression constructorfunction) type variety union, supplied value beone following: value type xs:string orxs:untypedAtomic. case general rulesfor casting strings, already been described Casting xs:string andxs:untypedAtomic. union type pattern facet, pattern testedagainst supplied value after whitespace normalization, usingthe whiteSpace normalization rules memberdatatype validation value instance atomic types thetransitive membership union type, union typeitself. case already been described Casting derivedtypes parent types situation only value instance theunion type, means never apply union isderived facet-based restriction union type. value castable more atomic types inthe transitive membership union type sense thecastable as operator returns true). case supplied value cast atomic type inthe transitive membership union type turn orderin member types appear declaration) ofthese successful; none successful, dynamicerror union type hasconstraining facets then resulting value satisfy thesefacets, otherwise dynamic error union type pattern facet, pattern testedagainst canonical representation result value. Only atomic types transitive membership uniontype are considered. union type have list types itstransitive membership, supplied value typexs:string xs:untypedAtomic, whichcase rules Castingfrom xs:string xs:untypedAtomic apply), list typesin membership are effectively ignored. more conditions then castingis done according rules first condition thatapplies. none conditions cast adynamic error Example: consider type U member types arexs:integer xs:date. expression cast as U returns thexs:integer value expression current-date() cast as U returns thecurrent date as instance xs:date. expression cast as U returns thexs:integer value Example: consider type V member types arexs:short xs:negativeInteger. expression cast as V returns thexs:short value -123. expression cast as V returns thexs:negativeInteger value -100000. expression cast as V returns thexs:short value expression cast as V adynamic error grounds string"93.7" not lexical space uniontype. Example: consider type W derived theabove type V restriction, pattern facet expression cast as V returns thexs:short value expression cast as V andynamic error grounds string"123" not match pattern facet. list types target type cast expression constructorfunction) type variety list, suppliedvalue be type xs:string orxs:untypedAtomic. rules follow generalprinciple xs:string outlined Casting xs:string andxs:untypedAtomic. semantics operation are consistent validation:that effect casting string S list typeL same as constructing element attributenode string value S, validating usingL as governing type, atomizing resultingnode. result always be either failure, sequence ofzero more atomic values instance itemtype L item type L aunion type, instance atomic types itstransitive membership). item type list type namespace-sensitive, thenthe namespace bindings static context be used toresolve namespace prefix, same way as targettype xs:QName. list type pattern facet, patternmust match supplied value after collapsing whitespace equivalent use fn:normalize-spacefunction). example, expression cast B C D" asxs:NMTOKENS sequence fourxs:NMTOKEN values, example, given user-defined typemy:coordinates defined as list ofxs:integer facet expression return sequence xs:integer values(2, -1), expression result dynamic error because length ofthe list not conform length facet. Theexpression also failbecause strings are notin lexical space xs:integer. References A.1Normative references Character Model World Wide Web Character Model World Wide Web Fundamentals.Available IEEE IEEE. IEEE Standard Floating-PointArithmetic. ISO3166-1 ISO Organization Standardization) Codesfor representation names countries subdivisions- Part Country codes ISO ISO10967 ISO Organization Standardization).Information technologyâLanguage Independent ArithmeticâPart floating point arithmetic ISO/IEC10967-1:2012. Locale DataMarkup Language Unicode Technical Standard #35, Locale Data Markup Language.Available Legacyextended IRIs XML resource identification Legacy extended IRIs XML resource identification.Henry S. Thomson, Richard Tobin, Norman Walsh World WideWeb Consortium. November Available RFC2376 IETF. RFC XML Media Types. Available RFC3023 IETF. RFC XML Media Types. Available RFC3986 IETF. RFC Uniform Resource Identifiers Syntax. Available RFC3987 IETF. RFC Internationalized Resource Identifiers(IRIs). Available OlsonTimezone Database tz timezone database, available version database used. TheUnicode Standard Unicode Consortium, Reading, MA, Addison-Wesley, Unicode Standard as updated time time thepublication new versions. latest version additional information versions ofthe standard Unicode Character Database. version ofUnicode be used implementations are recommended usethe latest Unicode version; currently, Version 6.0.0. Unicode Collation Algorithm Unicode Technical Standard #10, Unicode Collation Algorithm.Available Unicode Normalization Forms Unicode Standard Annex #15, Unicode Normalization Forms.Available Unicode Standard], versionto be used Unicode Regular Expressions Unicode Technical Standard #18, Unicode Regular Expressions.Available ExtensibleMarkup Language Edition) Extensible MarkupLanguage Edition), Tim Bray, JeanPaoli, Michael Sperberg-McQueen, et. al., Editors. WorldWide Web Consortium, Nov version ishttp://www.w3.org/TR/2008/REC-xml-20081126/. latest version available athttp://www.w3.org/TR/xml. ExtensibleMarkup Language Recommendation Extensible MarkupLanguage Edition), Tim Bray, JeanPaoli, Michael Sperberg-McQueen, et. al., Editors. WorldWide Web Consortium, Aug version ishttp://www.w3.org/TR/2006/REC-xml11-20060816. latest version available athttp://www.w3.org/TR/xml11/. XML PathLanguage Version XML Path Language(XPath) Version James Clark Steven DeRose,Editors. World Wide Web Consortium, Nov Thisversion Thelatest version isavailable XML PathLanguage XML PathLanguage Edition), Don Chamberlin,Anders Berglund, Scott Boag, et. al., Editors. World WideWeb Consortium, December version ishttp://www.w3.org/TR/2010/REC-xpath20-20101214/. latest version available athttp://www.w3.org/TR/xpath20/. XMLPath Language XML PathLanguage Jonathan Robie, Don Chamberlin,Michael Dyck, John Snelson, Editors. World Wide Web Consortium, 08April version ishttp://www.w3.org/TR/2014/REC-xpath-30-20140408/. latest version available athttp://www.w3.org/TR/xpath-30/. XQuery XPath Functions andOperators XQuery1.0 XPath Functions Operators Ashok Malhotra, Jim Melton, Norman Walsh,Editors. World Wide Web Consortium, December versionis Thelatest versionis available XSLTransformations Version XSLTransformations Version Edition),Michael Kay, Editor. World Wide Web Consortium, January version Thelatest version isavailable XQuery XPath Data Model XQuery XPathData Model Norman Walsh, Anders Berglund,John Snelson, Editors. World Wide Web Consortium, April version ishttp://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/. Thelatestversion available athttp://www.w3.org/TR/xpath-datamodel-30/. XSLT XQuery Serialization3.0 XSLT andXQuery Serialization Henry Zongaro, Andrew Coleman,Michael Sperberg-McQueen, Editors. World Wide Web Consortium, 08April version ishttp://www.w3.org/TR/2014/REC-xslt-xquery-serialization-30-20140408/.The latestversion available athttp://www.w3.org/TR/xslt-xquery-serialization-30/. XQuery XPath FormalSemantics XQuery1.0 XPath Formal Semantics Edition),JÃ©rÃ´me SimÃ©on, Denise Draper, Peter Frankhauser, et. al.,Editors. World Wide Web Consortium, December versionis Thelatest versionis available XQuery1.0: XML Query Language XQuery AnXML Query Language Edition), Don Chamberlin,Anders Berglund, Scott Boag, et. al., Editors. World WideWeb Consortium, December version ishttp://www.w3.org/TR/2010/REC-xquery-20101214/. latest version available athttp://www.w3.org/TR/xquery/. XQuery XML Query Language XQuery AnXML Query Language, Jonathan Robie, Don Chamberlin,Michael Dyck, John Snelson, Editors. World Wide Web Consortium, 08April version ishttp://www.w3.org/TR/2014/REC-xquery-30-20140408/. latest version availableat XMLInclusions Version Edition) XML Inclusions(XInclude) Version Edition), Jonathan Marsh,David Orchard, Daniel Veillard, Editors. World Wide WebConsortium, Nov version ishttp://www.w3.org/TR/2006/REC-xinclude-20061115/. latest version available athttp://www.w3.org/TR/xinclude/. XML Schema Part Datatypes SecondEdition XML Schema Part Datatypes Second Edition, Oct. Schema Part W3C XMLSchema Definition Language Part Datatypes,David Peterson, Sandy Gao, Ashok Malhotra, et. al.,Editors. World Wide Web Consortium, Apr Thisversion latestversion available athttp://www.w3.org/TR/xmlschema11-2/. Namespaces XML Namespaces inXML Edition), Tim Bray, Dave Hollander,Andrew Layman, et. al., Editors. World Wide WebConsortium, Dec version ishttp://www.w3.org/TR/2009/REC-xml-names-20091208/. latest version available athttp://www.w3.org/TR/xml-names. A.2 Non-normative references XSLTransformations Version XSLTransformations Version Michael Kay, Editor.World Wide Web Consortium, December version ishttp://www.w3.org/TR/2013/WD-xslt-30-20131212/. latest version available athttp://www.w3.org/TR/xslt-30/. Calendrical Calculations Edward M. Reingold Nachum Dershowitz. CalendricalCalculations Millennium edition Edition). CambridgeUniversity Press, ISBN Character Model World Wide Web1.0: Normalization Character Model World Wide Web Normalization,Last Call Working Draft. Available HTML4.0 HTML Recommendation, December Available ISO8601 ISO Organization Standardization).Representations dates times, Availablefrom: POSIX.1-2008 Open Group Base Specifications Isuse Std1003.1-2008). Available Working Timezones World Wide Web Consortium Working Group Note. Working WithTimezones, October Available B Errorsummary error text provided errors non-normative. err:FOAR0001,Division error raised attempt made divide byzero. err:FOAR0002,Numeric operation overflow/underflow. error raised numeric operations result anoverflow underflow. err:FOCA0001, Inputvalue too large decimal. Raised casting xs:decimal suppliedvalue implementation-defined limits datatype. err:FOCA0002,Invalid lexical value. Raised fn:resolve-QName andfn:QName suppliedvalue not have lexical form QName URIrespectively; casting decimal, supplied value isNaN Infinity. err:FOCA0003, Inputvalue too large integer. Raised casting xs:integer suppliedvalue implementation-defined limits datatype. err:FOCA0005, NaNsupplied as float/double value. Raised multiplying dividing duration number, ifthe number supplied NaN. err:FOCA0006, Stringto be cast decimal too many digits precision. Raised casting string xs:decimal thestring more digits precision implementation canrepresent implementation also option rounding). err:FOCH0001,Codepoint not valid. Raised fn:codepoints-to-stringif input integer not codepoint avalid XML character. err:FOCH0002,Unsupported collation. Raised function uses collation requestedcollation not recognized. err:FOCH0003,Unsupported normalization form. Raised fn:normalize-unicode ifthe requested normalization form not supported theimplementation. err:FOCH0004,Collation not support collation units. Raised functions such as fn:contains requestedcollation not operate character-by-character basis. err:FODC0001, Nocontext document. Raised fn:id, fn:idref, fn:element-with-id thenode tree be searched node treewhose root not document node. err:FODC0002, Errorretrieving resource. Raised fn:doc, fn:collection, fn:uri-collection toindicate either supplied URI be dereferenced toobtain resource, resource returned notparseable as XML. err:FODC0003,Function not defined as deterministic. Raised fn:doc, fn:collection indicate thatit not possible return result guaranteeddeterministic. err:FODC0004,Invalid argument fn:collection. Raised fn:collection argumentis not valid xs:anyURI. err:FODC0005,Invalid argument fn:doc fn:doc-available. Raised fn:doc fn:doc-available theargument not valid xs:anyURI. err:FODC0006, Stringpassed fn:parse-xml not well-formed XML document. Raised fn:parse-xml suppliedstring not well-formed namespace-well-formed XML document;or DTD validation requested document not validagainst DTD. err:FODC0010, Theprocessor not support serialization. Raised fn:serialize called theprocessor not support serialization, cases hostlanguage serialization optional feature. err:FODF1280,Invalid decimal format name. error raised decimal format name supplied tofn:format-number isnot valid QName, prefix QName undeclared, orif there decimal format static context matchingname. err:FODF1310,Invalid decimal format picture string. error raised picture string supplied fn:format-number invalidsyntax. err:FODT0001,Overflow/underflow date/time operation. Raised casting date/time data types, performingarithmetic date/time values, arithmetic overflow orunderflow err:FODT0002,Overflow/underflow duration operation. Raised casting duration data types, performingarithmetic duration values, arithmetic overflow orunderflow err:FODT0003,Invalid timezone value. Raised adjust-date-to-timezone relatedfunctions supplied timezone invalid. err:FOER0000,Unidentified error. Error code used fn:error other error code isprovided. err:FOFD1340,Invalid date/time formatting parameters. error raised picture string orcalendar supplied fn:format-date, fn:format-time, fn:format-dateTime hasinvalid syntax. err:FOFD1350,Invalid date/time formatting component. error raised picture string supplied fn:format-date acomponent not present date, picture stringsupplied fn:format-time acomponent not present time. err:FONS0004, Nonamespace found prefix. Raised fn:resolve-QName andanalagous functions supplied QName prefix nobinding namespace. err:FONS0005,Base-uri not defined static context. Raised fn:resolve-uri base URIis available resolving relative URI. err:FORG0001,Invalid value cast/constructor. general-purpose error raised casting, cast betweentwo data types allowed principle, supplied valuecannot be converted: example attempting cast string"nine" integer. err:FORG0002,Invalid argument fn:resolve-uri(). Raised either argument fn:resolve-uri not validURI/IRI. err:FORG0003,fn:zero-or-one called sequence containing more oneitem. Raised fn:zero-or-one suppliedvalue more item. err:FORG0004,fn:one-or-more called sequence containing items. Raised fn:one-or-more suppliedvalue empty sequence. err:FORG0005,fn:exactly-one called sequence containing more thanone item. Raised fn:exactly-one suppliedvalue not singleton sequence. err:FORG0006,Invalid argument type. Raised functions such as fn:max, fn:min, fn:avg, fn:sum supplied sequencecontains values inappropriate function. err:FORG0008, Thetwo arguments fn:dateTime have inconsistent timezones. Raised fn:dateTimeif arguments have timezones timezones aredifferent. err:FORG0009, Errorin resolving relative URI base URI infn:resolve-uri. catch-all error fn:resolve-uri, recognizingthat implementation choose variety algorithmsand fail variety reasons. err:FORX0001,Invalid regular expression flags. Raised regular expression functions such as fn:matches fn:replace regularexpression flags contain character other thanimsx err:FORX0002,Invalid regular expression. Raised regular expression functions such as fn:matches fn:replace regularexpression syntactically invalid. err:FORX0003,Regular expression matches string. functions such as fn:replace fn:tokenize, error ifthe supplied regular expression capable matching zerolength string. err:FORX0004,Invalid replacement string. Raised fn:replace toreport errors replacement string. err:FOTY0012,Argument fn:data() node not have typedvalue. Raised fn:data, byimplicit atomization, applied node typed value, themain example being element validated complex type thatdefines have element-only content. err:FOTY0013, Theargument fn:data() function item. Raised fn:data, byimplicit atomization, sequence be atomized afunction item. err:FOTY0014, Theargument fn:string() function item. Raised fn:string, orby implicit string conversion, input sequence afunction item. err:FOTY0015, Anargument fn:deep-equal() function item. Raised fn:deep-equal either inputsequence function item. err:FOUT1170,Invalid argument fn:unparsed-text() dynamic error raised fragment identifier, be used toretrieve resource containing text. err:FOUT1190, Cannotdecode resource retrieved fn:unparsed-text() dynamic error raised retrieved resourcecontains octets be decoded Unicode usingthe specified encoding, resulting characters are notpermitted XML characters. case theprocessor not support requested encoding. err:FOUT1200, Cannotinfer encoding resource retrieved fn:unparsed-text()(etc.) dynamic error raised absent processor infer encoding usingexternal information encoding not UTF-8. C Illustrativeuser-written functions Certain functions were proposed inclusion thisfunction library have been excluded basis isstraightforward users implement functions themselvesusing XSLT XQuery Appendix sample implementations thesefunctions. emphasize functions are examples functions thatvendors write, names carry prefix Vendors arefree define such functions namespace. group vendorsmay also choose create collection such useful functions andput common namespace. C.1eg:if-empty eg:if-absent situations, users want provide default values formissing information be signaled elements areomitted, have value have empty sequence as value.For example, missing middle initial be indicated omittingthe element non-existent bonus signaled emptysequence. section examples functions providesuch defaults. functions returnxs:anyAtomicType*. Users want write functionsthat return more specific types. C.1.1 eg:if-empty eg:if-empty($node as node()?,$value as xs:anyAtomicType) as xs:anyAtomicType* first argument empty sequence elementwithout simple complex content, eg:if-empty()returns second argument; otherwise, returns content ofthe first argument. XSLT implementation name="eg:if-empty" name="node" name="value" select="($node[child::node()], XQuery implementation declare function eg:if-empty as node()?, as xs:anyAtomicType) as xs:anyAtomicType* C.1.2 eg:if-absent eg:if-absent($node as node()?,$value as xs:anyAtomicType) as xs:anyAtomicType* first argument empty sequence,eg:if-absent() returns second argument; otherwise,it returns content first argument. XSLT implementation name="eg:if-absent" name="node" name="value" select="($node, XQuery implementation declare function eg:if-absent as node()?, as xs:anyAtomicType) as xs:anyAtomicType* C.2 Union, intersection anddifference sequences values C.2.1eg:value-union eg:value-union( as xs:anyAtomicType*, as xs:anyAtomicType*) as xs:anyAtomicType* function returns sequence containing distinctitems arbitrary order. XSLT implementation name="eg:value-union" name="arg1" name="arg2" select="fn:distinct-values(($arg1, XQuery implementation declare function eg:value-union as xs:anyAtomicType*, as xs:anyAtomicType*) as xs:anyAtomicType* fn:distinct-values(($arg1, C.2.2eg:value-intersect eg:value-intersect( as xs:anyAtomicType*, as xs:anyAtomicType*) as xs:anyAtomicType* function returns sequence containing distinctitems appear arbitraryorder. XSLT implementation> name="eg:value-intersect" name="arg1" name="arg2" select="fn:distinct-values($arg1[.=$arg2])"/></xsl:function> XQuery implementation declare function eg:value-intersect as xs:anyAtomicType*, as xs:anyAtomicType* as xs:anyAtomicType* fn:distinct-values($arg1[.=$arg2])} C.2.3eg:value-except eg:value-except( as xs:anyAtomicType*, as xs:anyAtomicType*) as xs:anyAtomicType* function returns sequence containing distinctitems appear not arbitraryorder. XSLT implementation name="eg:value-except" name="arg1" name="arg2" select="fn:distinct-values($arg1[not(.=$arg2)])"/></xsl:function> XQuery implementation declare function eg:value-except as xs:anyAtomicType*, as xs:anyAtomicType*) as xs:anyAtomicType* fn:distinct-values($arg1[not(.=$arg2)])} C.3eg:index-of-node eg:index-of-node($seq as node()*, as node()) as xs:integer* function returns sequence positive integers giving thepositions sequence nodes areidentical nodes sequence are compared rules isoperator. node identical, then position thatnode sequence included theresult. value empty sequence, ifno node matches then theempty sequence returned. index not result sequence ascending numeric order. XSLT implementation name="eg:index-of-node" name="seq" name="search" select="filter( function($i as xs:integer) as xs:boolean count($seq) XQuery implementation declare function eg:index-of-node($seq as node()*, as node()) as xs:integer* fn:filter( function($i as xs:integer) as xs:boolean fn:count($seq) alternative implementation, be faster systemswhere indexing sequence slow, declare function eg:index-of-node($seq as node()*, as node()) as xs:integer* fn:for-each-pair(function($node, then else fn:count($seq))} C.4 eg:string-pad eg:string-pad($padString as xs:string?,$padCount as xs:integer) as xs:string Returns xs:string consisting given number ofcopies xs:string argument concatenatedtogether. XSLT implementation name="eg:string-pad" name="padString" name="padCount" select=" fn:string-join(for return XQuery implementation declare function eg:string-pad as xs:string?, as xs:integer) as xs:string fn:string-join(for return returns string empty sequence, consistent generalprinciple xs:string argument emptysequence treated as were string. C.5 eg:distinct-nodes-stable eg:distinct-nodes-stable($arg as node()*) as node()* function possible implementation adistinct-nodes function. duplicate nodes identity,preserving first occurrence node. XPath position()-1) intersect XSLT implementation name="eg:distinct-nodes-stable" name="arg" select="" fn:fold-left( function($foundSoFar as node()*, as node()) as node()* intersect then else XQuery implementation declare function distinct-nodes-stable as node()*) as node()* fn:fold-left( function($foundSoFar as node()*, as node()) as node()* intersect then else C.6 Findingminima maxima fn:min fn:max functions allow todetermine smallest largest values set values, butthey do not directly allow determine elements having thesmallest largest value property, example theemployees earning highest lowest salary. functions inthis section show be achieved. functions take as input arbitrary sequence items(typically not necessarily sequence elements) afunction property value items.This be value atomic type order comparisonsare defined. functions return items inputsequence have higher lower) value given propertythan others sequence. there are several arejoint highest lowest) then are returned. C.6.1 eg:highest function eg:highest returns items havingthe highest value supplied function. XSLT implementation name="eg:highest" name="f" as xs:anyAtomicType"/> name="seq" select=" fold-left( function($highestSoFar as item()*, as item()*) as item()* let let return gt then else eq then else head($seq), tail($seq))"/></xsl:function> XQuery implementation declare function eg:highest( as function(item()) as xs:anyAtomicType, as item()*) as item()* fn:fold-left( function($highestSoFar as item()*, as item()*) as item()* let let return gt then else eq then else fn:head($seq), fn:tail($seq))}; find employees highest salary, functionmight be called eg:highest(function($emp){$emp/salary}, C.6.2 eg:lowest function eg:lowest returns items having thelowest value supplied function. XSLT implementation name="eg:lowest" name="f" as xs:anyAtomicType"/> name="seq" select=" fold-left( function($lowestSoFar as item()*, as item()*) as item()* let let return lt then else eq then else head($seq), tail($seq))"/></xsl:function> XQuery implementation declare function eg:highest( as function(item()) as xs:anyAtomicType, as item()*) as item()* fn:fold-left( function($lowestSoFar as item()*, as item()*) as item()* let let return gt then else eq then else fn:head($seq), fn:tail($seq))}; find employees lowest total number hoursworked, function be called eg:lowest(function($emp){sum($emp/timesheet/period/hours}, C.7 Sorting XSLT XQuery include constructs sorting sequences.However, often be convenient invoke sorting simplefunction call. example function section twoarguments, sequence be sorted, function compute asort key, returns items input sequence insorted order sort key. XSLT implementation name="eg:sort" name="f" as xs:anyAtomicType"/> name="seq" select="$seq"> select="$f(.)"/> XQuery implementation declare function eg:sort( as function(item()) as xs:anyAtomicType, as item()*) as item()* order return obtain list employees sorted salary, functionmight be called eg:sort(function($emp){$emp/salary}, D Checklist ofimplementation-defined features version Unicode supported, itis recommended most recent version Unicode be used.(See Conformance.) type system based XML Schema1.0 XML Schema Conformance.) version Standard] supported, recommended themost recent version Unicode be used. Strings, characters, andcodepoints.) functions as fn:distinct-values andfn:unordered) produceresults order. such cases there guaranteethat order results different calls be same.These functions are said be non-deterministic respect toordering. Properties offunctions.) results function are described as being agreater lesser extent) not remove therequirement results be deterministic: thatrepeated calls same explicit implicit argumentsmust return identical results. Properties functions.) case document node returned thefn:doc function, documentnode root tree containing node returned thefn:collection function,it always be true either fn:document-uri($D)returns empty sequence, following expression istrue: fn:doc(fn:document-uri($D)) guarantee also documentnodes obtained other means, example document node passedas initial context node query transformation. addition, values converted anxs:string, be directed trace data set. Thedestination trace output format trace output dependentÂ·. ordering output calls thefn:trace function dependentÂ·. fn:trace.) provide mechanism users choose betweenraising error returning result modulo largestrepresentable integer value. Arithmetic operators onnumeric values.) xs:decimal values number digits ofprecision returned numeric operators number digits result exceedsthe number digits implementation supports, resultis truncated rounded manner. Arithmeticoperators numeric values.) xs:decimal values number digits ofprecision returned numeric operators number digits result exceedsthe number digits implementation supports, resultis truncated rounded manner. Arithmeticoperators numeric values.) specificationalso handling exception conditions calleddivideByZero invalidOperation. TheIEEE divideByZero exception raised not only adirect attempt divide also operations such aslog(0). IEEE invalidOperationexception raised attempts call function argumentthat outside function's domain example,sqrt(-1) log(-1). IEEEexceptions do not cause dynamic error application level;rather result relevant function operator returningNaN. underlying IEEE exceptionmay be notified application userby warning condition, observable effecton application using functions operators defined thisspecification simply return NaN error.(See Arithmetic operators numericvalues.) specificationdistinguishes NaN values, quiet NaN signaling NaN.These values are not distinguishable XDM model: thevalue spaces xs:float xs:doubleeach include only single NaN value. notprevent implementation distinguishing internally, andtriggering different warning conditions, such distinctions donot affect observable behavior application using thefunctions operators defined specification. operators numericvalues.) implementation adopt different algorithm provided thatit equivalent formulation cases behavior not affect outcome, forexample, implementation-defined precision result ofxs:decimal division. op:numeric-integer-divide.) XSD string as representationof positive infinity; XSD not. XSD supported. fn:number.) other format token, numbering sequence inwhich token number notebelow). numbering sequences, additional thoselisted above, are supported. implementation not supporta numbering sequence represented given token, itmust use format token format tokens other first kind above thatconsists decimal digits), there beÂ·implementation-definedÂ· lower upper bounds range numbersthat be formatted using format token; indeed, somenumbering sequences there be intrinsic limits. example, theformat token digit arange imposed Unicode character repertoire 20in Unicode versions prior increased subsequentversions. numbering sequences described above anyupper bound imposed implementation notbe less lower bound not begreater Numbers fall outside rangemust be formatted using format token1. fn:format-integer.) set languages numbering supported argument absent,or set empty sequence, invalid, not languagesupported implementation, then number formatted usingthe default language dynamic context. t, indicatealphabetic traditional numbering respectively, default beingÂ·implementation-definedÂ·. fn:format-integer.) combinations values formattoken, language, cardinal/ordinal modifier aresupported. ordinal numbering not supported thecombination format token, language, stringappearing parentheses, request ignored cardinalnumbers are generated instead. fn:format-integer.) use tmodifier disambiguates numbering sequences useletters. many languages there are commonly used numberingsequences use letters. numbering sequence numericvalues letters alphabetic sequence, other assignsnumeric values letter other manner traditional inthat language. English, correspond numberingsequences specified format tokens andi. languages, first member eachsequence same, so format token alone beambiguous. absence ort modifier, default fn:format-integer.) static context set decimal formats. thedecimal formats unnamed, others are identified aQName. There always unnamed decimal format available, itscontents are Defining decimal format.) IEEE states preferred quantum language-defined. Inthis specification, Trigonometricand exponential functions.) IEEE various rounding algorithms inexact results,and states choice rounding direction, themechanisms influencing choice, are language-defined. Inthis specification, rounding direction mechanisms forinfluencing are Trigonometricand exponential functions.) set collations are supported implementation option supportall collation URIs, case never raise error.(See Choosing collation.) Conforming implementations supportnormalization form supportnormalization forms also support other normalization formswith semantics. fn:normalize-unicode.) possible define collations do not have abilityto decompose string units suitable substring matching.An argument function defined section be URI thatidentifies collation able compare strings, butthat not have capability split string intocollation units. Such collation cause function fail,or give unexpected results be rejected as anunsuitable argument. ability decompose strings intocollation units property collation. Functions based substringmatching.) minimally conforming processors supportpositive year values minimum digits YYYY) aminimum fractional second precision millisecond threedigits s.sss). However, conforming processorsÂ·mayÂ· set largerÂ·implementation-definedÂ· limits maximum number digits theysupport situations. Processors also choose support year yearswith negative values. results operations dates crossthe year are Limits precision.) minimally conforming processors supportpositive year values minimum digits YYYY) aminimum fractional second precision millisecond threedigits s.sss). However, conforming processorsÂ·mayÂ· set largerÂ·implementation-definedÂ· limits maximum number digits theysupport situations. Processors also choose support year yearswith negative values. results operations dates crossthe year are Limits precision.) format token n, N, orNn, indicating value component tobe output name, lower-case, upper-case, title-caserespectively. Components be output name include not limited months, days week, timezones, eras.If processor output components name thechosen calendar language then use fallback representation. picture string.) alphabetic traditional numbering respectively,the default being same meaning as secondargument fn:format-integer. picture string.) format token consisting single digit, such as1, not constrain number digits theoutput. case fractional seconds particular,[f001] requests decimal digits,[f01] requests digits, willproduce number digits. exactly digit isrequired, be achieved using component specifier[f1,1-1]. Thepicture string.) set languages, calendars, places thatare supported formatting functionsÂ· arguments omitted isan empty sequence, default value used. language, calendar, placearguments.) set languages, calendars, places thatare supported formatting functionsÂ· arguments omitted isan empty sequence, default value used. language, calendar, placearguments.) choice names abbreviations used givenlanguage example, implementation mightabbreviate July as Jul usesJly. German, implementation representSaturday as Samstag usesSonnabend. Implementations mayprovide mechanisms allowing users control such choices. language, calendar, placearguments.) choice names abbreviations used givenlanguage calendar units such as days week months ofthe year language,calendar, place arguments.) calendar value present be validEQName error: Ifit lexical QName then expanded anexpanded QName using statically known namespaces;if prefix then expanded-QName nonamespace. expanded QName namespace, then itmust identify calendar designatorspecified below error: expandedQName namespace then calendar way. Thelanguage, calendar, place arguments.) least above calendars besupported. calendars are supported. language, calendar, placearguments.) Various aspects processing are Implementations provide externalconfiguration options allow aspect processing becontrolled user. particular:... fn:doc.) DTD validation schemavalidation applied source document. fn:doc.) default, function means repeated calls thefunction same argument return same result.However, performance reasons, implementations provide auser option evaluate function guarantee ofdeterminism. manner such option provided user not selected such option,a call function either return deterministic resultor raise dynamic error fn:collection.) processor use heuristics determine likely encoding,otherwise... fn:unparsed-text.) fact resolution URIs defined mapping inthe dynamic context means effect, various aspects thebehavior function are Implementations provide externalconfiguration options allow aspect processing becontrolled user. particular:... fn:unparsed-text.) collation used matching names be same as collation used toensure names environment variables are unique. precise process used construct XDM instance particular, implementation-definedwhether DTD schema validation invoked, isimplementation-defined XML XML parser isused. fn:parse-xml.) precise process used construct XDM instance particular, implementation-definedwhether XML XML parser used. fn:parse-xml-fragment.) arguments fn:function-lookup identify afunction present static context functioncall, function always return same function astatic reference function bind there nosuch function static context, then results depend onwhat present dynamic context, fn:function-lookup.) ST xs:float orxs:double, then TV thexs:decimal value, set ofxs:decimal values implementation capableof representing, numerically closest SV. twovalues are equally close, then closest ischosen. SV too large be accommodated as anxs:decimal, SchemaPart Datatypes Second Edition] limits numeric values) adynamic error raised SV thespecial xs:float xs:double valuesNaN, INF, adynamic error raised Casting xs:decimal.) ST xs:decimal, xs:floator xs:double, then TV SV thefractional part discarded value converted toxs:integer. Thus, casting returns3 returns -17.Casting returns IfSV too large be accommodated as integer, Schema Part Datatypes SecondEdition] limits numeric values) adynamic error raised SV thespecial xs:float xs:double valuesNaN, INF, adynamic error raised Casting xs:integer.) casting xs:decimal type derived fromxs:decimal, value not too large too smallbut nevertheless be represented accurately numberof decimal digits available implementation, theimplementation round nearest representable value mayraise dynamic error choice rounding algorithmand choice rounding error behavior Castingfrom xs:string xs:untypedAtomic.) tz timezone database, available version database used. Timezone Database.) Unicode Consortium, Reading, MA, Addison-Wesley, Unicode Standard as updated time time thepublication new versions. latest version additional information versions ofthe standard Unicode Character Database. version ofUnicode be used implementations are recommended usethe latest Unicode version; currently, Version 6.0.0. Unicode Standard.) Unicode Standard Annex #15, Unicode Normalization Forms.Available Unicode Standard], versionto be used UnicodeNormalization Forms.) E Changes since previousRecommendation E.1 Substantive changes Working Draft December following changeswere made relative first edition Functions andOperators specification XPath XQuery published on23 January Errata E1 E47 were applied. version fn:round function was introduced.(Bugzilla single-argument version fn:string-join function wasintroduced. Specifications functions fn:format-date, fn:format-time, fn:format-dateTime weretransferred XSLT specification. specification fn:format-number wastransferred XSLT specification. function fn:format-integer wasintroduced. function fn:generate-id was introduced,transferred XSLT specification. range trigonometric functions was defined newnamespace). New functions fn:parse-xml fn:serialize were defined. function was subsequently renamed fn:parse-xml new function fn:analyze-string wasdefined. syntax regular expressions was extended allownon-capturing groups. new flag was introduced argumentof functions use regular expressions: flagcauses characters regular expression be treated asordinary characters rather metacharacters. Supporting new language feature higher-order functions, anumber functions were defined operate function items astheir arguments: fn:map renamed fn:for-each), fn:filter,fn:map-pairs renamed fn:for-each-pair), fn:fold-left, fn:fold-right. functionfn:partial-apply, however, was introduced theprevious version Working Draft, now been dropped infavor custom syntax partial application using as aplace-holder missing arguments. description fn:error function was rewritten toallow introduction try/catch facilities XQuery andXSLT. section describing means functions becontextual deterministic was rewritten. termdeterministic replaced stable. E.2 Substantive changes Last Call Working Draft June followingsubstantive changes are made relative draft December2009: version number specification changed to3.0. New functions math:exp, math:exp10, math:log, math:log10, math:atan2, math:pow are defined. Thetrigonometric exponential functions are now specified byreference rules fn:format-dateTime andrelated functions, rules formatting timezones have beenexpanded clarified; argument isrenamed value now be Olsontimezone name. rules fn:normalize-unicodefunction are now defined directly reference Unicodespecifications rather W3C Working Draft CharacterModel World Wide Web never progressed WorkingDraft status). rules normalization formFULLY_NORMALIZED are now defined normatively thisspecification. syntax picture string used fn:format-integer beenextended allow grouping positions be associated optionaldigit positions. convenience functions fn:head fn:tail are added, reflecting theincreased role played head-tail recursive functions writingcode take advantage higher-order functions. function fn:partial-apply been removed, asthis functionality now provided custom syntax application, using as placeholder missingarguments). New functions fn:function-name, fn:function-arity, andfn:function-lookupare available. new function fn:parse-xml-fragmentwas introduced. change went unremarked change log upto including Candidate Recommendation January2013.) Casting dynamic string xs:QName atype derived xs:NOTATION now permitted argument be string literal beenremoved). forms have been introduced functionsfn:data, fn:document-uri, fn:node-name, fn:base-uri, fn:nilled, fn:has-children, theargument defaulting context item case. new function fn:parse renamed fn:parse-xml. rules handling negative have been clarified.Where operations return negative then generalimplementations respect only exception forcasting string float double, lexical form-0 result positive forcompatibility existing XML Schema processors. functions fn:unparsed-text andfn:unparsed-text-availablehave been transferred unchanged XSLT andfn:unparsed-text-lineshas been transferred XSLT draft. function fn:uri-collection beenadded. was originally defined as output work onstreaming XSLT purpose give applications greatercontrol processing individual documents largecollection. rules fn:resolve-uri function havebeen rewritten refer more up-to-date specifications,specifically IRI LEIRI specifications. Implementations arerequired support IRI syntax as minimum, are permittedto support legacy extensions defined LEIRI. new functions fn:environment-variableand fn:available-environment-variableshave been defined. Casting string xs:untypedAtomic value toa union list type now allowed. References Formal Semantics have been removed. Rules precision results trigonometric andexponential functions have been removed, replaced anormative reference rules IEEE specifications. functions fn:unparsed-text-lines,fn:has-children,fn:innermost andfn:outermost have beentransferred XSLT working draft. function fn:path hasbeen added. References IEEE define semantics ofoperations floating point) have been updatedto refer IEEE error codes produced fn:collection have beenclarified, possibly involving incompatible changes. regular expressions option) themeta-character now matches everything x0A x0D.Previously was defined match everything x0A, wasan unnecessary unintended incompatibility regularexpressions XSD. E.3 Substantive changes(Candidate Recommendation) Candidate Recommendation, following substantivechanges are made relative Last Call Working Draft draft of18 June Functions dependencies static dynamic context cannow be bound function items example, use fn:function-lookup), andthe rules doing so have been clarified. specification fn:format-integer amore precise distinction situations processormust report error supplied picture, situations whereit adopt fallback representation. conditions static base URI used duringstatic analysis differ base URI used evaluationare now more clearly consistently described. concept ofdynamic base URI dropped. syntax regular expressions now described referenceto XSD specification as as XSD specification.(XSD much clearer exposition syntax andsemantics regular expressions introducing intendedchanges functionality.) edge cases capturing subgroups regular expressionsare described. role schema data returned fn:analyze-string moreclearly defined. result fn:path,dependencies default namespace functions have beenremoved, ensuring function calls return path usefully-qualified names. specification fn:deep-equal, consequencesof existing rules comparing validated unvalidatedtrees are more carefully explained. rules fn:unparsed-text functionhave been expressed higher level abstraction, using thecontext same way as fn:doc function, making use ofconcepts such as distinction web architecture aresource representation. number rules have been added, were previouslyomitted, concerning constructors target type isa union list type. E.4 Substantive changes Recommendation) following changes were made subsequent CandidateRecommendation January functions fn:map fn:map-pairsare renamed fn:for-eachand fn:for-each-pairrespectively. change made remove risk potentialconfusion syntactic conflicts map data type isadded language, as proposed current XSLT WorkingDraft. arguments functions fn:for-each fn:for-each-pair, fn:filter, fn:fold-left, fn:fold-right are re-ordered.This change been made interests usability andconsistency other functions. regular expression matching format modifier thepicture string supplied fn:format-integer beencorrected match accompanying prose. function signature xs:QName constructorfunction been corrected show supplied value bean empty sequence error arose because XPath thisconstructor was special case, requiring suppliedargument be string literal). function signature fn:adjust-dateTime-to-timezonefunction been corrected show returned value bean empty sequence, making signature consistent prosedescription XPath version thespecification. argument functions fn:format-date family nowbe EQName consistency, error conditionsfor arguments functions are more clearly spelled out.(Bug section been added describe constructor functionxs:error present implementations support XSD1.1. existence such function consequence generalrules included published Candidate Recommendation, thefunction was not listed along other constructor functions forbuilt-in XSD types. paragraph been added explaining interpret theweek-in-month component fn:format-date family offunctions case chosen calendar ISOcalendar. now stated error regular expression touse Unicode block name not defined version(s) ofUnicode supported processor. treatmentof condition XSD Error conditions are now properly categorized as type errors ordynamic errors, particular error conditionXPDY0002 was previously categorized as type errorthis been corrected. now stated failure cast union type alwaysa dynamic error, not type error. now noted versions functionsfn:format-date,fn:format-dateTime, andfn:format-time aredependent namespaces static context, since thecalendar argument lexical QName. rules use fn:function-lookup whenapplied context-dependent built-in functions have beenclarified. intent rules unchanged, have beenexplained more carefully prevent possible misinterpretation.(Bug E.5Editorial changes following editorial changes have been made since firstedition Functions Operators specification XPath XQuery published January are notexplicitly marked change-highlighted version thespecification: References Formal Semantics nearly caseswere references detailed rules static type inferencing) havebeen removed, as Formal Semantics not being maintained. quick reference section containing links functions hasbeen added before full table contents. end-of-documentindexes have been dropped draft readers disappointedby decision are invited make representations editor,since easily be re-instated). section constructor functions been moved so itis now adjacent closely-related section casting. function fn:dateTime been moved out ofthe section describing constructor functions, longerdescribed as special constructor function". now anordinary function described appropriate section along withother functions dates times. term"constructor function" be associated exclusively withsingle-argument functions name same as type nameof value return, suggestion thisfunction special behavior. Similarly, functions fn:true fn:false are longer described asconstructor functions. function referred name, reference nowalways form example) fn:base-uri rather fn:base-uri(). latter form isused only indicate call function argumentsare supplied. specification function now set ofstandard subsections: Summary, Operator Mapping, Signature,Properties, Rules, Error Conditions, Notes, Examples. effect function now just never information be found moredetailed rules, not attempt list unusual errorconditions. Such rules have been moved separate paragraphs.Sometimes language used summary relatively informal.Although summary normative, be regarded asbeing subservient rules follow. Functions are always called, neverinvoked. specification longer functions, nowspecifies seperate section function now lists properties ofthe function: not deterministic,context-dependent, focus-dependent. properties are linkedto definitions. Rules have been rewritten more consistent style: X, function returns Y" such as Y X", andavoiding passive returned"). nearly cases thelanguage used error conditions been standardized theform error raised section heading section function nowalways name function. function definitions havebeen moved subsections achieve Statements rules function follow other rules have many cases been downgraded notes. Anexample statement fn:remove($seq, N) returns emptysequence empty sequence. functions durations dates/times have beensplit separate sections. fn:boolean functionhas been moved Functions Operators Sequences"to Boolean Values". interests automating testing examples, theconvention been adopted result exampleexpression possible given form simple XPathexpression. Specifically numeric string literal used fornumbers strings; expressions true() andfalse() booleans; constructors such asxs:duration('PT0S') other atomic types;expressions such as sequences. Theexpression always return value correct type; so thexs:double value shown as as way value beserialized output. value NaN given asxs:double('NaN'). Previously results were sometimesgiven form, sometimes form serialization theresult value, sometimes dates, times, anddurations) form informal description. cases function be readily specified interms opportunity been taken simplify thespecification. example, operator support functions ofthe form op:xx-greater-than are now specified byreference corresponding op:xx-less-thanfunction arguments reversed. risk ofintroducing errors inconsistencies. cases, rules function have been reordered. Forexample, rule describing empty sequence handled nowgenerally before rule works only argument isnot empty sequence. non-normative examples notes have been added. non-normative example functions Appendix D have beenrevised, new functions are supplied illustrate use cases forhigher-order functions. appendix describing error codes more information. checklist implementation-defined features nowautomatically aligned text. E.6Changes since Proposed Recommendation following changes are made subsequent ProposedRecommendation October are minor editorialchanges. Further details be found referenced W3CBugzilla entries. Bug24228: trivial copy-edit description errorFODC0002. Bug24384: couple trivial copy-edits description offn:unparsed-text-lines; non-normative note toclarify relationship betweenfn:unparsed-text-available andfn:unparsed-text-lines. Bug24385: removed possible ambiguity text, clarify howfn:unparsed-text-lines handles newline end ofthe input file. Bug24646: clarified definition tolink explicitly definition scopeÂ·;the linkage terms was previously implicit. Bug24689: appropriate, references other specificationshave been updated refer latest version. Bug24742: incompatibility relating regular expressions waslisted wrong part F.2Compatibility XPath XPath FCompatibility Previous Versions section extent specificationis compatible previous versions. first incompatibilities XPath andXPath XQuery then incompatibilities XQuery XPath/XQuery F.1 Compatibility XPath andXPath Note: XPath XQuery were aligned, so referencesto XPath section apply equally XQuery appendix relationship certainfunctions defined Path Language corresponding functions defined thisdocument. first column table name thefunction. second column differences thesemantics corresponding functions. functions appear inthe order appear Path Language(XPath) Version more detailed version information be found XPath Functions andOperators]. appendix not include incompatibilities arisesolely change function calling rules occurredbetween XPath XPath incompatibilities thatcan be avoided ensuring XPath compatibility mode isenabled. example, XPath fn:name function applied asequence nodes return name first order); XPath XPath such call typeerror, XPath compatiblity mode enabled. Similarly,functions such as fn:substring, fn:contains, fn:translate expect stringarguments raise type error XPath called aboolean numeric argument, XPath compatibility mode isenabled. more complete list incompatibilities befound XPath Operators]. addition, appendix not include incompatibilitiesthat arise default collation set something otherthan Unicode codepoint collation. appendix not include incompatibilities mightarise due XPath defining specification greaterclarity precision. example, implementation fn:sum XPath returnedNaN given empty node-set as argument wouldnot have contradicted explicit statement specification,while XPath explicit expected result caseis Function Notes fn:last result integer rather double, theprecision subsequent computations be different. fn:position result integer rather double, theprecision subsequent computations be different. fn:count result integer rather double, theprecision subsequent computations be different. fn:id XPath type error boolean numericarguments. rules recognizing node as id value changed.In XPath whole string treated as unit, string treated as list. fn:name rules determining prefix are more precisely definedin Path Language fn:string Representations numeric values are XPath compatibleexcept special values positive negative infinity, andfor values outside range 1.0e-6 fn:string-length result integer rather double, theprecision subsequent computations be different. fn:sum XPath error sequence values thatcannot be added together, such as strings. XPath returnsNaN. fn:floor XPath argument result XPath result NaN. fn:ceiling XPath argument result XPath result NaN. fn:round XPath argument result XPath result NaN. F.2 Compatibility XPath andXPath Note: XPath XQuery were aligned, XPath andXQuery are aligned. So references XPath thissection apply equally XQuery references apply equally XQuery only incompatibilities version thespecification version applied XPath XQuery1.0 are: Clarifications version specification describesthe intended behavior more precisely. Such clarifications have beenmade mainly description functions have significantinteractions processing environment: examples are fn:resolve-uri, fn:collection, fn:doc. regular expressions option) themeta-character now matches everything x0A x0D.Previously was defined match everything x0A, wasan unnecessary unintended incompatibility regularexpressions XSD. x0D rarely XML documents,because ordinarily removed process normalizing lineendings.) functions appearing specification previouslyappeared as part specification XSLT applying functions are as rules timezone formatting using component thesecond argument fn:format-date, fn:format-dateTime, andfn:format-time werepreviously very unclear, have been completely revised. newrules are likely be different interpretation adopted byparticular XSLT processors. Error codes have been changed fit coding scheme usedin specification. however, XSLT there was nointeroperable way testing error codes, specificationexplicitly made error codes non-normative.) 